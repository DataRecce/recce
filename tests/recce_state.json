{"metadata":{"schema_version":"v0","recce_version":"0.45.0.dev0","generated_at":"2024-12-06T10:30:16Z"},"runs":[{"type":"row_count_diff","name":"Row count of multiple nodes","params":{"select":"customers orders state:modified,config.materialized:table"},"check_id":"2ed1b88a-7136-4d72-8195-5828c1906499","result":{"customers":{"base":1856,"curr":1856},"orders":{"base":280844,"curr":280844}},"status":"finished","run_id":"b9b27ad0-4cd6-4b4a-9449-9d6f727e8524","run_at":"2024-11-06T01:10:03Z"},{"type":"value_diff","name":"Value diff of customers","params":{"model":"customers","primary_key":"customer_id","columns":["customer_id","customer_lifetime_value"]},"check_id":"0e00837d-55fc-4143-88e5-8336d9427b8b","result":{"summary":{"total":1856,"added":0,"removed":0},"data":{"columns":[{"name":"column","type":"text"},{"name":"matched","type":"number"},{"name":"matched_p","type":"number"}],"data":[["customer_id","1856","1.0"],["customer_lifetime_value","22","0.011853448275862068"]]}},"status":"finished","run_id":"dd9b12d9-7836-4af5-aa4b-12e29924d538","run_at":"2024-11-06T01:10:03Z"},{"type":"query_diff","name":"Query diff of customers","params":{"sql_template":"SELECT\n    DATE_TRUNC('week', first_order) AS first_order_week,\n    AVG(customer_lifetime_value) AS avg_lifetime_value\nFROM\n    {{ ref(\"customers\") }}\nWHERE first_order is not NULL\nGROUP BY\n    first_order_week\nORDER BY\n    first_order_week;"},"check_id":"149511fc-094d-455e-8a4e-9fbd60c1dd35","result":{"base":{"columns":[{"name":"first_order_week","type":"date"},{"name":"avg_lifetime_value","type":"number"}],"data":[["2019-12-30","5639.755102040816"],["2020-01-06","3749.5384615384614"],["2020-01-13","2286.5"],["2020-02-24","5463.5"],["2020-03-02","5077.785714285715"],["2020-03-09","4578.857142857143"],["2020-03-16","5397.266666666666"],["2020-03-23","4617.916666666667"],["2020-03-30","5443.272727272727"],["2020-04-06","4621.818181818182"],["2020-04-13","5484.111111111111"],["2020-04-20","4720.666666666667"],["2020-04-27","4930.666666666667"],["2020-05-04","5336.6"],["2020-05-11","5949.0"],["2020-05-18","3765.5"],["2020-05-25","4012.875"],["2020-06-01","4206.857142857143"],["2020-06-08","4155.0"],["2020-06-15","3802.1428571428573"],["2020-06-22","4970.833333333333"],["2020-06-29","5947.333333333333"],["2020-07-06","3380.843137254902"],["2020-07-13","5180.169934640523"],["2020-07-20","3053.625"],["2020-07-27","2007.5714285714287"],["2020-08-03","3111.3333333333335"],["2020-08-10","5832.25"],["2020-08-17","5428.666666666667"],["2020-08-24","3593.75"],["2020-08-31","4246.6"],["2020-09-07","4189.666666666667"],["2020-09-14","3466.45"],["2020-09-21","3679.9238095238097"],["2020-09-28","4124.476190476191"],["2020-10-05","3392.4545454545455"],["2020-10-12","3794.0"],["2020-10-19","3687.0476190476193"],["2020-10-26","3560.3125"],["2020-11-02","3700.15"],["2020-11-09","3218.842105263158"],["2020-11-16","3556.75"],["2020-11-23","3172.6666666666665"],["2020-11-30","3124.75"],["2020-12-07","2856.95"],["2020-12-14","3681.5833333333335"],["2020-12-21","3451.153846153846"],["2020-12-28","2956.4615384615386"],["2021-01-04","2410.3333333333335"],["2021-01-11","2747.0"],["2021-01-18","3370.3"],["2021-01-25","3052.0"],["2021-02-01","2683.714285714286"],["2021-02-08","2530.3636363636365"],["2021-02-15","2136.5"],["2021-02-22","2752.75"],["2021-03-01","1173.3333333333333"],["2021-03-08","2100.4285714285716"],["2021-03-15","2489.6666666666665"],["2021-03-22","1869.75"],["2021-03-29","2012.1666666666667"],["2021-04-05","1419.7142857142858"],["2021-04-12","1862.2857142857142"],["2021-04-19","1520.1666666666667"],["2021-04-26","1827.4"],["2021-05-03","2452.4285714285716"],["2021-05-10","2390.25"],["2021-05-17","1511.1666666666667"],["2021-05-24","1598.5714285714287"],["2021-05-31","1762.3333333333333"],["2021-06-07","2191.25"],["2021-06-14","1172.0"],["2021-06-21","1474.5"],["2021-06-28","1348.25"],["2021-07-05","2355.0"],["2021-07-12","1595.6666666666667"],["2021-08-23","786.1063829787234"],["2021-08-30","1187.1025641025642"],["2021-09-06","933.2573529411765"],["2021-09-13","424.5"],["2021-09-20","888.2596153846154"],["2021-09-27","514.5"],["2021-10-18","761.0"],["2021-10-25","658.6315789473684"],["2021-11-01","500.28205128205127"],["2021-11-08","432.64516129032256"],["2021-11-15","388.030303030303"],["2021-11-22","340.5806451612903"],["2021-11-29","249.1153846153846"],["2021-12-06","264.0344827586207"],["2021-12-13","161.29032258064515"],["2021-12-20","94.43478260869566"],["2021-12-27","46.333333333333336"]],"limit":2000,"more":false},"current":{"columns":[{"name":"first_order_week","type":"date"},{"name":"avg_lifetime_value","type":"number"}],"data":[["2019-12-30","3799.299319727891"],["2020-01-06","2517.076923076923"],["2020-01-13","1567.75"],["2020-02-24","3692.9"],["2020-03-02","3434.0714285714284"],["2020-03-09","3071.0714285714284"],["2020-03-16","3663.3333333333335"],["2020-03-23","3128.5"],["2020-03-30","3700.181818181818"],["2020-04-06","3108.909090909091"],["2020-04-13","3752.1111111111113"],["2020-04-20","3126.0833333333335"],["2020-04-27","3248.6666666666665"],["2020-05-04","3566.3"],["2020-05-11","3927.0"],["2020-05-18","2594.0"],["2020-05-25","2709.25"],["2020-06-01","2844.8571428571427"],["2020-06-08","2771.6666666666665"],["2020-06-15","2529.1428571428573"],["2020-06-22","3442.0"],["2020-06-29","3942.3333333333335"],["2020-07-06","2298.098039215686"],["2020-07-13","3501.346405228758"],["2020-07-20","2083.625"],["2020-07-27","1335.0"],["2020-08-03","2114.3333333333335"],["2020-08-10","3983.25"],["2020-08-17","3697.0"],["2020-08-24","2398.75"],["2020-08-31","2846.2"],["2020-09-07","2778.714285714286"],["2020-09-14","2341.6"],["2020-09-21","2499.4380952380952"],["2020-09-28","2802.0476190476193"],["2020-10-05","2289.5"],["2020-10-12","2581.681818181818"],["2020-10-19","2544.5238095238096"],["2020-10-26","2390.75"],["2020-11-02","2449.1"],["2020-11-09","2166.315789473684"],["2020-11-16","2365.4375"],["2020-11-23","2211.0"],["2020-11-30","2127.1666666666665"],["2020-12-07","1912.5"],["2020-12-14","2525.0833333333335"],["2020-12-21","2381.769230769231"],["2020-12-28","1965.0"],["2021-01-04","1697.9166666666667"],["2021-01-11","1901.25"],["2021-01-18","2298.1"],["2021-01-25","2051.4285714285716"],["2021-02-01","1767.7142857142858"],["2021-02-08","1667.090909090909"],["2021-02-15","1480.6666666666667"],["2021-02-22","1827.75"],["2021-03-01","843.1666666666666"],["2021-03-08","1473.142857142857"],["2021-03-15","1721.3333333333333"],["2021-03-22","1297.25"],["2021-03-29","1404.3333333333333"],["2021-04-05","920.5714285714286"],["2021-04-12","1252.142857142857"],["2021-04-19","1095.1666666666667"],["2021-04-26","1260.2"],["2021-05-03","1638.0"],["2021-05-10","1629.0"],["2021-05-17","1037.1666666666667"],["2021-05-24","1070.857142857143"],["2021-05-31","1112.3333333333333"],["2021-06-07","1459.0"],["2021-06-14","809.0"],["2021-06-21","1031.25"],["2021-06-28","896.0"],["2021-07-05","1725.5"],["2021-07-12","1114.0"],["2021-08-23","531.0425531914893"],["2021-08-30","815.4957264957264"],["2021-09-06","620.6176470588235"],["2021-09-13","296.7857142857143"],["2021-09-20","622.1346153846154"],["2021-09-27","368.5"],["2021-10-18","502.875"],["2021-10-25","442.05263157894734"],["2021-11-01","351.1025641025641"],["2021-11-08","296.61290322580646"],["2021-11-15","267.93939393939394"],["2021-11-22","237.48387096774192"],["2021-11-29","167.8846153846154"],["2021-12-06","181.0"],["2021-12-13","107.90322580645162"],["2021-12-20","62.54545454545455"],["2021-12-27","46.0"]],"limit":2000,"more":false}},"status":"finished","run_id":"c12e0fd1-cc75-46af-a653-88dce0ccf2d3","run_at":"2024-11-06T01:10:03Z"},{"type":"row_count_diff","name":"Row count diff of customers","params":{"node_names":["customers"]},"result":{"customers":{"base":1856,"curr":1856}},"status":"finished","run_id":"ba2de464-f39c-4b9f-b69c-4766fe37665e","run_at":"2024-11-06T15:24:18Z"},{"type":"query_diff","name":"Query diff of mymodel","params":{"sql_template":"select * from {{ ref(\"mymodel\") }}"},"error":"Compilation Error\n  Sql_Operation 'sql_operation.jaffle_shop.generated_a1b6fb8d92f249bfbc8a86e08ed11d9e' (from remote system.sql) depends on a node named 'mymodel' which was not found","status":"failed","run_id":"fe666ee0-2174-4947-922f-aa60299546ff","run_at":"2024-11-06T15:24:48Z"},{"type":"histogram_diff","name":"Histogram diff of customers.customer_lifetime_value ","params":{"model":"customers","column_name":"customer_lifetime_value","column_type":"BIGINT"},"result":{"base":{"counts":[115,127,113,119,128,86,55,73,65,34,29,28,26,40,46,48,53,56,64,42,45,55,37,38,28,37,21,20,18,17,17,15,9,13,24,26,18,6,6,4,8,5,6,7,7,3,6,3,4,6],"total":1856},"current":{"counts":[181,162,175,156,92,96,57,42,52,53,82,76,80,70,82,46,49,40,31,25,29,26,21,28,23,13,12,11,4,11,6,7,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"total":1851},"min":5,"max":10092,"bin_edges":[5,207,409,611,813,1015,1217,1419,1621,1823,2025,2227,2429,2631,2833,3035,3237,3439,3641,3843,4045,4247,4449,4651,4853,5055,5257,5459,5661,5863,6065,6267,6469,6671,6873,7075,7277,7479,7681,7883,8085,8287,8489,8691,8893,9095,9297,9499,9701,9903,10105],"labels":["5-207","207-409","409-611","611-813","813-1015","1015-1217","1217-1419","1419-1621","1621-1823","1823-2025","2025-2227","2227-2429","2429-2631","2631-2833","2833-3035","3035-3237","3237-3439","3439-3641","3641-3843","3843-4045","4045-4247","4247-4449","4449-4651","4651-4853","4853-5055","5055-5257","5257-5459","5459-5661","5661-5863","5863-6065","6065-6267","6267-6469","6469-6671","6671-6873","6873-7075","7075-7277","7277-7479","7479-7681","7681-7883","7883-8085","8085-8287","8287-8489","8489-8691","8691-8893","8893-9095","9095-9297","9297-9499","9499-9701","9701-9903","9903-10105","10105-10307"]},"status":"finished","run_id":"31e79695-a5fa-4836-9387-40dca98708e7","run_at":"2024-11-06T15:25:01Z"},{"type":"profile_diff","name":"Profile diff of customers","params":{"model":"customers"},"check_id":"400cff4f-ceea-4ea7-83fa-05912a3e08ba","result":{"base":{"columns":[{"name":"column_name","type":"text"},{"name":"data_type","type":"text"},{"name":"row_count","type":"number"},{"name":"not_null_proportion","type":"number"},{"name":"distinct_proportion","type":"number"},{"name":"distinct_count","type":"integer"},{"name":"is_unique","type":"boolean"},{"name":"min","type":"text"},{"name":"max","type":"text"},{"name":"avg","type":"number"},{"name":"median","type":"number"}],"data":[["customer_id","bigint","1856.000000","1.0","1.0",1856,true,"3","4599","2018.8997844827586","1851.5"],["first_name","character varying(256)","1856.000000","1.0","0.23976293103448276",445,false,null,null,null,null],["last_name","character varying(256)","1856.000000","1.0","0.36314655172413796",674,false,null,null,null,null],["first_order","date","1856.000000","1.0","0.25377155172413796",471,false,"2020-01-01","2021-12-30",null,null],["most_recent_order","date","1856.000000","1.0","0.011853448275862068",22,false,"2021-07-03","2021-12-30",null,null],["number_of_orders","bigint","1856.000000","1.0","0.23329741379310345",433,false,"1","537","151.3168103448276","118.0"],["customer_lifetime_value","bigint","1856.000000","1.0","0.8566810344827587",1590,false,"5","10092","2758.6007543103447","2126.5"]]},"current":{"columns":[{"name":"column_name","type":"text"},{"name":"data_type","type":"text"},{"name":"row_count","type":"number"},{"name":"not_null_proportion","type":"number"},{"name":"distinct_proportion","type":"number"},{"name":"distinct_count","type":"integer"},{"name":"is_unique","type":"boolean"},{"name":"min","type":"text"},{"name":"max","type":"text"},{"name":"avg","type":"number"},{"name":"median","type":"number"}],"data":[["customer_id","bigint","1856.000000","1.0","1.0",1856,true,"3","4599","2018.8997844827586","1851.5"],["first_name","character varying(256)","1856.000000","1.0","0.23976293103448276",445,false,null,null,null,null],["last_name","character varying(256)","1856.000000","1.0","0.36314655172413796",674,false,null,null,null,null],["first_order","date","1856.000000","1.0","0.25377155172413796",471,false,"2020-01-01","2021-12-30",null,null],["most_recent_order","date","1856.000000","1.0","0.011853448275862068",22,false,"2021-07-03","2021-12-30",null,null],["number_of_orders","bigint","1856.000000","1.0","0.23329741379310345",433,false,"1","537","151.3168103448276","118.0"],["customer_lifetime_value","bigint","1856.000000","0.9973060344827587","0.8049568965517241",1494,false,"5","6852","1871.7682333873581","1451.0"]]}},"status":"finished","run_id":"e8626821-a204-49ab-a796-3488b8df307c","run_at":"2024-11-06T15:25:06Z"},{"type":"row_count_diff","name":"Row count diff of customers","params":{"node_names":["customers"]},"check_id":"522920ce-1897-440c-84f0-fdcfd00a3b53","result":{"customers":{"base":1856,"curr":1856}},"status":"finished","run_id":"d257526e-87d0-4096-9868-5a55ed1eb932","run_at":"2024-11-07T01:54:55Z"},{"type":"row_count_diff","name":"Row count diff of customers","params":{"node_names":["customers"]},"result":{"customers":{"base":1856,"curr":1856}},"status":"finished","run_id":"2eab60f8-dbd4-42e0-8f90-1589f7f6a336","run_at":"2024-11-11T09:16:10Z"},{"type":"value_diff","name":"Value diff of customers","params":{"model":"customers","primary_key":"customer_id"},"result":{"summary":{"total":1856,"added":0,"removed":0},"data":{"columns":[{"name":"column","type":"text"},{"name":"matched","type":"number"},{"name":"matched_p","type":"number"}],"data":[["customer_id","1856","1.0"],["first_name","1856","1.0"],["last_name","1856","1.0"],["first_order","1856","1.0"],["most_recent_order","1856","1.0"],["number_of_orders","1856","1.0"],["customer_lifetime_value","22","0.011853448275862068"]]}},"status":"finished","run_id":"c985f91a-7b54-4a88-955b-ed36100fc2ef","run_at":"2024-11-11T09:16:22Z"},{"type":"value_diff_detail","name":"Value diff detail of customers","params":{"model":"customers","primary_key":"customer_lifetime_value"},"error":"Invalid primary key: customer_lifetime_value. The column should be unique. Please check by this sql: '\n\nselect\n    customer_lifetime_value as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"prod\".\"customers\"\nwhere customer_lifetime_value is not null\ngroup by customer_lifetime_value\nhaving count(*) > 1\n\n'","status":"failed","run_id":"0b84f040-951b-4803-a7c6-7eebbf728eb7","run_at":"2024-11-11T09:16:49Z"},{"type":"value_diff_detail","name":"Value diff detail of customers","params":{"model":"customers","primary_key":"customer_id"},"result":{"columns":[{"name":"customer_id","type":"integer"},{"name":"first_name","type":"text"},{"name":"last_name","type":"text"},{"name":"first_order","type":"date"},{"name":"most_recent_order","type":"date"},{"name":"number_of_orders","type":"integer"},{"name":"customer_lifetime_value","type":"integer"},{"name":"in_a","type":"boolean"},{"name":"in_b","type":"boolean"}],"data":[[3,"Lisa","Sanders","2020-01-01","2021-12-30",502,9133,true,false],[3,"Lisa","Sanders","2020-01-01","2021-12-30",502,6002,false,true],[5,"Randy","Bell","2020-01-01","2021-12-30",513,9404,true,false],[5,"Randy","Bell","2020-01-01","2021-12-30",513,6382,false,true],[7,"Jared","Greene","2020-10-12","2021-12-30",323,6190,true,false],[7,"Jared","Greene","2020-10-12","2021-12-30",323,4426,false,true],[8,"Andrew","Carr","2020-03-20","2021-12-30",471,8258,true,false],[8,"Andrew","Carr","2020-03-20","2021-12-30",471,5832,false,true],[9,"Anthony","Oliver","2020-04-23","2021-12-30",439,8260,true,false],[9,"Anthony","Oliver","2020-04-23","2021-12-30",439,5443,false,true],[10,"Jodi","Edwards","2020-08-03","2021-12-30",336,6158,true,false],[10,"Jodi","Edwards","2020-08-03","2021-12-30",336,4185,false,true],[11,"Erin","Garza","2020-12-28","2021-12-30",269,4957,true,false],[11,"Erin","Garza","2020-12-28","2021-12-30",269,3413,false,true],[12,"Cynthia","Davis","2020-04-13","2021-12-30",457,8012,true,false],[12,"Cynthia","Davis","2020-04-13","2021-12-30",457,5672,false,true],[13,"Lawrence","Caldwell","2020-04-09","2021-12-30",414,7608,true,false],[13,"Lawrence","Caldwell","2020-04-09","2021-12-30",414,5114,false,true],[14,"Bradley","Smith","2020-06-08","2021-12-30",361,6899,true,false],[14,"Bradley","Smith","2020-06-08","2021-12-30",361,4513,false,true],[15,"Deborah","Grant","2020-05-11","2021-12-30",425,7747,true,false],[15,"Deborah","Grant","2020-05-11","2021-12-30",425,5386,false,true],[16,"Andrew","Meyer","2020-01-01","2021-12-30",517,9435,true,false],[16,"Andrew","Meyer","2020-01-01","2021-12-30",517,6537,false,true],[17,"Sean","Sanders","2020-06-01","2021-12-30",403,7319,true,false],[17,"Sean","Sanders","2020-06-01","2021-12-30",403,4813,false,true],[21,"Joseph","Jennings","2020-03-16","2021-12-30",472,8809,true,false],[21,"Joseph","Jennings","2020-03-16","2021-12-30",472,5652,false,true],[24,"Vincent","Anderson","2020-10-01","2021-12-30",328,5623,true,false],[24,"Vincent","Anderson","2020-10-01","2021-12-30",328,3614,false,true],[25,"Jessica","Blankenship","2020-04-03","2021-12-30",456,8616,true,false],[25,"Jessica","Blankenship","2020-04-03","2021-12-30",456,5749,false,true],[26,"Amy","Summers","2020-05-04","2021-12-30",391,7347,true,false],[26,"Amy","Summers","2020-05-04","2021-12-30",391,5151,false,true],[27,"Samuel","Meyer","2020-11-23","2021-12-30",282,5170,true,false],[27,"Samuel","Meyer","2020-11-23","2021-12-30",282,3486,false,true],[29,"Dennis","Payne","2020-11-16","2021-12-30",291,5689,true,false],[29,"Dennis","Payne","2020-11-16","2021-12-30",291,3327,false,true],[30,"Savannah","Blackburn","2020-03-15","2021-12-30",454,7800,true,false],[30,"Savannah","Blackburn","2020-03-15","2021-12-30",454,5196,false,true],[32,"Mary","Mahoney","2020-11-27","2021-12-30",294,5176,true,false],[32,"Mary","Mahoney","2020-11-27","2021-12-30",294,3832,false,true],[33,"Tracy","Griffin","2020-01-01","2021-12-30",536,10092,true,false],[33,"Tracy","Griffin","2020-01-01","2021-12-30",536,6530,false,true],[34,"Ashley","Watkins","2020-01-01","2021-12-30",531,9705,true,false],[34,"Ashley","Watkins","2020-01-01","2021-12-30",531,6452,false,true],[42,"James","Payne","2020-02-25","2021-12-30",493,9047,true,false],[42,"James","Payne","2020-02-25","2021-12-30",493,6334,false,true],[46,"Denise","Ortega","2020-12-18","2021-12-30",273,4952,true,false],[46,"Denise","Ortega","2020-12-18","2021-12-30",273,3566,false,true],[48,"Lisa","Allen","2020-04-26","2021-12-30",448,8136,true,false],[48,"Lisa","Allen","2020-04-26","2021-12-30",448,5124,false,true],[50,"Catherine","Clark","2020-07-01","2021-12-30",363,7106,true,false],[50,"Catherine","Clark","2020-07-01","2021-12-30",363,4742,false,true],[54,"Raymond","Wolf","2020-03-04","2021-12-30",467,8115,true,false],[54,"Raymond","Wolf","2020-03-04","2021-12-30",467,5681,false,true],[56,"Ashley","Holt","2020-01-01","2021-12-30",511,9838,true,false],[56,"Ashley","Holt","2020-01-01","2021-12-30",511,6688,false,true],[59,"Johnny","Williams","2020-07-23","2021-12-29",344,6227,true,false],[59,"Johnny","Williams","2020-07-23","2021-12-29",344,4083,false,true],[60,"Rick","Carlson","2020-01-01","2021-12-30",527,9144,true,false],[60,"Rick","Carlson","2020-01-01","2021-12-30",527,6367,false,true],[62,"Timothy","Hughes","2020-05-07","2021-12-30",421,7783,true,false],[62,"Timothy","Hughes","2020-05-07","2021-12-30",421,5536,false,true],[63,"Emma","Sanchez","2020-01-01","2021-12-30",529,9319,true,false],[63,"Emma","Sanchez","2020-01-01","2021-12-30",529,6170,false,true],[65,"Samantha","Berry","2020-01-01","2021-12-30",500,9250,true,false],[65,"Samantha","Berry","2020-01-01","2021-12-30",500,6227,false,true],[71,"Joseph","Smith","2020-12-03","2021-12-30",286,5448,true,false],[71,"Joseph","Smith","2020-12-03","2021-12-30",286,3583,false,true],[74,"Steven","Taylor","2020-01-01","2021-12-30",520,9719,true,false],[74,"Steven","Taylor","2020-01-01","2021-12-30",520,6677,false,true],[75,"Jennifer","Snyder","2020-12-21","2021-12-30",276,4996,true,false],[75,"Jennifer","Snyder","2020-12-21","2021-12-30",276,3710,false,true],[78,"Mary","Hernandez","2020-04-27","2021-12-30",444,8400,true,false],[78,"Mary","Hernandez","2020-04-27","2021-12-30",444,5497,false,true],[79,"Kevin","Roth","2020-03-16","2021-12-30",436,8125,true,false],[79,"Kevin","Roth","2020-03-16","2021-12-30",436,5497,false,true],[83,"Valerie","Davis","2020-06-25","2021-12-30",374,6539,true,false],[83,"Valerie","Davis","2020-06-25","2021-12-30",374,4395,false,true],[84,"Jerry","Meyer","2020-10-07","2021-12-30",304,5235,true,false],[84,"Jerry","Meyer","2020-10-07","2021-12-30",304,3777,false,true],[86,"Cody","Hill","2020-08-31","2021-12-30",340,6282,true,false],[86,"Cody","Hill","2020-08-31","2021-12-30",340,4298,false,true],[88,"Theresa","Greene","2020-09-28","2021-12-30",327,6065,true,false],[88,"Theresa","Greene","2020-09-28","2021-12-30",327,4393,false,true],[92,"Kenneth","Ortiz","2020-01-01","2021-12-30",529,9447,true,false],[92,"Kenneth","Ortiz","2020-01-01","2021-12-30",529,6378,false,true],[95,"Timothy","Gilbert","2020-01-01","2021-12-30",504,9557,true,false],[95,"Timothy","Gilbert","2020-01-01","2021-12-30",504,6257,false,true],[96,"Cynthia","Barton","2020-06-24","2021-12-30",362,6509,true,false],[96,"Cynthia","Barton","2020-06-24","2021-12-30",362,4456,false,true],[103,"Robert","Smith","2020-01-01","2021-12-30",507,9064,true,false],[103,"Robert","Smith","2020-01-01","2021-12-30",507,5887,false,true],[104,"James","Hernandez","2020-11-05","2021-12-30",305,5727,true,false],[104,"James","Hernandez","2020-11-05","2021-12-30",305,3814,false,true],[105,"Emma","Goodwin","2020-05-18","2021-12-30",418,7738,true,false],[105,"Emma","Goodwin","2020-05-18","2021-12-30",418,5334,false,true],[109,"Joseph","Hernandez","2020-05-29","2021-12-30",420,7545,true,false],[109,"Joseph","Hernandez","2020-05-29","2021-12-30",420,5111,false,true],[111,"Sheryl","Solomon","2020-01-01","2021-12-30",499,8785,true,false],[111,"Sheryl","Solomon","2020-01-01","2021-12-30",499,6013,false,true],[113,"Christian","Matthews","2020-01-01","2021-12-30",470,8519,true,false],[113,"Christian","Matthews","2020-01-01","2021-12-30",470,5614,false,true],[114,"Melinda","Solomon","2020-04-04","2021-12-30",458,8163,true,false],[114,"Melinda","Solomon","2020-04-04","2021-12-30",458,5263,false,true],[115,"Timothy","Morgan","2020-01-01","2021-12-30",530,9851,true,false],[115,"Timothy","Morgan","2020-01-01","2021-12-30",530,6832,false,true],[118,"Rita","Welch","2020-01-01","2021-12-30",526,9389,true,false],[118,"Rita","Welch","2020-01-01","2021-12-30",526,6619,false,true],[119,"Allison","Taylor","2020-03-30","2021-12-30",468,8572,true,false],[119,"Allison","Taylor","2020-03-30","2021-12-30",468,5988,false,true],[120,"Bryan","Long","2020-01-01","2021-12-30",498,9065,true,false],[120,"Bryan","Long","2020-01-01","2021-12-30",498,5934,false,true],[121,"Robert","Moore","2020-05-11","2021-12-30",426,7788,true,false],[121,"Robert","Moore","2020-05-11","2021-12-30",426,5037,false,true],[125,"Kimberly","Cannon","2020-06-23","2021-12-30",396,7167,true,false],[125,"Kimberly","Cannon","2020-06-23","2021-12-30",396,4797,false,true],[128,"Beth","Tanner","2020-03-19","2021-12-30",452,8508,true,false],[128,"Beth","Tanner","2020-03-19","2021-12-30",452,5603,false,true],[129,"Miranda","Taylor","2020-01-01","2021-12-30",524,9957,true,false],[129,"Miranda","Taylor","2020-01-01","2021-12-30",524,6818,false,true],[132,"Wendy","Mcclain","2020-04-07","2021-12-30",434,7891,true,false],[132,"Wendy","Mcclain","2020-04-07","2021-12-30",434,5644,false,true],[135,"Christina","Padilla","2020-01-01","2021-12-30",515,9053,true,false],[135,"Christina","Padilla","2020-01-01","2021-12-30",515,6091,false,true],[137,"Seth","Flores","2020-04-02","2021-12-30",417,7714,true,false],[137,"Seth","Flores","2020-04-02","2021-12-30",417,5089,false,true],[139,"Carl","Randall","2020-08-24","2021-12-30",352,6272,true,false],[139,"Carl","Randall","2020-08-24","2021-12-30",352,4121,false,true],[140,"Danielle","Adams","2020-01-01","2021-12-30",533,9907,true,false],[140,"Danielle","Adams","2020-01-01","2021-12-30",533,6805,false,true],[141,"Matthew","Collins","2020-06-12","2021-12-30",400,7272,true,false],[141,"Matthew","Collins","2020-06-12","2021-12-30",400,4779,false,true],[142,"Joshua","Thomas","2020-04-15","2021-12-30",439,8144,true,false],[142,"Joshua","Thomas","2020-04-15","2021-12-30",439,5315,false,true],[146,"Francisco","Howell","2020-06-02","2021-12-30",382,6704,true,false],[146,"Francisco","Howell","2020-06-02","2021-12-30",382,4659,false,true],[147,"Seth","Lambert","2020-03-25","2021-12-30",410,7177,true,false],[147,"Seth","Lambert","2020-03-25","2021-12-30",410,4938,false,true],[148,"Patrick","Robles","2020-08-11","2021-12-30",331,5900,true,false],[148,"Patrick","Robles","2020-08-11","2021-12-30",331,3848,false,true],[150,"Gregory","Weber","2020-01-01","2021-12-30",537,9691,true,false],[150,"Gregory","Weber","2020-01-01","2021-12-30",537,6543,false,true],[153,"Jennifer","Page","2020-02-26","2021-12-30",452,8097,true,false],[153,"Jennifer","Page","2020-02-26","2021-12-30",452,5451,false,true],[155,"Joseph","Dawson","2020-01-01","2021-12-30",489,8612,true,false],[155,"Joseph","Dawson","2020-01-01","2021-12-30",489,5441,false,true],[156,"Crystal","Morris","2020-03-02","2021-12-30",485,8367,true,false],[156,"Crystal","Morris","2020-03-02","2021-12-30",485,5945,false,true],[158,"Lisa","Nunez","2020-08-17","2021-12-30",363,6403,true,false],[158,"Lisa","Nunez","2020-08-17","2021-12-30",363,4086,false,true],[161,"Sharon","Perry","2020-09-21","2021-12-30",336,5890,true,false],[161,"Sharon","Perry","2020-09-21","2021-12-30",336,4096,false,true],[167,"Joshua","Ryan","2020-01-01","2021-12-30",477,8061,true,false],[167,"Joshua","Ryan","2020-01-01","2021-12-30",477,5568,false,true],[168,"David","Parker","2020-01-01","2021-12-30",525,9945,true,false],[168,"David","Parker","2020-01-01","2021-12-30",525,6607,false,true],[172,"Gregory","Roberts","2020-01-01","2021-12-30",507,8830,true,false],[172,"Gregory","Roberts","2020-01-01","2021-12-30",507,5561,false,true],[173,"Jacob","Tate","2020-03-18","2021-12-30",472,8776,true,false],[173,"Jacob","Tate","2020-03-18","2021-12-30",472,5953,false,true],[174,"Ethan","Hill","2020-04-21","2021-12-30",412,7351,true,false],[174,"Ethan","Hill","2020-04-21","2021-12-30",412,5005,false,true],[175,"Ashley","Mcintyre","2020-11-09","2021-12-30",301,5677,true,false],[175,"Ashley","Mcintyre","2020-11-09","2021-12-30",301,3788,false,true],[176,"Kenneth","Roman","2020-01-01","2021-12-30",521,9583,true,false],[176,"Kenneth","Roman","2020-01-01","2021-12-30",521,6809,false,true],[178,"Jennifer","Tucker","2020-01-01","2021-12-30",527,9922,true,false],[178,"Jennifer","Tucker","2020-01-01","2021-12-30",527,6328,false,true],[179,"Janice","Rodriguez","2020-08-10","2021-12-30",367,7084,true,false],[179,"Janice","Rodriguez","2020-08-10","2021-12-30",367,5019,false,true],[181,"Troy","Anderson","2020-01-01","2021-12-30",494,8839,true,false],[181,"Troy","Anderson","2020-01-01","2021-12-30",494,6123,false,true],[183,"Kimberly","White","2020-01-01","2021-12-30",471,8711,true,false],[183,"Kimberly","White","2020-01-01","2021-12-30",471,5936,false,true],[187,"Regina","Ferguson","2020-08-12","2021-12-30",361,6375,true,false],[187,"Regina","Ferguson","2020-08-12","2021-12-30",361,4135,false,true],[188,"Timothy","Patterson","2020-09-09","2021-12-30",349,6332,true,false],[188,"Timothy","Patterson","2020-09-09","2021-12-30",349,3917,false,true],[189,"Jessica","Lopez","2020-01-01","2021-12-30",487,8847,true,false],[189,"Jessica","Lopez","2020-01-01","2021-12-30",487,5933,false,true],[192,"Kimberly","Shaw","2020-11-03","2021-12-30",305,5196,true,false],[192,"Kimberly","Shaw","2020-11-03","2021-12-30",305,3644,false,true],[193,"Dawn","Rhodes","2020-12-25","2021-12-30",268,4775,true,false],[193,"Dawn","Rhodes","2020-12-25","2021-12-30",268,3411,false,true],[194,"Cheyenne","Lopez","2020-01-01","2021-12-30",532,9970,true,false],[194,"Cheyenne","Lopez","2020-01-01","2021-12-30",532,6852,false,true],[196,"Taylor","Kirby","2020-10-26","2021-12-30",313,5660,true,false],[196,"Taylor","Kirby","2020-10-26","2021-12-30",313,3870,false,true],[198,"Bradley","Ellis","2020-01-01","2021-12-30",497,9034,true,false],[198,"Bradley","Ellis","2020-01-01","2021-12-30",497,6074,false,true],[199,"Megan","Smith","2020-03-23","2021-12-30",465,8387,true,false],[199,"Megan","Smith","2020-03-23","2021-12-30",465,5452,false,true],[200,"Pamela","Mercado","2020-08-20","2021-12-30",363,6426,true,false],[200,"Pamela","Mercado","2020-08-20","2021-12-30",363,4722,false,true],[204,"Veronica","Montgomery","2020-01-01","2021-12-30",501,9066,true,false],[204,"Veronica","Montgomery","2020-01-01","2021-12-30",501,5962,false,true],[205,"Timothy","Hammond","2020-07-06","2021-12-30",380,7110,true,false],[205,"Timothy","Hammond","2020-07-06","2021-12-30",380,4711,false,true],[206,"Michael","Grimes","2020-01-01","2021-12-30",508,9088,true,false],[206,"Michael","Grimes","2020-01-01","2021-12-30",508,6460,false,true],[207,"Julia","Miller","2020-06-29","2021-12-30",388,7105,true,false],[207,"Julia","Miller","2020-06-29","2021-12-30",388,4686,false,true],[209,"Scott","Campbell","2020-04-17","2021-12-30",454,8654,true,false],[209,"Scott","Campbell","2020-04-17","2021-12-30",454,6056,false,true],[210,"Erika","Fuentes","2020-05-04","2021-12-30",437,8316,true,false],[210,"Erika","Fuentes","2020-05-04","2021-12-30",437,5289,false,true],[211,"Crystal","Knapp","2020-05-11","2021-12-30",403,7293,true,false],[211,"Crystal","Knapp","2020-05-11","2021-12-30",403,4760,false,true],[220,"Deborah","Cherry","2020-03-18","2021-12-30",460,8289,true,false],[220,"Deborah","Cherry","2020-03-18","2021-12-30",460,5524,false,true],[221,"Robert","Aguilar","2020-05-05","2021-12-30",398,7902,true,false],[221,"Robert","Aguilar","2020-05-05","2021-12-30",398,5454,false,true],[222,"Ann","Morales","2020-03-02","2021-12-30",490,9364,true,false],[222,"Ann","Morales","2020-03-02","2021-12-30",490,6620,false,true],[224,"Kelsey","Phillips","2020-09-17","2021-12-30",336,5680,true,false],[224,"Kelsey","Phillips","2020-09-17","2021-12-30",336,3789,false,true],[226,"Patrick","Griffin","2020-07-23","2021-12-30",195,3445,true,false],[226,"Patrick","Griffin","2020-07-23","2021-12-30",195,2325,false,true],[231,"Corey","Harrison","2020-05-06","2021-12-30",314,6032,true,false],[231,"Corey","Harrison","2020-05-06","2021-12-30",314,4058,false,true],[232,"Eric","Graham","2020-01-02","2021-12-30",340,6341,true,false],[232,"Eric","Graham","2020-01-02","2021-12-30",340,4289,false,true],[233,"Jacqueline","Glenn","2020-03-06","2021-12-30",354,6352,true,false],[233,"Jacqueline","Glenn","2020-03-06","2021-12-30",354,4223,false,true],[236,"Lindsay","Warner","2020-06-15","2021-12-30",307,5411,true,false],[236,"Lindsay","Warner","2020-06-15","2021-12-30",307,3741,false,true],[237,"Sharon","Shaw","2020-07-27","2021-12-30",262,4766,true,false],[237,"Sharon","Shaw","2020-07-27","2021-12-30",262,2856,false,true],[239,"Aaron","Massey","2020-01-01","2021-12-29",180,3096,true,false],[239,"Aaron","Massey","2020-01-01","2021-12-29",180,1954,false,true],[240,"David","Perez","2020-01-14","2021-12-03",106,1769,true,false],[240,"David","Perez","2020-01-14","2021-12-03",106,1208,false,true],[241,"Jackson","Gonzalez","2020-01-01","2021-12-30",352,6874,true,false],[241,"Jackson","Gonzalez","2020-01-01","2021-12-30",352,4551,false,true],[242,"Daniel","Krause","2020-01-17","2021-12-20",60,1102,true,false],[242,"Daniel","Krause","2020-01-17","2021-12-20",60,808,false,true],[244,"Daniel","Mcdaniel","2020-03-02","2021-12-29",290,5120,true,false],[244,"Daniel","Mcdaniel","2020-03-02","2021-12-29",290,3675,false,true],[245,"Angela","Smith","2020-01-01","2021-12-30",284,5143,true,false],[245,"Angela","Smith","2020-01-01","2021-12-30",284,3250,false,true],[248,"Christine","Baxter","2020-07-08","2021-12-30",272,4621,true,false],[248,"Christine","Baxter","2020-07-08","2021-12-30",272,2962,false,true],[249,"Vanessa","Gross","2020-07-17","2021-12-29",115,2014,true,false],[249,"Vanessa","Gross","2020-07-17","2021-12-29",115,1438,false,true],[251,"Greg","Tanner","2020-10-05","2021-12-30",213,3963,true,false],[251,"Greg","Tanner","2020-10-05","2021-12-30",213,2522,false,true],[252,"Vanessa","Grimes","2020-05-21","2021-12-30",307,5429,true,false],[252,"Vanessa","Grimes","2020-05-21","2021-12-30",307,3983,false,true],[253,"Todd","Thompson","2020-05-18","2021-12-30",321,5732,true,false],[253,"Todd","Thompson","2020-05-18","2021-12-30",321,3895,false,true],[256,"Brittany","Hicks","2020-03-17","2021-12-28",167,3025,true,false],[256,"Brittany","Hicks","2020-03-17","2021-12-28",167,2022,false,true],[260,"Jessica","Hoffman","2020-05-01","2021-12-30",257,4456,true,false],[260,"Jessica","Hoffman","2020-05-01","2021-12-30",257,2930,false,true],[265,"Sabrina","West","2020-09-11","2021-12-30",99,1669,true,false],[265,"Sabrina","West","2020-09-11","2021-12-30",99,1062,false,true],[271,"Martha","Collins","2020-11-19","2021-12-30",189,3349,true,false],[271,"Martha","Collins","2020-11-19","2021-12-30",189,2256,false,true],[275,"Jessica","Aguilar","2020-12-07","2021-12-27",118,2108,true,false],[275,"Jessica","Aguilar","2020-12-07","2021-12-27",118,1444,false,true],[278,"Jacob","Castaneda","2020-09-07","2021-12-30",278,4973,true,false],[278,"Jacob","Castaneda","2020-09-07","2021-12-30",278,3444,false,true],[280,"Aaron","Gardner","2020-01-01","2021-12-30",309,5661,true,false],[280,"Aaron","Gardner","2020-01-01","2021-12-30",309,3786,false,true],[281,"Timothy","Fernandez","2020-04-06","2021-12-30",279,5093,true,false],[281,"Timothy","Fernandez","2020-04-06","2021-12-30",279,3287,false,true],[282,"Andrew","Huerta","2020-01-01","2021-12-24",158,2835,true,false],[282,"Andrew","Huerta","2020-01-01","2021-12-24",158,1998,false,true],[284,"Kevin","Moore","2020-01-01","2021-12-30",388,6972,true,false],[284,"Kevin","Moore","2020-01-01","2021-12-30",388,4596,false,true],[290,"Richard","Foster","2020-01-02","2021-12-30",278,5225,true,false],[290,"Richard","Foster","2020-01-02","2021-12-30",278,3408,false,true],[291,"Edward","Garcia","2020-04-23","2021-12-29",140,2256,true,false],[291,"Edward","Garcia","2020-04-23","2021-12-29",140,1496,false,true],[294,"David","Ward","2020-03-27","2021-12-30",348,6199,true,false],[294,"David","Ward","2020-03-27","2021-12-30",348,4293,false,true],[295,"Michele","Smith","2020-01-03","2021-12-28",168,2950,true,false],[295,"Michele","Smith","2020-01-03","2021-12-28",168,2099,false,true],[300,"Chase","James","2020-06-16","2021-12-22",69,1603,true,false],[300,"Chase","James","2020-06-16","2021-12-22",69,1051,false,true],[301,"Brooke","Parker","2020-01-01","2021-12-30",294,5163,true,false],[301,"Brooke","Parker","2020-01-01","2021-12-30",294,3351,false,true],[302,"Brianna","Clayton","2020-06-05","2021-12-29",160,3001,true,false],[302,"Brianna","Clayton","2020-06-05","2021-12-29",160,2051,false,true],[306,"Benjamin","Hill","2020-09-03","2021-12-30",204,3660,true,false],[306,"Benjamin","Hill","2020-09-03","2021-12-30",204,2665,false,true],[308,"Christopher","Harmon","2020-01-02","2021-12-29",372,6546,true,false],[308,"Christopher","Harmon","2020-01-02","2021-12-29",372,4466,false,true],[310,"Randall","Nelson","2020-01-01","2021-12-30",253,4546,true,false],[310,"Randall","Nelson","2020-01-01","2021-12-30",253,2981,false,true],[311,"Maria","Santos","2020-01-01","2021-12-30",402,7305,true,false],[311,"Maria","Santos","2020-01-01","2021-12-30",402,4822,false,true],[313,"Peter","Caldwell","2020-03-05","2021-12-29",240,4333,true,false],[313,"Peter","Caldwell","2020-03-05","2021-12-29",240,2960,false,true],[315,"Jennifer","Herring","2020-03-26","2021-12-30",251,4555,true,false],[315,"Jennifer","Herring","2020-03-26","2021-12-30",251,3185,false,true],[316,"Justin","Martin","2020-04-20","2021-12-30",243,4753,true,false],[316,"Justin","Martin","2020-04-20","2021-12-30",243,3114,false,true],[317,"Samuel","Decker","2020-04-10","2021-12-27",75,1292,true,false],[317,"Samuel","Decker","2020-04-10","2021-12-27",75,910,false,true],[318,"Lauren","Torres","2020-01-01","2021-12-29",202,3747,true,false],[318,"Lauren","Torres","2020-01-01","2021-12-29",202,2589,false,true],[323,"Kayla","Wilson","2020-04-09","2021-12-27",147,2705,true,false],[323,"Kayla","Wilson","2020-04-09","2021-12-27",147,1817,false,true],[324,"Roy","Gutierrez","2020-04-09","2021-12-30",158,3027,true,false],[324,"Roy","Gutierrez","2020-04-09","2021-12-30",158,1793,false,true],[325,"Jonathan","Mosley","2020-06-22","2021-12-30",164,2766,true,false],[325,"Jonathan","Mosley","2020-06-22","2021-12-30",164,1995,false,true],[330,"Paul","Murray","2020-04-06","2021-12-30",281,5319,true,false],[330,"Paul","Murray","2020-04-06","2021-12-30",281,3532,false,true],[333,"Susan","Ryan","2020-04-01","2021-12-27",96,1742,true,false],[333,"Susan","Ryan","2020-04-01","2021-12-27",96,1034,false,true],[334,"Jose","Nunez","2020-03-31","2021-12-30",322,6153,true,false],[334,"Jose","Nunez","2020-03-31","2021-12-30",322,4382,false,true],[337,"Lisa","Yoder","2020-03-02","2021-12-30",196,3627,true,false],[337,"Lisa","Yoder","2020-03-02","2021-12-30",196,2081,false,true],[339,"Ashley","Garza","2020-05-22","2021-12-29",281,5382,true,false],[339,"Ashley","Garza","2020-05-22","2021-12-29",281,3416,false,true],[341,"Craig","Simpson","2020-01-01","2021-12-30",383,6967,true,false],[341,"Craig","Simpson","2020-01-01","2021-12-30",383,4468,false,true],[343,"Matthew","Adkins","2020-01-01","2021-12-30",370,6446,true,false],[343,"Matthew","Adkins","2020-01-01","2021-12-30",370,4274,false,true],[348,"Julie","Manning","2020-04-13","2021-12-29",164,2976,true,false],[348,"Julie","Manning","2020-04-13","2021-12-29",164,1926,false,true],[352,"Joshua","Franklin","2020-07-16","2021-12-30",285,5395,true,false],[352,"Joshua","Franklin","2020-07-16","2021-12-30",285,3651,false,true],[353,"Lisa","Vargas","2020-03-06","2021-12-27",111,1819,true,false],[353,"Lisa","Vargas","2020-03-06","2021-12-27",111,1364,false,true],[355,"Michael","Castillo","2020-02-28","2021-12-30",351,7012,true,false],[355,"Michael","Castillo","2020-02-28","2021-12-30",351,4868,false,true],[358,"Thomas","Anthony","2020-05-08","2021-12-30",295,5486,true,false],[358,"Thomas","Anthony","2020-05-08","2021-12-30",295,3490,false,true],[359,"Jackie","Pitts","2020-05-13","2021-12-30",272,5012,true,false],[359,"Jackie","Pitts","2020-05-13","2021-12-30",272,3302,false,true],[360,"Barbara","Mcconnell","2020-01-01","2021-12-30",276,5209,true,false],[360,"Barbara","Mcconnell","2020-01-01","2021-12-30",276,3187,false,true],[362,"Chloe","Williams","2020-01-02","2021-12-30",349,6053,true,false],[362,"Chloe","Williams","2020-01-02","2021-12-30",349,4280,false,true],[364,"Mark","Lucas","2020-04-30","2021-12-30",184,3134,true,false],[364,"Mark","Lucas","2020-04-30","2021-12-30",184,2151,false,true],[368,"John","Pena","2020-06-02","2021-12-28",161,2753,true,false],[368,"John","Pena","2020-06-02","2021-12-28",161,1837,false,true],[369,"James","Terry","2020-06-16","2021-12-30",304,5595,true,false],[369,"James","Terry","2020-06-16","2021-12-30",304,3574,false,true],[370,"Amber","Newman","2020-09-16","2021-12-30",217,4053,true,false],[370,"Amber","Newman","2020-09-16","2021-12-30",217,2761,false,true],[371,"Daniel","Elliott","2020-05-07","2021-12-23",114,2007,true,false],[371,"Daniel","Elliott","2020-05-07","2021-12-23",114,1388,false,true],[374,"Rodney","Weaver","2020-03-24","2021-12-30",275,5008,true,false],[374,"Rodney","Weaver","2020-03-24","2021-12-30",275,3293,false,true],[375,"Kim","Dickerson","2020-03-18","2021-12-30",253,4290,true,false],[375,"Kim","Dickerson","2020-03-18","2021-12-30",253,2676,false,true],[376,"Alan","Bishop","2020-05-27","2021-12-30",254,4591,true,false],[376,"Alan","Bishop","2020-05-27","2021-12-30",254,3102,false,true],[377,"Gary","Griffin","2020-01-01","2021-12-29",359,6199,true,false],[377,"Gary","Griffin","2020-01-01","2021-12-29",359,4265,false,true],[379,"Katie","Gill","2020-01-01","2021-12-22",122,2252,true,false],[379,"Katie","Gill","2020-01-01","2021-12-22",122,1328,false,true],[380,"Belinda","Erickson","2020-01-07","2021-12-29",243,4335,true,false],[380,"Belinda","Erickson","2020-01-07","2021-12-29",243,3088,false,true],[384,"Shannon","Thompson","2020-09-29","2021-12-27",57,1202,true,false],[384,"Shannon","Thompson","2020-09-29","2021-12-27",57,941,false,true],[386,"Debra","Young","2020-04-14","2021-12-28",302,5531,true,false],[386,"Debra","Young","2020-04-14","2021-12-28",302,3934,false,true],[387,"Valerie","Martin","2020-01-02","2021-12-29",257,4817,true,false],[387,"Valerie","Martin","2020-01-02","2021-12-29",257,3581,false,true],[388,"Michael","Figueroa","2020-09-22","2021-12-30",231,4260,true,false],[388,"Michael","Figueroa","2020-09-22","2021-12-30",231,2905,false,true],[389,"Mary","Thompson","2020-04-10","2021-12-30",257,4719,true,false],[389,"Mary","Thompson","2020-04-10","2021-12-30",257,3017,false,true],[392,"John","Owens","2020-08-07","2021-12-30",103,1911,true,false],[392,"John","Owens","2020-08-07","2021-12-30",103,1357,false,true],[393,"Karen","Griffin","2020-03-11","2021-12-30",350,6624,true,false],[393,"Karen","Griffin","2020-03-11","2021-12-30",350,4203,false,true],[397,"David","Peters","2020-01-02","2021-12-28",306,5519,true,false],[397,"David","Peters","2020-01-02","2021-12-28",306,3849,false,true],[398,"Catherine","Cherry","2020-01-01","2021-12-29",333,6408,true,false],[398,"Catherine","Cherry","2020-01-01","2021-12-29",333,4361,false,true],[399,"Christy","Johnson","2020-04-21","2021-12-30",280,5249,true,false],[399,"Christy","Johnson","2020-04-21","2021-12-30",280,3357,false,true],[400,"Teresa","Ayala","2020-05-26","2021-12-30",208,3747,true,false],[400,"Teresa","Ayala","2020-05-26","2021-12-30",208,2459,false,true],[402,"Frank","Woods","2020-12-15","2021-12-30",95,1719,true,false],[402,"Frank","Woods","2020-12-15","2021-12-30",95,1169,false,true],[403,"Christopher","Parker","2020-03-23","2021-12-30",173,3247,true,false],[403,"Christopher","Parker","2020-03-23","2021-12-30",173,2340,false,true],[405,"Kathleen","Cohen","2020-01-02","2021-12-30",125,2444,true,false],[405,"Kathleen","Cohen","2020-01-02","2021-12-30",125,1899,false,true],[406,"Christopher","Pierce","2020-12-26","2021-12-25",54,1001,true,false],[406,"Christopher","Pierce","2020-12-26","2021-12-25",54,635,false,true],[410,"Lauren","Roach","2020-05-23","2021-12-26",94,1762,true,false],[410,"Lauren","Roach","2020-05-23","2021-12-26",94,1364,false,true],[413,"Sarah","Smith","2020-03-28","2021-12-19",76,1389,true,false],[413,"Sarah","Smith","2020-03-28","2021-12-19",76,794,false,true],[416,"Eric","Chase","2020-10-10","2021-12-18",52,942,true,false],[416,"Eric","Chase","2020-10-10","2021-12-18",52,538,false,true],[418,"Jonathan","Torres","2020-12-13","2021-12-19",50,857,true,false],[418,"Jonathan","Torres","2020-12-13","2021-12-19",50,605,false,true],[419,"Brianna","Lee","2020-01-11","2021-12-19",61,1108,true,false],[419,"Brianna","Lee","2020-01-11","2021-12-19",61,735,false,true],[421,"Donald","Miller","2020-01-05","2021-12-25",98,1678,true,false],[421,"Donald","Miller","2020-01-05","2021-12-25",98,1150,false,true],[422,"Andrea","Green","2020-01-05","2021-12-26",97,1647,true,false],[422,"Andrea","Green","2020-01-05","2021-12-26",97,1132,false,true],[423,"Jacob","Marshall","2020-01-05","2021-12-26",111,2120,true,false],[423,"Jacob","Marshall","2020-01-05","2021-12-26",111,1567,false,true],[425,"Ryan","Stokes","2020-01-11","2021-12-26",104,1634,true,false],[425,"Ryan","Stokes","2020-01-11","2021-12-26",104,1102,false,true],[428,"Charles","Lynch","2020-03-07","2021-12-25",93,1492,true,false],[428,"Charles","Lynch","2020-03-07","2021-12-25",93,1009,false,true],[429,"Christine","Sherman","2020-08-08","2021-12-26",72,1265,true,false],[429,"Christine","Sherman","2020-08-08","2021-12-26",72,801,false,true],[433,"Rachel","Carter","2020-04-26","2021-12-18",48,972,true,false],[433,"Rachel","Carter","2020-04-26","2021-12-18",48,649,false,true],[434,"Alexandria","Ramos","2020-07-25","2021-12-19",42,684,true,false],[434,"Alexandria","Ramos","2020-07-25","2021-12-19",42,442,false,true],[435,"Destiny","Davis","2020-12-12","2021-12-18",31,465,true,false],[435,"Destiny","Davis","2020-12-12","2021-12-18",31,337,false,true],[436,"Joshua","Diaz","2020-08-29","2021-12-18",68,1163,true,false],[436,"Joshua","Diaz","2020-08-29","2021-12-18",68,816,false,true],[440,"John","Martin","2020-03-21","2021-12-19",90,1585,true,false],[440,"John","Martin","2020-03-21","2021-12-19",90,1046,false,true],[441,"Matthew","Lucero","2021-01-10","2021-12-26",60,930,true,false],[441,"Matthew","Lucero","2021-01-10","2021-12-26",60,630,false,true],[444,"Anthony","Riddle","2020-08-02","2021-12-25",66,1133,true,false],[444,"Anthony","Riddle","2020-08-02","2021-12-25",66,694,false,true],[445,"Robert","Bray","2020-01-04","2021-12-19",126,2537,true,false],[445,"Robert","Bray","2020-01-04","2021-12-19",126,1815,false,true],[446,"Michael","Berg","2020-08-02","2021-12-26",69,1259,true,false],[446,"Michael","Berg","2020-08-02","2021-12-26",69,820,false,true],[447,"Catherine","Snyder","2020-12-05","2021-12-26",62,1188,true,false],[447,"Catherine","Snyder","2020-12-05","2021-12-26",62,712,false,true],[449,"Shelly","Bailey","2020-01-05","2021-12-26",108,1913,true,false],[449,"Shelly","Bailey","2020-01-05","2021-12-26",108,1241,false,true],[450,"Debbie","Dawson","2020-01-05","2021-12-26",120,2305,true,false],[450,"Debbie","Dawson","2020-01-05","2021-12-26",120,1496,false,true],[456,"Anthony","Martinez","2020-03-28","2021-12-19",82,1520,true,false],[456,"Anthony","Martinez","2020-03-28","2021-12-19",82,1070,false,true],[457,"William","Smith","2020-01-05","2021-12-26",97,1780,true,false],[457,"William","Smith","2020-01-05","2021-12-26",97,1221,false,true],[459,"Michelle","Sims","2020-06-06","2021-12-25",84,1459,true,false],[459,"Michelle","Sims","2020-06-06","2021-12-25",84,951,false,true],[460,"William","Garcia","2020-05-23","2021-12-25",79,1515,true,false],[460,"William","Garcia","2020-05-23","2021-12-25",79,1036,false,true],[461,"Barry","Mejia","2020-03-22","2021-12-12",62,1167,true,false],[461,"Barry","Mejia","2020-03-22","2021-12-12",62,918,false,true],[462,"John","Owens","2020-07-11","2021-12-26",58,964,true,false],[462,"John","Owens","2020-07-11","2021-12-26",58,650,false,true],[464,"Eric","Wheeler","2020-06-13","2021-12-26",81,1511,true,false],[464,"Eric","Wheeler","2020-06-13","2021-12-26",81,960,false,true],[465,"Bryan","Andrade","2020-01-05","2021-12-26",71,1238,true,false],[465,"Bryan","Andrade","2020-01-05","2021-12-26",71,720,false,true],[471,"Stephanie","Rodriguez","2020-09-20","2021-12-11",52,1044,true,false],[471,"Stephanie","Rodriguez","2020-09-20","2021-12-11",52,791,false,true],[473,"Sarah","Parker","2020-03-15","2021-12-18",83,1614,true,false],[473,"Sarah","Parker","2020-03-15","2021-12-18",83,1063,false,true],[474,"Stephanie","Henry","2020-05-09","2021-12-19",49,966,true,false],[474,"Stephanie","Henry","2020-05-09","2021-12-19",49,464,false,true],[476,"Gary","Carpenter","2020-01-04","2021-12-19",86,1539,true,false],[476,"Gary","Carpenter","2020-01-04","2021-12-19",86,1260,false,true],[481,"Makayla","Sanchez","2020-01-04","2021-12-26",91,1699,true,false],[481,"Makayla","Sanchez","2020-01-04","2021-12-26",91,1047,false,true],[483,"William","Brown","2020-01-12","2021-12-19",111,2028,true,false],[483,"William","Brown","2020-01-12","2021-12-19",111,1402,false,true],[484,"Jason","Chandler","2020-01-18","2021-12-26",92,1569,true,false],[484,"Jason","Chandler","2020-01-18","2021-12-26",92,1135,false,true],[485,"Kaitlyn","Smith","2020-10-17","2021-12-25",61,939,true,false],[485,"Kaitlyn","Smith","2020-10-17","2021-12-25",61,694,false,true],[486,"Joshua","Duran","2020-01-05","2021-12-26",108,1962,true,false],[486,"Joshua","Duran","2020-01-05","2021-12-26",108,1327,false,true],[487,"Chelsea","Lee","2020-05-23","2021-12-26",52,833,true,false],[487,"Chelsea","Lee","2020-05-23","2021-12-26",52,605,false,true],[488,"Katelyn","Oconnor","2020-07-18","2021-12-04",46,755,true,false],[488,"Katelyn","Oconnor","2020-07-18","2021-12-04",46,499,false,true],[489,"Daniel","Ross","2020-09-26","2021-12-25",71,1330,true,false],[489,"Daniel","Ross","2020-09-26","2021-12-25",71,742,false,true],[490,"Joseph","Williams","2020-05-23","2021-12-25",48,934,true,false],[490,"Joseph","Williams","2020-05-23","2021-12-25",48,543,false,true],[492,"Justin","Andrade","2020-01-05","2021-12-26",87,1543,true,false],[492,"Justin","Andrade","2020-01-05","2021-12-26",87,816,false,true],[493,"Brandon","Weiss","2020-01-04","2021-12-25",77,1403,true,false],[493,"Brandon","Weiss","2020-01-04","2021-12-25",77,844,false,true],[503,"Julie","Garcia","2020-11-02","2021-12-30",127,2214,true,false],[503,"Julie","Garcia","2020-11-02","2021-12-30",127,1323,false,true],[505,"Bradley","Harrell","2020-04-14","2021-12-30",285,5125,true,false],[505,"Bradley","Harrell","2020-04-14","2021-12-30",285,3320,false,true],[507,"Brooke","Brooks","2020-09-21","2021-12-30",231,4295,true,false],[507,"Brooke","Brooks","2020-09-21","2021-12-30",231,2776,false,true],[509,"Hannah","Perez","2020-06-17","2021-12-30",178,3032,true,false],[509,"Hannah","Perez","2020-06-17","2021-12-30",178,2027,false,true],[510,"Gregory","Johnson","2020-01-02","2021-12-29",290,5258,true,false],[510,"Gregory","Johnson","2020-01-02","2021-12-29",290,3579,false,true],[511,"Jermaine","Guzman","2020-11-13","2021-12-29",129,2534,true,false],[511,"Jermaine","Guzman","2020-11-13","2021-12-29",129,1873,false,true],[513,"Kathy","Wilson","2020-02-25","2021-12-27",157,2846,true,false],[513,"Kathy","Wilson","2020-02-25","2021-12-27",157,2049,false,true],[514,"Ellen","Henderson","2020-05-21","2021-12-30",232,4173,true,false],[514,"Ellen","Henderson","2020-05-21","2021-12-30",232,2831,false,true],[518,"Charles","Anderson","2020-01-01","2021-12-27",233,4041,true,false],[518,"Charles","Anderson","2020-01-01","2021-12-27",233,2683,false,true],[519,"Laura","Ward","2020-01-01","2021-12-28",194,3209,true,false],[519,"Laura","Ward","2020-01-01","2021-12-28",194,2070,false,true],[521,"Sarah","Hensley","2020-01-01","2021-12-30",212,3600,true,false],[521,"Sarah","Hensley","2020-01-01","2021-12-30",212,2448,false,true],[522,"Scott","Rojas","2020-01-01","2021-12-30",183,3609,true,false],[522,"Scott","Rojas","2020-01-01","2021-12-30",183,2435,false,true],[525,"Jonathan","Clayton","2020-09-21","2021-12-30",254,4644,true,false],[525,"Jonathan","Clayton","2020-09-21","2021-12-30",254,3039,false,true],[526,"Jennifer","Espinoza","2020-03-31","2021-12-29",161,3023,true,false],[526,"Jennifer","Espinoza","2020-03-31","2021-12-29",161,2152,false,true],[527,"Ian","Sanchez","2020-01-01","2021-12-30",162,2990,true,false],[527,"Ian","Sanchez","2020-01-01","2021-12-30",162,1998,false,true],[529,"Brian","Lewis","2020-03-09","2021-12-29",188,3492,true,false],[529,"Brian","Lewis","2020-03-09","2021-12-29",188,2577,false,true],[530,"Michael","English","2020-01-01","2021-12-30",317,5599,true,false],[530,"Michael","English","2020-01-01","2021-12-30",317,3828,false,true],[533,"Shawn","Ward","2020-04-01","2021-12-30",215,4167,true,false],[533,"Shawn","Ward","2020-04-01","2021-12-30",215,2793,false,true],[534,"Derek","Jackson","2020-01-01","2021-12-30",304,5203,true,false],[534,"Derek","Jackson","2020-01-01","2021-12-30",304,3676,false,true],[535,"James","Mayer","2020-11-09","2021-12-29",165,2933,true,false],[535,"James","Mayer","2020-11-09","2021-12-29",165,2042,false,true],[536,"Jessica","Mcmillan","2020-04-24","2021-12-30",126,2207,true,false],[536,"Jessica","Mcmillan","2020-04-24","2021-12-30",126,1462,false,true],[537,"Nicole","Kim","2020-06-05","2021-12-30",223,4189,true,false],[537,"Nicole","Kim","2020-06-05","2021-12-30",223,2731,false,true],[538,"April","Horton","2020-01-01","2021-12-30",222,4030,true,false],[538,"April","Horton","2020-01-01","2021-12-30",222,2751,false,true],[539,"Colin","Leon","2020-01-01","2021-12-30",227,4096,true,false],[539,"Colin","Leon","2020-01-01","2021-12-30",227,2786,false,true],[540,"Jenny","Lee","2020-05-15","2021-12-30",229,3995,true,false],[540,"Jenny","Lee","2020-05-15","2021-12-30",229,2485,false,true],[541,"Elizabeth","Sharp","2020-03-17","2021-12-29",214,4328,true,false],[541,"Elizabeth","Sharp","2020-03-17","2021-12-29",214,2907,false,true],[543,"Mark","Black","2020-03-09","2021-12-30",240,4360,true,false],[543,"Mark","Black","2020-03-09","2021-12-30",240,2922,false,true],[544,"Kelly","Brown","2020-01-01","2021-12-30",189,3290,true,false],[544,"Kelly","Brown","2020-01-01","2021-12-30",189,2078,false,true],[546,"Cynthia","Smith","2020-06-15","2021-12-29",226,4006,true,false],[546,"Cynthia","Smith","2020-06-15","2021-12-29",226,2402,false,true],[549,"Peter","Johnson","2020-04-10","2021-12-30",247,4551,true,false],[549,"Peter","Johnson","2020-04-10","2021-12-30",247,3261,false,true],[551,"Matthew","Garcia","2020-02-25","2021-12-30",278,5200,true,false],[551,"Matthew","Garcia","2020-02-25","2021-12-30",278,3384,false,true],[552,"Chad","Thomas","2020-01-02","2021-12-30",241,4479,true,false],[552,"Chad","Thomas","2020-01-02","2021-12-30",241,3109,false,true],[555,"Cassandra","Ellison","2020-01-01","2021-12-29",307,5623,true,false],[555,"Cassandra","Ellison","2020-01-01","2021-12-29",307,3959,false,true],[556,"Stephen","James","2020-01-03","2021-12-30",275,4986,true,false],[556,"Stephen","James","2020-01-03","2021-12-30",275,3156,false,true],[558,"Kathleen","Murphy","2020-03-11","2021-12-28",270,4658,true,false],[558,"Kathleen","Murphy","2020-03-11","2021-12-28",270,3209,false,true],[559,"Kevin","Jacobs","2020-11-23","2021-12-30",123,2151,true,false],[559,"Kevin","Jacobs","2020-11-23","2021-12-30",123,1375,false,true],[561,"Daniel","Alvarez","2020-01-01","2021-12-30",240,4736,true,false],[561,"Daniel","Alvarez","2020-01-01","2021-12-30",240,2993,false,true],[564,"Johnathan","Miller","2020-04-13","2021-12-30",133,2653,true,false],[564,"Johnathan","Miller","2020-04-13","2021-12-30",133,1822,false,true],[569,"Angela","Washington","2020-09-22","2021-12-30",164,3084,true,false],[569,"Angela","Washington","2020-09-22","2021-12-30",164,2321,false,true],[570,"Megan","Pitts","2020-03-11","2021-12-30",280,5148,true,false],[570,"Megan","Pitts","2020-03-11","2021-12-30",280,3327,false,true],[571,"Richard","Silva","2020-01-01","2021-12-30",201,3642,true,false],[571,"Richard","Silva","2020-01-01","2021-12-30",201,2602,false,true],[575,"Autumn","Lynch","2020-10-28","2021-12-30",212,3916,true,false],[575,"Autumn","Lynch","2020-10-28","2021-12-30",212,2631,false,true],[576,"Danielle","Ball","2020-01-03","2021-12-30",268,5250,true,false],[576,"Danielle","Ball","2020-01-03","2021-12-30",268,3854,false,true],[578,"Scott","Franklin","2020-09-22","2021-12-28",157,2739,true,false],[578,"Scott","Franklin","2020-09-22","2021-12-28",157,1883,false,true],[579,"Richard","Cline","2020-09-21","2021-12-30",214,3516,true,false],[579,"Richard","Cline","2020-09-21","2021-12-30",214,2401,false,true],[580,"George","Sexton","2020-09-21","2021-12-30",205,3754,true,false],[580,"George","Sexton","2020-09-21","2021-12-30",205,2166,false,true],[583,"Beth","Maynard","2020-03-12","2021-12-30",267,4903,true,false],[583,"Beth","Maynard","2020-03-12","2021-12-30",267,3231,false,true],[585,"Joseph","Suarez","2020-09-21","2021-12-30",238,4804,true,false],[585,"Joseph","Suarez","2020-09-21","2021-12-30",238,3269,false,true],[587,"Steven","Price","2020-11-12","2021-12-30",144,2599,true,false],[587,"Steven","Price","2020-11-12","2021-12-30",144,1786,false,true],[591,"Victor","Smith","2020-01-01","2021-12-30",237,4261,true,false],[591,"Victor","Smith","2020-01-01","2021-12-30",237,2888,false,true],[592,"Clayton","Thomas","2020-01-06","2021-12-28",234,4324,true,false],[592,"Clayton","Thomas","2020-01-06","2021-12-28",234,2812,false,true],[593,"Michael","Black","2020-10-22","2021-12-30",212,3749,true,false],[593,"Michael","Black","2020-10-22","2021-12-30",212,2666,false,true],[594,"Steven","Sanders","2020-09-21","2021-12-27",140,2684,true,false],[594,"Steven","Sanders","2020-09-21","2021-12-27",140,1848,false,true],[597,"Meghan","Haney","2020-12-11","2021-12-30",95,1618,true,false],[597,"Meghan","Haney","2020-12-11","2021-12-30",95,1134,false,true],[598,"Ronald","Fowler","2020-01-01","2021-12-30",197,3672,true,false],[598,"Ronald","Fowler","2020-01-01","2021-12-30",197,2447,false,true],[600,"Scott","Robinson","2020-04-20","2021-12-30",275,5005,true,false],[600,"Scott","Robinson","2020-04-20","2021-12-30",275,3584,false,true],[601,"Allen","Hughes","2020-01-01","2021-12-30",336,5990,true,false],[601,"Allen","Hughes","2020-01-01","2021-12-30",336,4082,false,true],[602,"Savannah","Perez","2020-01-01","2021-12-30",333,5922,true,false],[602,"Savannah","Perez","2020-01-01","2021-12-30",333,4176,false,true],[604,"Hayley","Smith","2020-05-28","2021-12-29",189,3514,true,false],[604,"Hayley","Smith","2020-05-28","2021-12-29",189,2235,false,true],[605,"Lisa","Brown","2020-02-26","2021-12-30",249,4582,true,false],[605,"Lisa","Brown","2020-02-26","2021-12-30",249,3237,false,true],[606,"Scott","Bailey","2020-03-25","2021-12-30",270,4850,true,false],[606,"Scott","Bailey","2020-03-25","2021-12-30",270,3563,false,true],[607,"Darrell","Flowers","2020-01-01","2021-12-29",316,5516,true,false],[607,"Darrell","Flowers","2020-01-01","2021-12-29",316,3723,false,true],[610,"Pamela","Hill","2020-01-03","2021-12-29",298,5704,true,false],[610,"Pamela","Hill","2020-01-03","2021-12-29",298,3665,false,true],[611,"Angela","Nielsen","2020-03-24","2021-12-30",259,5064,true,false],[611,"Angela","Nielsen","2020-03-24","2021-12-30",259,3333,false,true],[612,"Theresa","Coleman","2020-09-21","2021-12-30",233,4183,true,false],[612,"Theresa","Coleman","2020-09-21","2021-12-30",233,2834,false,true],[616,"Kathleen","Gonzalez","2020-01-07","2021-12-30",233,3783,true,false],[616,"Kathleen","Gonzalez","2020-01-07","2021-12-30",233,2381,false,true],[619,"Cynthia","Clarke","2020-05-27","2021-12-30",105,1756,true,false],[619,"Cynthia","Clarke","2020-05-27","2021-12-30",105,1087,false,true],[622,"John","Horton","2020-09-22","2021-12-30",145,2719,true,false],[622,"John","Horton","2020-09-22","2021-12-30",145,1655,false,true],[624,"Karen","Hall","2020-01-07","2021-12-30",256,5039,true,false],[624,"Karen","Hall","2020-01-07","2021-12-30",256,3378,false,true],[626,"Karen","Sherman","2020-09-22","2021-12-29",111,2027,true,false],[626,"Karen","Sherman","2020-09-22","2021-12-29",111,1272,false,true],[628,"Melanie","Powell","2020-06-09","2021-12-30",180,2935,true,false],[628,"Melanie","Powell","2020-06-09","2021-12-30",180,2173,false,true],[629,"Julia","Robertson","2020-01-01","2021-12-30",279,4917,true,false],[629,"Julia","Robertson","2020-01-01","2021-12-30",279,3165,false,true],[631,"Bob","Brown","2020-01-06","2021-12-29",177,3344,true,false],[631,"Bob","Brown","2020-01-06","2021-12-29",177,2269,false,true],[635,"Keith","Lawrence","2020-03-27","2021-12-30",220,4017,true,false],[635,"Keith","Lawrence","2020-03-27","2021-12-30",220,2708,false,true],[636,"Donald","Hall","2020-01-01","2021-12-30",316,5901,true,false],[636,"Donald","Hall","2020-01-01","2021-12-30",316,4066,false,true],[637,"Brian","Kim","2020-01-01","2021-12-30",176,3171,true,false],[637,"Brian","Kim","2020-01-01","2021-12-30",176,2029,false,true],[639,"Gregory","Torres","2020-01-01","2021-12-28",317,6224,true,false],[639,"Gregory","Torres","2020-01-01","2021-12-28",317,4230,false,true],[640,"Jacob","Alexander","2020-09-22","2021-12-30",198,3687,true,false],[640,"Jacob","Alexander","2020-09-22","2021-12-30",198,2798,false,true],[642,"Sarah","Gutierrez","2020-01-01","2021-12-30",255,4484,true,false],[642,"Sarah","Gutierrez","2020-01-01","2021-12-30",255,3023,false,true],[643,"Brian","Oconnor","2020-11-24","2021-12-30",132,2410,true,false],[643,"Brian","Oconnor","2020-11-24","2021-12-30",132,1774,false,true],[644,"Heather","Hopkins","2020-04-27","2021-12-30",215,4301,true,false],[644,"Heather","Hopkins","2020-04-27","2021-12-30",215,2799,false,true],[645,"Chad","Bentley","2020-04-24","2021-12-30",245,4646,true,false],[645,"Chad","Bentley","2020-04-24","2021-12-30",245,3051,false,true],[646,"William","Wagner","2020-09-21","2021-12-30",239,4160,true,false],[646,"William","Wagner","2020-09-21","2021-12-30",239,3000,false,true],[647,"James","Smith","2020-03-06","2021-12-30",251,4353,true,false],[647,"James","Smith","2020-03-06","2021-12-30",251,2985,false,true],[648,"Jacqueline","Harris","2020-05-01","2021-12-30",271,5156,true,false],[648,"Jacqueline","Harris","2020-05-01","2021-12-30",271,3473,false,true],[651,"Nicole","Guerrero","2020-09-22","2021-12-30",211,3666,true,false],[651,"Nicole","Guerrero","2020-09-22","2021-12-30",211,2457,false,true],[652,"Lisa","Taylor","2020-01-01","2021-12-30",185,3216,true,false],[652,"Lisa","Taylor","2020-01-01","2021-12-30",185,2129,false,true],[656,"James","Poole","2020-01-01","2021-12-30",332,5958,true,false],[656,"James","Poole","2020-01-01","2021-12-30",332,4195,false,true],[657,"Frank","Harris","2020-06-10","2021-12-30",145,2720,true,false],[657,"Frank","Harris","2020-06-10","2021-12-30",145,1838,false,true],[659,"Kelsey","Baker","2020-09-24","2021-12-30",233,4067,true,false],[659,"Kelsey","Baker","2020-09-24","2021-12-30",233,2954,false,true],[661,"Kent","Reed","2020-01-01","2021-12-30",320,5756,true,false],[661,"Kent","Reed","2020-01-01","2021-12-30",320,3661,false,true],[663,"Sydney","Ramos","2020-09-21","2021-12-30",235,4408,true,false],[663,"Sydney","Ramos","2020-09-21","2021-12-30",235,3134,false,true],[664,"Erin","Haney","2020-01-01","2021-12-30",311,5621,true,false],[664,"Erin","Haney","2020-01-01","2021-12-30",311,3856,false,true],[665,"Joshua","Morgan","2020-03-16","2021-12-30",218,3797,true,false],[665,"Joshua","Morgan","2020-03-16","2021-12-30",218,2589,false,true],[668,"Anthony","Perez","2020-09-21","2021-12-29",222,4154,true,false],[668,"Anthony","Perez","2020-09-21","2021-12-29",222,2580,false,true],[670,"David","Edwards","2020-01-01","2021-12-30",330,5716,true,false],[670,"David","Edwards","2020-01-01","2021-12-30",330,3837,false,true],[671,"Kristen","Koch","2020-10-19","2021-12-30",209,3834,true,false],[671,"Kristen","Koch","2020-10-19","2021-12-30",209,2569,false,true],[674,"Leah","Parker","2020-09-27","2021-12-30",152,2755,true,false],[674,"Leah","Parker","2020-09-27","2021-12-30",152,1995,false,true],[677,"Charles","Hunt","2020-03-10","2021-12-30",261,4831,true,false],[677,"Charles","Hunt","2020-03-10","2021-12-30",261,3147,false,true],[678,"Andrea","Mack","2020-01-06","2021-12-30",241,4407,true,false],[678,"Andrea","Mack","2020-01-06","2021-12-30",241,3114,false,true],[680,"Monica","Abbott","2020-01-02","2021-12-28",244,4446,true,false],[680,"Monica","Abbott","2020-01-02","2021-12-28",244,3012,false,true],[682,"Carla","Hardy","2020-03-27","2021-12-29",220,4002,true,false],[682,"Carla","Hardy","2020-03-27","2021-12-29",220,2573,false,true],[684,"Tiffany","James","2020-10-30","2021-12-30",156,2473,true,false],[684,"Tiffany","James","2020-10-30","2021-12-30",156,1695,false,true],[690,"Renee","Anderson","2020-01-02","2021-12-27",258,4539,true,false],[690,"Renee","Anderson","2020-01-02","2021-12-27",258,3135,false,true],[692,"Laura","Reyes","2020-05-04","2021-12-30",221,4290,true,false],[692,"Laura","Reyes","2020-05-04","2021-12-30",221,2653,false,true],[694,"Brian","Hudson","2020-01-01","2021-12-27",261,5074,true,false],[694,"Brian","Hudson","2020-01-01","2021-12-27",261,3617,false,true],[695,"April","Price","2020-01-05","2021-12-30",263,4807,true,false],[695,"April","Price","2020-01-05","2021-12-30",263,3160,false,true],[697,"Elizabeth","Cox","2020-01-05","2021-12-29",262,4625,true,false],[697,"Elizabeth","Cox","2020-01-05","2021-12-29",262,3172,false,true],[698,"Maureen","Whitaker","2020-01-01","2021-12-29",261,4841,true,false],[698,"Maureen","Whitaker","2020-01-01","2021-12-29",261,3143,false,true],[699,"Ryan","James","2020-04-02","2021-12-29",219,3769,true,false],[699,"Ryan","James","2020-04-02","2021-12-29",219,2696,false,true],[700,"Amanda","Mitchell","2020-10-18","2021-12-29",159,2843,true,false],[700,"Amanda","Mitchell","2020-10-18","2021-12-29",159,1960,false,true],[701,"Mark","Carrillo","2020-10-22","2021-12-28",156,2919,true,false],[701,"Mark","Carrillo","2020-10-22","2021-12-28",156,1901,false,true],[702,"Taylor","Barnes","2020-03-03","2021-12-29",240,4504,true,false],[702,"Taylor","Barnes","2020-03-03","2021-12-29",240,2896,false,true],[704,"April","Kelly","2020-01-01","2021-12-30",253,4892,true,false],[704,"April","Kelly","2020-01-01","2021-12-30",253,3417,false,true],[705,"Thomas","Norris","2020-01-01","2021-12-24",255,4770,true,false],[705,"Thomas","Norris","2020-01-01","2021-12-24",255,3481,false,true],[708,"Glenn","Russell","2020-02-24","2021-12-29",237,4379,true,false],[708,"Glenn","Russell","2020-02-24","2021-12-29",237,3131,false,true],[709,"Christopher","Chaney","2020-04-05","2021-12-30",243,4258,true,false],[709,"Christopher","Chaney","2020-04-05","2021-12-30",243,3102,false,true],[710,"Mark","Flores","2020-07-09","2021-12-30",199,3658,true,false],[710,"Mark","Flores","2020-07-09","2021-12-30",199,2410,false,true],[716,"Karen","Johnson","2020-03-13","2021-12-29",226,4178,true,false],[716,"Karen","Johnson","2020-03-13","2021-12-29",226,2860,false,true],[717,"Christopher","Hogan","2020-05-04","2021-12-30",182,3237,true,false],[717,"Christopher","Hogan","2020-05-04","2021-12-30",182,2180,false,true],[719,"Steven","Hansen","2020-06-03","2021-12-30",216,4023,true,false],[719,"Steven","Hansen","2020-06-03","2021-12-30",216,2872,false,true],[720,"Crystal","Ramirez","2020-01-01","2021-12-30",263,4836,true,false],[720,"Crystal","Ramirez","2020-01-01","2021-12-30",263,2984,false,true],[721,"Susan","Sheppard","2020-04-21","2021-12-29",229,3940,true,false],[721,"Susan","Sheppard","2020-04-21","2021-12-29",229,2479,false,true],[723,"Christopher","Moyer","2020-03-20","2021-12-29",258,4751,true,false],[723,"Christopher","Moyer","2020-03-20","2021-12-29",258,3413,false,true],[724,"Terri","Wright","2020-03-05","2021-12-28",251,4544,true,false],[724,"Terri","Wright","2020-03-05","2021-12-28",251,3033,false,true],[728,"Thomas","Schwartz","2020-01-03","2021-12-30",245,4694,true,false],[728,"Thomas","Schwartz","2020-01-03","2021-12-30",245,3124,false,true],[729,"Joseph","Ward","2020-06-27","2021-12-30",175,3062,true,false],[729,"Joseph","Ward","2020-06-27","2021-12-30",175,2169,false,true],[730,"Tom","Bailey","2020-01-17","2021-12-28",256,4706,true,false],[730,"Tom","Bailey","2020-01-17","2021-12-28",256,3120,false,true],[731,"Denise","Meyer","2020-01-01","2021-12-27",260,4625,true,false],[731,"Denise","Meyer","2020-01-01","2021-12-27",260,3178,false,true],[732,"Elizabeth","Tucker","2020-08-24","2021-12-30",177,3296,true,false],[732,"Elizabeth","Tucker","2020-08-24","2021-12-30",177,2097,false,true],[734,"Marissa","Knight","2020-01-02","2021-12-29",249,4474,true,false],[734,"Marissa","Knight","2020-01-02","2021-12-29",249,2899,false,true],[735,"Rodney","Newton","2020-01-02","2021-12-29",261,4475,true,false],[735,"Rodney","Newton","2020-01-02","2021-12-29",261,2851,false,true],[737,"Tyler","Bennett","2020-01-03","2021-12-30",267,4844,true,false],[737,"Tyler","Bennett","2020-01-03","2021-12-30",267,3296,false,true],[738,"Natasha","Hawkins","2020-07-31","2021-12-29",176,3254,true,false],[738,"Natasha","Hawkins","2020-07-31","2021-12-29",176,2322,false,true],[739,"Kimberly","Carney","2020-01-01","2021-12-30",244,4603,true,false],[739,"Kimberly","Carney","2020-01-01","2021-12-30",244,3015,false,true],[740,"Kevin","Ryan","2020-03-09","2021-12-29",226,4095,true,false],[740,"Kevin","Ryan","2020-03-09","2021-12-29",226,2923,false,true],[743,"Arthur","Brown","2020-01-01","2021-12-29",277,5043,true,false],[743,"Arthur","Brown","2020-01-01","2021-12-29",277,3160,false,true],[745,"Eugene","Mitchell","2020-03-17","2021-12-30",226,4040,true,false],[745,"Eugene","Mitchell","2020-03-17","2021-12-30",226,2935,false,true],[746,"Kristine","Navarro","2020-03-12","2021-12-30",222,3851,true,false],[746,"Kristine","Navarro","2020-03-12","2021-12-30",222,2670,false,true],[749,"William","Smith","2020-01-03","2021-12-27",250,4793,true,false],[749,"William","Smith","2020-01-03","2021-12-27",250,3405,false,true],[754,"Marcus","Taylor","2020-09-01","2021-12-28",188,3708,true,false],[754,"Marcus","Taylor","2020-09-01","2021-12-28",188,2310,false,true],[755,"Anthony","Williams","2020-01-01","2021-12-29",247,4363,true,false],[755,"Anthony","Williams","2020-01-01","2021-12-29",247,2880,false,true],[758,"Edward","Koch","2020-01-02","2021-12-27",256,4598,true,false],[758,"Edward","Koch","2020-01-02","2021-12-27",256,3116,false,true],[761,"Michelle","Johnson","2020-09-14","2021-12-28",176,3376,true,false],[761,"Michelle","Johnson","2020-09-14","2021-12-28",176,2258,false,true],[763,"Makayla","Bailey","2020-04-30","2021-12-30",243,4137,true,false],[763,"Makayla","Bailey","2020-04-30","2021-12-30",243,2642,false,true],[766,"Brandon","Medina","2020-01-04","2021-12-29",255,4765,true,false],[766,"Brandon","Medina","2020-01-04","2021-12-29",255,3037,false,true],[768,"Deborah","Guerrero","2020-01-01","2021-12-30",275,4681,true,false],[768,"Deborah","Guerrero","2020-01-01","2021-12-30",275,3294,false,true],[770,"Michelle","Wright","2020-05-18","2021-12-29",204,4157,true,false],[770,"Michelle","Wright","2020-05-18","2021-12-29",204,2933,false,true],[772,"David","Combs","2020-03-09","2021-12-29",237,4269,true,false],[772,"David","Combs","2020-03-09","2021-12-29",237,2707,false,true],[773,"Erica","Lam","2020-01-01","2021-12-29",249,4153,true,false],[773,"Erica","Lam","2020-01-01","2021-12-29",249,3075,false,true],[774,"Steven","Robinson","2020-09-02","2021-12-30",178,3348,true,false],[774,"Steven","Robinson","2020-09-02","2021-12-30",178,2212,false,true],[777,"Linda","Gibson","2020-01-04","2021-12-30",236,4117,true,false],[777,"Linda","Gibson","2020-01-04","2021-12-30",236,2977,false,true],[778,"Kayla","Mcfarland","2020-01-04","2021-12-30",258,4922,true,false],[778,"Kayla","Mcfarland","2020-01-04","2021-12-30",258,3187,false,true],[779,"David","Warner","2020-03-10","2021-12-28",225,4281,true,false],[779,"David","Warner","2020-03-10","2021-12-28",225,2960,false,true],[780,"Kristen","Rodriguez","2020-01-05","2021-12-27",274,4823,true,false],[780,"Kristen","Rodriguez","2020-01-05","2021-12-27",274,3117,false,true],[781,"Michael","Wilson","2020-05-14","2021-12-20",219,3859,true,false],[781,"Michael","Wilson","2020-05-14","2021-12-20",219,2592,false,true],[782,"Lisa","Carr","2020-01-08","2021-12-30",262,4699,true,false],[782,"Lisa","Carr","2020-01-08","2021-12-30",262,3315,false,true],[783,"Jeremy","Serrano","2020-04-11","2021-12-30",238,4330,true,false],[783,"Jeremy","Serrano","2020-04-11","2021-12-30",238,2793,false,true],[787,"Barbara","Rivera","2020-01-02","2021-12-29",274,4996,true,false],[787,"Barbara","Rivera","2020-01-02","2021-12-29",274,3108,false,true],[790,"Dave","Hawkins","2020-04-26","2021-12-29",230,3873,true,false],[790,"Dave","Hawkins","2020-04-26","2021-12-29",230,2749,false,true],[795,"Jacqueline","Conner","2020-05-26","2021-12-30",228,4235,true,false],[795,"Jacqueline","Conner","2020-05-26","2021-12-30",228,2792,false,true],[798,"Laurie","Rich","2020-01-05","2021-12-29",264,5144,true,false],[798,"Laurie","Rich","2020-01-05","2021-12-29",264,3512,false,true],[800,"Stacey","Ayers","2020-07-04","2021-12-29",190,3631,true,false],[800,"Stacey","Ayers","2020-07-04","2021-12-29",190,2399,false,true],[804,"Andrea","Gallagher","2020-03-22","2021-12-27",192,3211,true,false],[804,"Andrea","Gallagher","2020-03-22","2021-12-27",192,2383,false,true],[805,"Karen","Turner","2020-01-03","2021-12-29",250,4434,true,false],[805,"Karen","Turner","2020-01-03","2021-12-29",250,2738,false,true],[809,"Michael","Howard","2020-01-03","2021-12-30",269,4873,true,false],[809,"Michael","Howard","2020-01-03","2021-12-30",269,3144,false,true],[810,"Michele","Reyes","2020-10-26","2021-12-30",173,3357,true,false],[810,"Michele","Reyes","2020-10-26","2021-12-30",173,2139,false,true],[811,"Amber","Sellers","2020-01-02","2021-12-29",275,4793,true,false],[811,"Amber","Sellers","2020-01-02","2021-12-29",275,3144,false,true],[812,"Vanessa","Alexander","2020-01-01","2021-12-28",278,5074,true,false],[812,"Vanessa","Alexander","2020-01-01","2021-12-28",278,3722,false,true],[814,"Hannah","Griffith","2020-08-10","2021-12-29",205,3970,true,false],[814,"Hannah","Griffith","2020-08-10","2021-12-29",205,2931,false,true],[816,"Christopher","Huffman","2020-04-16","2021-12-30",222,4105,true,false],[816,"Christopher","Huffman","2020-04-16","2021-12-30",222,2759,false,true],[821,"Austin","Wong","2020-04-08","2021-12-30",241,4305,true,false],[821,"Austin","Wong","2020-04-08","2021-12-30",241,3030,false,true],[823,"Peggy","Sanford","2020-01-04","2021-12-30",261,5224,true,false],[823,"Peggy","Sanford","2020-01-04","2021-12-30",261,3485,false,true],[824,"Tasha","Duarte","2020-01-01","2021-12-29",282,5642,true,false],[824,"Tasha","Duarte","2020-01-01","2021-12-29",282,3959,false,true],[827,"Melanie","Rodriguez","2020-03-01","2021-12-28",232,4526,true,false],[827,"Melanie","Rodriguez","2020-03-01","2021-12-28",232,3047,false,true],[828,"Ashley","Brown","2020-01-06","2021-12-29",260,4690,true,false],[828,"Ashley","Brown","2020-01-06","2021-12-29",260,3027,false,true],[830,"Julia","Jacobson","2020-01-02","2021-12-30",263,4827,true,false],[830,"Julia","Jacobson","2020-01-02","2021-12-30",263,3293,false,true],[831,"Natasha","Fernandez","2020-07-11","2021-12-27",197,3576,true,false],[831,"Natasha","Fernandez","2020-07-11","2021-12-27",197,2505,false,true],[833,"Gloria","Walker","2020-01-02","2021-12-30",249,4247,true,false],[833,"Gloria","Walker","2020-01-02","2021-12-30",249,2859,false,true],[835,"Christopher","Shannon","2020-02-24","2021-12-30",227,4335,true,false],[835,"Christopher","Shannon","2020-02-24","2021-12-30",227,2473,false,true],[837,"Amy","Walker","2020-10-18","2021-12-29",163,2886,true,false],[837,"Amy","Walker","2020-10-18","2021-12-29",163,2171,false,true],[838,"Heather","Gallegos","2020-03-31","2021-12-30",194,3699,true,false],[838,"Heather","Gallegos","2020-03-31","2021-12-30",194,2454,false,true],[841,"Nicole","Moore","2020-12-08","2021-12-29",160,2868,true,false],[841,"Nicole","Moore","2020-12-08","2021-12-29",160,2063,false,true],[843,"Nicole","Ramirez","2020-01-01","2021-12-28",262,4807,true,false],[843,"Nicole","Ramirez","2020-01-01","2021-12-28",262,3443,false,true],[848,"Mary","Dickerson","2020-01-01","2021-12-29",278,4936,true,false],[848,"Mary","Dickerson","2020-01-01","2021-12-29",278,3419,false,true],[853,"David","Pearson","2020-06-23","2021-12-28",210,3782,true,false],[853,"David","Pearson","2020-06-23","2021-12-28",210,2840,false,true],[855,"Jennifer","Miller","2020-08-22","2021-12-30",173,3457,true,false],[855,"Jennifer","Miller","2020-08-22","2021-12-30",173,2283,false,true],[856,"Daniel","Cordova","2020-10-07","2021-12-28",170,3011,true,false],[856,"Daniel","Cordova","2020-10-07","2021-12-28",170,2111,false,true],[857,"Timothy","Montoya","2020-08-28","2021-12-27",192,3644,true,false],[857,"Timothy","Montoya","2020-08-28","2021-12-27",192,2561,false,true],[859,"Bryan","Evans","2020-01-02","2021-12-29",270,4978,true,false],[859,"Bryan","Evans","2020-01-02","2021-12-29",270,3331,false,true],[860,"Joel","Mills","2020-05-27","2021-12-24",194,3376,true,false],[860,"Joel","Mills","2020-05-27","2021-12-24",194,2238,false,true],[862,"Holly","Wood","2020-03-07","2021-12-28",257,4656,true,false],[862,"Holly","Wood","2020-03-07","2021-12-28",257,2868,false,true],[863,"Matthew","Anthony","2020-01-05","2021-12-30",278,5094,true,false],[863,"Matthew","Anthony","2020-01-05","2021-12-30",278,3442,false,true],[866,"Kelly","Fisher","2020-02-29","2021-12-29",236,4611,true,false],[866,"Kelly","Fisher","2020-02-29","2021-12-29",236,2955,false,true],[871,"Matthew","Collier","2020-06-20","2021-12-29",187,3329,true,false],[871,"Matthew","Collier","2020-06-20","2021-12-29",187,2171,false,true],[872,"David","Sims","2020-06-14","2021-12-30",197,3593,true,false],[872,"David","Sims","2020-06-14","2021-12-30",197,2367,false,true],[873,"Ronald","Wade","2020-09-17","2021-12-27",170,3139,true,false],[873,"Ronald","Wade","2020-09-17","2021-12-27",170,2200,false,true],[874,"Alexis","Schneider","2020-05-30","2021-12-28",204,3339,true,false],[874,"Alexis","Schneider","2020-05-30","2021-12-28",204,2650,false,true],[875,"Janet","Perez","2020-06-21","2021-12-30",206,3639,true,false],[875,"Janet","Perez","2020-06-21","2021-12-30",206,2738,false,true],[876,"James","Colon","2020-01-01","2021-12-29",252,4263,true,false],[876,"James","Colon","2020-01-01","2021-12-29",252,2665,false,true],[877,"Elizabeth","Copeland","2020-01-06","2021-12-27",252,5024,true,false],[877,"Elizabeth","Copeland","2020-01-06","2021-12-27",252,3198,false,true],[881,"Gwendolyn","Andrade","2020-03-02","2021-12-27",247,4443,true,false],[881,"Gwendolyn","Andrade","2020-03-02","2021-12-27",247,2737,false,true],[882,"Emma","Wyatt","2020-04-14","2021-12-25",235,4157,true,false],[882,"Emma","Wyatt","2020-04-14","2021-12-25",235,2965,false,true],[884,"Joseph","Miller","2020-01-03","2021-12-30",267,4973,true,false],[884,"Joseph","Miller","2020-01-03","2021-12-30",267,3550,false,true],[885,"David","Higgins","2020-07-14","2021-12-30",199,3937,true,false],[885,"David","Higgins","2020-07-14","2021-12-30",199,2910,false,true],[887,"David","Martin","2020-01-01","2021-12-22",259,4352,true,false],[887,"David","Martin","2020-01-01","2021-12-22",259,3029,false,true],[889,"Leroy","Brewer","2020-01-09","2021-12-29",242,4329,true,false],[889,"Leroy","Brewer","2020-01-09","2021-12-29",242,2901,false,true],[893,"Christopher","Yoder","2020-07-13","2021-12-29",188,3695,true,false],[893,"Christopher","Yoder","2020-07-13","2021-12-29",188,2554,false,true],[902,"Phillip","Thomas","2020-07-13","2021-12-30",393,7333,true,false],[902,"Phillip","Thomas","2020-07-13","2021-12-30",393,5054,false,true],[903,"Amanda","Evans","2020-12-10","2021-12-30",278,5043,true,false],[903,"Amanda","Evans","2020-12-10","2021-12-30",278,3339,false,true],[904,"Sherry","Williams","2020-07-12","2021-12-30",392,7290,true,false],[904,"Sherry","Williams","2020-07-12","2021-12-30",392,5297,false,true],[907,"David","Bell","2021-07-01","2021-12-30",135,2139,true,false],[907,"David","Bell","2021-07-01","2021-12-30",135,1260,false,true],[908,"Martha","Young","2020-10-19","2021-12-30",307,5849,true,false],[908,"Martha","Young","2020-10-19","2021-12-30",307,4155,false,true],[910,"Patrick","Anderson","2020-09-08","2021-12-30",348,6631,true,false],[910,"Patrick","Anderson","2020-09-08","2021-12-30",348,4177,false,true],[911,"Jeffrey","Jordan","2020-07-13","2021-12-30",390,7080,true,false],[911,"Jeffrey","Jordan","2020-07-13","2021-12-30",390,4500,false,true],[912,"Jason","Mcdonald","2021-01-05","2021-12-30",267,4726,true,false],[912,"Jason","Mcdonald","2021-01-05","2021-12-30",267,3386,false,true],[914,"Michael","Ritter","2020-07-13","2021-12-30",372,6805,true,false],[914,"Michael","Ritter","2020-07-13","2021-12-30",372,4334,false,true],[915,"Wesley","Jensen","2020-09-21","2021-12-30",341,6468,true,false],[915,"Wesley","Jensen","2020-09-21","2021-12-30",341,4026,false,true],[918,"Christopher","Warner","2021-02-03","2021-12-30",239,4273,true,false],[918,"Christopher","Warner","2021-02-03","2021-12-30",239,2902,false,true],[920,"Christian","Smith","2020-09-14","2021-12-30",341,5851,true,false],[920,"Christian","Smith","2020-09-14","2021-12-30",341,3892,false,true],[921,"Sarah","Holder","2021-01-11","2021-12-30",240,4564,true,false],[921,"Sarah","Holder","2021-01-11","2021-12-30",240,3107,false,true],[922,"Danielle","Middleton","2020-07-13","2021-12-30",395,7461,true,false],[922,"Danielle","Middleton","2020-07-13","2021-12-30",395,4834,false,true],[925,"Sierra","Gallegos","2021-07-05","2021-12-30",123,2237,true,false],[925,"Sierra","Gallegos","2021-07-05","2021-12-30",123,1779,false,true],[928,"Julie","Castro","2021-05-03","2021-12-30",175,3180,true,false],[928,"Julie","Castro","2021-05-03","2021-12-30",175,2052,false,true],[930,"Donald","Pitts","2020-07-13","2021-12-30",388,6884,true,false],[930,"Donald","Pitts","2020-07-13","2021-12-30",388,4652,false,true],[932,"Christopher","Stephens","2021-03-23","2021-12-30",206,3712,true,false],[932,"Christopher","Stephens","2021-03-23","2021-12-30",206,2699,false,true],[933,"Pamela","Huang","2020-10-09","2021-12-30",326,6118,true,false],[933,"Pamela","Huang","2020-10-09","2021-12-30",326,4536,false,true],[934,"Joseph","Wilson","2021-03-17","2021-12-30",203,3679,true,false],[934,"Joseph","Wilson","2021-03-17","2021-12-30",203,2548,false,true],[935,"Jennifer","Palmer","2020-07-13","2021-12-30",371,7089,true,false],[935,"Jennifer","Palmer","2020-07-13","2021-12-30",371,4971,false,true],[936,"Michael","Hernandez","2020-07-13","2021-12-30",388,6915,true,false],[936,"Michael","Hernandez","2020-07-13","2021-12-30",388,4750,false,true],[937,"Jackie","Gallegos","2020-12-23","2021-12-30",270,4722,true,false],[937,"Jackie","Gallegos","2020-12-23","2021-12-30",270,3297,false,true],[941,"Billy","Hodges","2021-03-23","2021-12-30",200,3577,true,false],[941,"Billy","Hodges","2021-03-23","2021-12-30",200,2504,false,true],[943,"Angela","Gardner","2020-11-16","2021-12-30",297,5206,true,false],[943,"Angela","Gardner","2020-11-16","2021-12-30",297,3777,false,true],[947,"Todd","Zimmerman","2020-07-13","2021-12-30",377,7363,true,false],[947,"Todd","Zimmerman","2020-07-13","2021-12-30",377,5613,false,true],[951,"Austin","Williams","2020-12-15","2021-12-30",274,4820,true,false],[951,"Austin","Williams","2020-12-15","2021-12-30",274,3454,false,true],[952,"Terri","Williams","2020-07-13","2021-12-30",372,7164,true,false],[952,"Terri","Williams","2020-07-13","2021-12-30",372,4856,false,true],[954,"Luke","Willis","2020-07-13","2021-12-30",390,7059,true,false],[954,"Luke","Willis","2020-07-13","2021-12-30",390,5172,false,true],[956,"Kimberly","Martinez","2020-09-11","2021-12-30",350,6270,true,false],[956,"Kimberly","Martinez","2020-09-11","2021-12-30",350,4240,false,true],[957,"Martin","Elliott","2020-09-07","2021-12-30",348,6630,true,false],[957,"Martin","Elliott","2020-09-07","2021-12-30",348,4407,false,true],[958,"Derrick","Braun","2021-05-03","2021-12-30",174,3076,true,false],[958,"Derrick","Braun","2021-05-03","2021-12-30",174,2221,false,true],[961,"Steven","Nunez","2020-09-07","2021-12-30",347,6282,true,false],[961,"Steven","Nunez","2020-09-07","2021-12-30",347,4191,false,true],[965,"Ashley","Singleton","2020-11-02","2021-12-30",307,5457,true,false],[965,"Ashley","Singleton","2020-11-02","2021-12-30",307,3619,false,true],[967,"Stephen","Morgan","2021-01-20","2021-12-30",251,4234,true,false],[967,"Stephen","Morgan","2021-01-20","2021-12-30",251,2859,false,true],[969,"Sarah","Thomas","2020-12-07","2021-12-30",289,5170,true,false],[969,"Sarah","Thomas","2020-12-07","2021-12-30",289,3222,false,true],[970,"Kelly","Jackson","2020-12-15","2021-12-30",282,5579,true,false],[970,"Kelly","Jackson","2020-12-15","2021-12-30",282,3741,false,true],[975,"Mark","Rodriguez","2021-07-07","2021-12-30",131,2473,true,false],[975,"Mark","Rodriguez","2021-07-07","2021-12-30",131,1672,false,true],[976,"Bobby","Sweeney","2020-07-13","2021-12-30",390,7117,true,false],[976,"Bobby","Sweeney","2020-07-13","2021-12-30",390,5037,false,true],[978,"Jeremy","Mendez","2020-11-03","2021-12-30",310,5727,true,false],[978,"Jeremy","Mendez","2020-11-03","2021-12-30",310,3853,false,true],[981,"Melinda","Harris","2020-11-02","2021-12-30",310,5630,true,false],[981,"Melinda","Harris","2020-11-02","2021-12-30",310,3983,false,true],[983,"Elizabeth","Elliott","2020-12-28","2021-12-30",268,4520,true,false],[983,"Elizabeth","Elliott","2020-12-28","2021-12-30",268,3003,false,true],[984,"Joseph","Simmons","2020-07-11","2021-12-30",381,6954,true,false],[984,"Joseph","Simmons","2020-07-11","2021-12-30",381,4736,false,true],[985,"Michele","Swanson","2020-07-13","2021-12-30",389,7561,true,false],[985,"Michele","Swanson","2020-07-13","2021-12-30",389,5344,false,true],[988,"Miguel","Perez","2020-09-24","2021-12-30",336,6113,true,false],[988,"Miguel","Perez","2020-09-24","2021-12-30",336,4286,false,true],[990,"Anthony","King","2020-07-13","2021-12-30",389,6948,true,false],[990,"Anthony","King","2020-07-13","2021-12-30",389,4954,false,true],[991,"James","Rivera","2020-12-21","2021-12-30",276,5330,true,false],[991,"James","Rivera","2020-12-21","2021-12-30",276,3490,false,true],[992,"Melissa","Benson","2020-07-13","2021-12-30",392,7338,true,false],[992,"Melissa","Benson","2020-07-13","2021-12-30",392,4848,false,true],[993,"Edward","Reed","2020-10-27","2021-12-30",314,5886,true,false],[993,"Edward","Reed","2020-10-27","2021-12-30",314,3970,false,true],[994,"Veronica","Ryan","2020-09-22","2021-12-30",336,6069,true,false],[994,"Veronica","Ryan","2020-09-22","2021-12-30",336,4130,false,true]]},"status":"finished","run_id":"24dcdfb8-01ee-4452-873a-f1429bf0a732","run_at":"2024-11-11T09:17:00Z"},{"type":"histogram_diff","name":"Histogram diff of customers.customer_lifetime_value ","params":{"model":"customers","column_name":"customer_lifetime_value","column_type":"BIGINT"},"check_id":"23b10b7d-bc62-4a6f-b7e9-56d0246d0950","result":{"base":{"counts":[115,127,113,119,128,86,55,73,65,34,29,28,26,40,46,48,53,56,64,42,45,55,37,38,28,37,21,20,18,17,17,15,9,13,24,26,18,6,6,4,8,5,6,7,7,3,6,3,4,6],"total":1856},"current":{"counts":[181,162,175,156,92,96,57,42,52,53,82,76,80,70,82,46,49,40,31,25,29,26,21,28,23,13,12,11,4,11,6,7,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"total":1851},"min":5,"max":10092,"bin_edges":[5,207,409,611,813,1015,1217,1419,1621,1823,2025,2227,2429,2631,2833,3035,3237,3439,3641,3843,4045,4247,4449,4651,4853,5055,5257,5459,5661,5863,6065,6267,6469,6671,6873,7075,7277,7479,7681,7883,8085,8287,8489,8691,8893,9095,9297,9499,9701,9903,10105],"labels":["5-207","207-409","409-611","611-813","813-1015","1015-1217","1217-1419","1419-1621","1621-1823","1823-2025","2025-2227","2227-2429","2429-2631","2631-2833","2833-3035","3035-3237","3237-3439","3439-3641","3641-3843","3843-4045","4045-4247","4247-4449","4449-4651","4651-4853","4853-5055","5055-5257","5257-5459","5459-5661","5661-5863","5863-6065","6065-6267","6267-6469","6469-6671","6671-6873","6873-7075","7075-7277","7277-7479","7479-7681","7681-7883","7883-8085","8085-8287","8287-8489","8489-8691","8691-8893","8893-9095","9095-9297","9297-9499","9499-9701","9701-9903","9903-10105","10105-10307"]},"status":"finished","run_id":"a8492de1-e4d1-4d73-8038-e643e7537ebe","run_at":"2024-11-11T09:17:19Z"},{"type":"top_k_diff","name":"Top-k diff of customer_segments.order_frequency_segment ","params":{"model":"customer_segments","column_name":"order_frequency_segment","k":50},"check_id":"11abf654-39d9-4802-9ef7-1b56c8f3e223","result":{"base":{"values":["Frequent Buyer","Occasional Buyer","Rare Buyer"],"counts":[1754,58,44],"valids":1856,"total":1856},"current":{"values":["Frequent Buyer","Occasional Buyer","Rare Buyer"],"counts":[1754,58,44],"valids":1856,"total":1856}},"status":"finished","run_id":"ece60335-5ebe-4aed-8417-8fa66b93a61a","run_at":"2024-11-19T16:01:15Z"},{"type":"value_diff","name":"Value diff of customers","params":{"model":"customers","primary_key":"customer_id"},"result":{"summary":{"total":1856,"added":0,"removed":0},"data":{"columns":[{"name":"column","type":"text"},{"name":"matched","type":"number"},{"name":"matched_p","type":"number"}],"data":[["customer_id","1856","1.0"],["first_name","1856","1.0"],["last_name","1856","1.0"],["first_order","1856","1.0"],["most_recent_order","1856","1.0"],["number_of_orders","1856","1.0"],["customer_lifetime_value","22","0.011853448275862068"]]}},"status":"finished","run_id":"05f4653d-4f4a-4184-a2e2-b054a5102947","run_at":"2024-11-26T01:53:20Z"},{"type":"value_diff","name":"Value diff of customers","params":{"model":"customers","primary_key":"customer_id"},"result":{"summary":{"total":1856,"added":0,"removed":0},"data":{"columns":[{"name":"column","type":"text"},{"name":"matched","type":"number"},{"name":"matched_p","type":"number"}],"data":[["customer_id","1856","1.0"],["first_name","1856","1.0"],["last_name","1856","1.0"],["first_order","1856","1.0"],["most_recent_order","1856","1.0"],["number_of_orders","1856","1.0"],["customer_lifetime_value","22","0.011853448275862068"]]}},"status":"finished","run_id":"0ae82f53-9c87-4d68-b7b8-365b818d3ceb","run_at":"2024-11-26T01:53:32Z"},{"type":"value_diff","name":"Value diff of customer_segments","params":{"model":"customer_segments","primary_key":"customer_id"},"result":{"summary":{"total":1856,"added":0,"removed":0},"data":{"columns":[{"name":"column","type":"text"},{"name":"matched","type":"number"},{"name":"matched_p","type":"number"}],"data":[["customer_id","1856","1.0"],["number_of_orders","1856","1.0"],["customer_lifetime_value","22","0.011853448275862068"],["order_frequency_segment","1856","1.0"],["value_segment","1365","0.7354525862068966"]]}},"status":"finished","run_id":"b89e1ec0-60fe-4832-bbe6-cdaf594174a7","run_at":"2024-11-26T01:53:33Z"}],"checks":[{"name":"Model schema of customers, orders and modified nodes","description":"The schema of customers should not be changed","type":"schema_diff","params":{"select":"customers orders state:modified"},"view_options":{},"check_id":"594acbfa-473c-4c8b-9b6d-7fa0c39ce755","is_checked":false,"is_preset":true,"created_at":"2024-11-06T01:10:03Z","updated_at":"2024-11-19T10:11:04Z"},{"name":"Row count of customers, orders and modified table model","description":"The row count of customers and order should not be changed","type":"row_count_diff","params":{"select":"customers orders state:modified,config.materialized:table"},"view_options":{},"check_id":"2ed1b88a-7136-4d72-8195-5828c1906499","is_checked":false,"is_preset":true,"created_at":"2024-11-06T01:10:03Z","updated_at":"2024-11-19T10:11:04Z"},{"name":"Value diff of customers","description":"The customer_lifetime_value in customers should be 100% matched","type":"value_diff","params":{"model":"customers","primary_key":"customer_id","columns":["customer_id","customer_lifetime_value"]},"view_options":{},"check_id":"0e00837d-55fc-4143-88e5-8336d9427b8b","is_checked":false,"is_preset":true,"created_at":"2024-11-06T01:10:03Z","updated_at":"2024-11-19T10:11:04Z"},{"name":"Query diff of customers avg lifetime value","description":"The average of customer_lifetime_value should not be changed","type":"query_diff","params":{"sql_template":"SELECT\n    DATE_TRUNC('week', first_order) AS first_order_week,\n    AVG(customer_lifetime_value) AS avg_lifetime_value\nFROM\n    {{ ref(\"customers\") }}\nWHERE first_order is not NULL\nGROUP BY\n    first_order_week\nORDER BY\n    first_order_week;"},"view_options":{},"check_id":"149511fc-094d-455e-8a4e-9fbd60c1dd35","is_checked":false,"is_preset":true,"created_at":"2024-11-06T01:10:03Z","updated_at":"2024-11-19T10:11:04Z"},{"name":"Profile diff of customers","description":"","type":"profile_diff","params":{"model":"customers"},"view_options":{},"check_id":"400cff4f-ceea-4ea7-83fa-05912a3e08ba","is_checked":true,"is_preset":false,"created_at":"2024-11-06T15:25:19Z","updated_at":"2024-11-11T09:19:13Z"},{"name":"Row count diff of customers","description":"","type":"row_count_diff","params":{"node_names":["customers"]},"view_options":{},"check_id":"522920ce-1897-440c-84f0-fdcfd00a3b53","is_checked":true,"is_preset":false,"created_at":"2024-11-07T01:54:59Z","updated_at":"2024-11-11T09:19:15Z"},{"name":"Histogram diff of customers.customer_lifetime_value ","description":"you see in purpose because I change the order status ","type":"histogram_diff","params":{"model":"customers","column_name":"customer_lifetime_value","column_type":"BIGINT"},"view_options":{},"check_id":"23b10b7d-bc62-4a6f-b7e9-56d0246d0950","is_checked":true,"is_preset":false,"created_at":"2024-11-11T09:17:57Z","updated_at":"2024-11-11T09:18:36Z"},{"name":"Top-k diff of customer_segments.order_frequency_segment ","description":"","type":"top_k_diff","params":{"model":"customer_segments","column_name":"order_frequency_segment","k":50},"view_options":{},"check_id":"11abf654-39d9-4802-9ef7-1b56c8f3e223","is_checked":false,"is_preset":false,"created_at":"2024-11-19T15:59:50Z","updated_at":"2024-11-19T15:59:50Z"}],"artifacts":{"base":{"manifest":{"metadata":{"dbt_schema_version":"https://schemas.getdbt.com/dbt/manifest/v11.json","dbt_version":"1.7.18","generated_at":"2024-11-06T00:52:39.950741Z","invocation_id":"945013d5-8f98-4ea7-a481-08c41c697c99","env":{},"project_name":"jaffle_shop","project_id":"06e5b98c2db46f8a72cc4f66410e9b3b","user_id":"5b9a71cb-42a3-47c7-b444-f4b2d48829b3","send_anonymous_usage_stats":true,"adapter_type":"duckdb"},"nodes":{"model.jaffle_shop.customers":{"database":"jaffle_shop","schema":"prod","name":"customers","resource_type":"model","package_name":"jaffle_shop","path":"customers.sql","original_file_path":"models/customers.sql","unique_id":"model.jaffle_shop.customers","fqn":["jaffle_shop","customers"],"alias":"customers","checksum":{"name":"sha256","checksum":"d3b742d16b8ba5a1e9b7952a58fab257dd83524960d5adff6d2466a51855e41f"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"This table has basic information about a customer, as well as some derived facts based on a customer's orders","columns":{"customer_id":{"name":"customer_id","description":"This is a unique identifier for a customer","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"first_name":{"name":"first_name","description":"Customer's first name. PII.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"last_name":{"name":"last_name","description":"Customer's last name. PII.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"first_order":{"name":"first_order","description":"Date (UTC) of a customer's first order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"most_recent_order":{"name":"most_recent_order","description":"Date (UTC) of a customer's most recent order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"number_of_orders":{"name":"number_of_orders","description":"Count of the number of orders a customer has placed","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"total_order_amount":{"name":"total_order_amount","description":"Total value (AUD) of a customer's orders","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":"jaffle_shop://models/schema.yml","build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730854360.76437,"config_call_dict":{},"relation_name":"\"jaffle_shop\".\"prod\".\"customers\"","raw_code":"with customers as (\n\n    select * from {{ ref('stg_customers') }}\n\n),\n\norders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount)::bigint as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["model.jaffle_shop.stg_customers","model.jaffle_shop.stg_orders","model.jaffle_shop.stg_payments"]},"compiled_path":"target-base/compiled/jaffle_shop/models/customers.sql","compiled":true,"compiled_code":"with customers as (\n\n    select * from \"jaffle_shop\".\"prod\".\"stg_customers\"\n\n),\n\norders as (\n\n    select * from \"jaffle_shop\".\"prod\".\"stg_orders\"\n\n),\n\npayments as (\n\n    select * from \"jaffle_shop\".\"prod\".\"stg_payments\"\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount)::bigint as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null,"defer_relation":null},"model.jaffle_shop.orders":{"database":"jaffle_shop","schema":"prod","name":"orders","resource_type":"model","package_name":"jaffle_shop","path":"orders.sql","original_file_path":"models/orders.sql","unique_id":"model.jaffle_shop.orders","fqn":["jaffle_shop","orders"],"alias":"orders","checksum":{"name":"sha256","checksum":"27f8c79aad1cfd8411ab9c3d2ce8da1d787f7f05c58bbee1d247510dc426be0f"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"This table has basic information about orders, as well as some derived facts based on payments","columns":{"order_id":{"name":"order_id","description":"This is a unique identifier for an order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"customer_id":{"name":"customer_id","description":"Foreign key to the customers table","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"order_date":{"name":"order_date","description":"Date (UTC) that the order was placed","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"status":{"name":"status","description":"Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"amount":{"name":"amount","description":"Total amount (AUD) of the order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"credit_card_amount":{"name":"credit_card_amount","description":"Amount of the order (AUD) paid for by credit card","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"coupon_amount":{"name":"coupon_amount","description":"Amount of the order (AUD) paid for by coupon","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"bank_transfer_amount":{"name":"bank_transfer_amount","description":"Amount of the order (AUD) paid for by bank transfer","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"gift_card_amount":{"name":"gift_card_amount","description":"Amount of the order (AUD) paid for by gift card","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":"jaffle_shop://models/schema.yml","build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730854360.7675798,"config_call_dict":{},"relation_name":"\"jaffle_shop\".\"prod\".\"orders\"","raw_code":"{% set payment_methods = ['credit_card', 'coupon', 'bank_transfer', 'gift_card'] %}\n\nwith orders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        {% for payment_method in payment_methods -%}\n        sum(case when payment_method = '{{ payment_method }}' then amount else 0 end) as {{ payment_method }}_amount,\n        {% endfor -%}\n\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        {% for payment_method in payment_methods -%}\n\n        order_payments.{{ payment_method }}_amount,\n\n        {% endfor -%}\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["model.jaffle_shop.stg_orders","model.jaffle_shop.stg_payments"]},"compiled_path":"target-base/compiled/jaffle_shop/models/orders.sql","compiled":true,"compiled_code":"\n\nwith orders as (\n\n    select * from \"jaffle_shop\".\"prod\".\"stg_orders\"\n\n),\n\npayments as (\n\n    select * from \"jaffle_shop\".\"prod\".\"stg_payments\"\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        order_payments.credit_card_amount,\n\n        order_payments.coupon_amount,\n\n        order_payments.bank_transfer_amount,\n\n        order_payments.gift_card_amount,\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null,"defer_relation":null},"model.jaffle_shop.customer_segments":{"database":"jaffle_shop","schema":"prod","name":"customer_segments","resource_type":"model","package_name":"jaffle_shop","path":"customer_segments.sql","original_file_path":"models/customer_segments.sql","unique_id":"model.jaffle_shop.customer_segments","fqn":["jaffle_shop","customer_segments"],"alias":"customer_segments","checksum":{"name":"sha256","checksum":"087cd6709d57d09f41add0c201dab69c1c47314fab08aa020eb28bced18ebd05"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"This table categorizes customers based on their ordering behavior and value to the company, using derived metrics from their order history.","columns":{"customer_id":{"name":"customer_id","description":"This is a unique identifier for a customer.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"number_of_orders":{"name":"number_of_orders","description":"Count of the number of orders a customer has placed.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"customer_lifetime_value":{"name":"customer_lifetime_value","description":"Total value (in currency) of all orders placed by a customer over their lifetime.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"order_frequency_segment":{"name":"order_frequency_segment","description":"Categorization of customers based on how frequently they place orders.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"value_segment":{"name":"value_segment","description":"Categorization of customers based on the monetary value they bring to the company.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":"jaffle_shop://models/schema.yml","build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730854360.76524,"config_call_dict":{},"relation_name":"\"jaffle_shop\".\"prod\".\"customer_segments\"","raw_code":"-- Customer Segmentation based on number of orders and lifetime value\nSELECT\n    customer_id,\n    number_of_orders,\n    customer_lifetime_value,\n    CASE \n        WHEN number_of_orders > 10 THEN 'Frequent Buyer'\n        WHEN number_of_orders BETWEEN 5 AND 10 THEN 'Occasional Buyer'\n        ELSE 'Rare Buyer'\n    END AS order_frequency_segment,\n    CASE \n        WHEN customer_lifetime_value > 4000 THEN 'High Value'\n        WHEN customer_lifetime_value BETWEEN 1500 AND 4000 THEN 'Medium Value'\n        ELSE 'Low Value'\n    END AS value_segment\nFROM {{ ref('customers') }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["model.jaffle_shop.customers"]},"compiled_path":"target-base/compiled/jaffle_shop/models/customer_segments.sql","compiled":true,"compiled_code":"-- Customer Segmentation based on number of orders and lifetime value\nSELECT\n    customer_id,\n    number_of_orders,\n    customer_lifetime_value,\n    CASE \n        WHEN number_of_orders > 10 THEN 'Frequent Buyer'\n        WHEN number_of_orders BETWEEN 5 AND 10 THEN 'Occasional Buyer'\n        ELSE 'Rare Buyer'\n    END AS order_frequency_segment,\n    CASE \n        WHEN customer_lifetime_value > 4000 THEN 'High Value'\n        WHEN customer_lifetime_value BETWEEN 1500 AND 4000 THEN 'Medium Value'\n        ELSE 'Low Value'\n    END AS value_segment\nFROM \"jaffle_shop\".\"prod\".\"customers\"","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null,"defer_relation":null},"model.jaffle_shop.customer_order_pattern":{"database":"jaffle_shop","schema":"prod","name":"customer_order_pattern","resource_type":"model","package_name":"jaffle_shop","path":"customer_order_pattern.sql","original_file_path":"models/customer_order_pattern.sql","unique_id":"model.jaffle_shop.customer_order_pattern","fqn":["jaffle_shop","customer_order_pattern"],"alias":"customer_order_pattern","checksum":{"name":"sha256","checksum":"5c35486768f205de8f347e0cad50c380f7ede6215e881221fbb165024c7b8b54"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"This table provides detailed insights into the ordering patterns of customers, including the frequency and recency of their orders.","columns":{"customer_id":{"name":"customer_id","description":"This is a unique identifier for a customer.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"first_order":{"name":"first_order","description":"Date (UTC) of a customer's first order.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"most_recent_order":{"name":"most_recent_order","description":"Date (UTC) of a customer's most recent order.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"number_of_orders":{"name":"number_of_orders","description":"Count of the number of orders a customer has placed.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"days_active":{"name":"days_active","description":"The total number of days between a customer's first and most recent orders.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"avg_days_between_orders":{"name":"avg_days_between_orders","description":"Average number of days between consecutive orders for a customer.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":"jaffle_shop://models/schema.yml","build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730854360.765971,"config_call_dict":{},"relation_name":"\"jaffle_shop\".\"prod\".\"customer_order_pattern\"","raw_code":"-- Analyzing Order Patterns\nSELECT\n    customer_id,\n    first_order,\n    most_recent_order,\n    number_of_orders,\n    DATEDIFF('day', first_order, most_recent_order) AS days_active,\n    DATEDIFF('day', first_order, most_recent_order) / NULLIF(number_of_orders - 1, 0) AS avg_days_between_orders\nFROM {{ ref('customers') }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["model.jaffle_shop.customers"]},"compiled_path":"target-base/compiled/jaffle_shop/models/customer_order_pattern.sql","compiled":true,"compiled_code":"-- Analyzing Order Patterns\nSELECT\n    customer_id,\n    first_order,\n    most_recent_order,\n    number_of_orders,\n    DATEDIFF('day', first_order, most_recent_order) AS days_active,\n    DATEDIFF('day', first_order, most_recent_order) / NULLIF(number_of_orders - 1, 0) AS avg_days_between_orders\nFROM \"jaffle_shop\".\"prod\".\"customers\"","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null,"defer_relation":null},"model.jaffle_shop.stg_customers":{"database":"jaffle_shop","schema":"prod","name":"stg_customers","resource_type":"model","package_name":"jaffle_shop","path":"staging/stg_customers.sql","original_file_path":"models/staging/stg_customers.sql","unique_id":"model.jaffle_shop.stg_customers","fqn":["jaffle_shop","staging","stg_customers"],"alias":"stg_customers","checksum":{"name":"sha256","checksum":"9d05ea3a433ea87c3b3e638120213b52b44904f86a9b47c8d0e131259dd4a58a"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"view","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"silver"},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"","columns":{"customer_id":{"name":"customer_id","description":"","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":"silver"},"patch_path":"jaffle_shop://models/staging/schema.yml","build_path":null,"unrendered_config":{"materialized":"view","docs":{"node_color":"silver"}},"created_at":1730854360.8406599,"config_call_dict":{},"relation_name":"\"jaffle_shop\".\"prod\".\"stg_customers\"","raw_code":"with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ source('jaffle-shop-data', 'raw_customers') }}\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed","language":"sql","refs":[],"sources":[["jaffle-shop-data","raw_customers"]],"metrics":[],"depends_on":{"macros":[],"nodes":["source.jaffle_shop.jaffle-shop-data.raw_customers"]},"compiled_path":"target-base/compiled/jaffle_shop/models/staging/stg_customers.sql","compiled":true,"compiled_code":"with source as (\n    select * from read_csv('jaffle-shop-data/raw_customers.csv', header = true, auto_detect = true)\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null,"defer_relation":null},"model.jaffle_shop.stg_payments":{"database":"jaffle_shop","schema":"prod","name":"stg_payments","resource_type":"model","package_name":"jaffle_shop","path":"staging/stg_payments.sql","original_file_path":"models/staging/stg_payments.sql","unique_id":"model.jaffle_shop.stg_payments","fqn":["jaffle_shop","staging","stg_payments"],"alias":"stg_payments","checksum":{"name":"sha256","checksum":"d3f3dbee2304a6e607827c605a513959def50b215bca27ba3970634ab9624c98"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"view","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"silver"},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"","columns":{"payment_id":{"name":"payment_id","description":"","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"payment_method":{"name":"payment_method","description":"","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":"silver"},"patch_path":"jaffle_shop://models/staging/schema.yml","build_path":null,"unrendered_config":{"materialized":"view","docs":{"node_color":"silver"}},"created_at":1730854360.841565,"config_call_dict":{},"relation_name":"\"jaffle_shop\".\"prod\".\"stg_payments\"","raw_code":"with source as (\n    \n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ source('jaffle-shop-data', 'raw_payments') }}\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed","language":"sql","refs":[],"sources":[["jaffle-shop-data","raw_payments"]],"metrics":[],"depends_on":{"macros":[],"nodes":["source.jaffle_shop.jaffle-shop-data.raw_payments"]},"compiled_path":"target-base/compiled/jaffle_shop/models/staging/stg_payments.sql","compiled":true,"compiled_code":"with source as (\n    select * from read_csv('jaffle-shop-data/raw_payments.csv', header = true, auto_detect = true)\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null,"defer_relation":null},"model.jaffle_shop.stg_orders":{"database":"jaffle_shop","schema":"prod","name":"stg_orders","resource_type":"model","package_name":"jaffle_shop","path":"staging/stg_orders.sql","original_file_path":"models/staging/stg_orders.sql","unique_id":"model.jaffle_shop.stg_orders","fqn":["jaffle_shop","staging","stg_orders"],"alias":"stg_orders","checksum":{"name":"sha256","checksum":"193b40dff284a3b9c31908a3b88d4ed4a0acdace36eae14a64911a21b52c3f33"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"view","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"silver"},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"","columns":{"order_id":{"name":"order_id","description":"","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"status":{"name":"status","description":"","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":"silver"},"patch_path":"jaffle_shop://models/staging/schema.yml","build_path":null,"unrendered_config":{"materialized":"view","docs":{"node_color":"silver"}},"created_at":1730854360.840975,"config_call_dict":{},"relation_name":"\"jaffle_shop\".\"prod\".\"stg_orders\"","raw_code":"with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ source('jaffle-shop-data', 'raw_orders') }}\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed","language":"sql","refs":[],"sources":[["jaffle-shop-data","raw_orders"]],"metrics":[],"depends_on":{"macros":[],"nodes":["source.jaffle_shop.jaffle-shop-data.raw_orders"]},"compiled_path":"target-base/compiled/jaffle_shop/models/staging/stg_orders.sql","compiled":true,"compiled_code":"with source as (\n    select * from read_csv('jaffle-shop-data/raw_orders.csv', header = true, auto_detect = true)\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null,"defer_relation":null},"test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"unique_customers_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_customers_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1","fqn":["jaffle_shop","unique_customers_customer_id"],"alias":"unique_customers_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.810034,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customers"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/unique_customers_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"prod\".\"customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"not_null_customers_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_customers_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d","fqn":["jaffle_shop","not_null_customers_customer_id"],"alias":"not_null_customers_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.811306,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customers"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/not_null_customers_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"prod\".\"customers\"\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.unique_customer_segments_customer_id.f3a5b61998":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"unique_customer_segments_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_customer_segments_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.unique_customer_segments_customer_id.f3a5b61998","fqn":["jaffle_shop","unique_customer_segments_customer_id"],"alias":"unique_customer_segments_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.812431,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customer_segments"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/unique_customer_segments_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"prod\".\"customer_segments\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_customer_segments_customer_id.bcd345d84b":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"not_null_customer_segments_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_customer_segments_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_customer_segments_customer_id.bcd345d84b","fqn":["jaffle_shop","not_null_customer_segments_customer_id"],"alias":"not_null_customer_segments_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.813527,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customer_segments"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/not_null_customer_segments_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"prod\".\"customer_segments\"\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.accepted_values_customer_segments_value_segment__High_Value__Medium_Value__Low_Value.089ad1c243":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"accepted_values_customer_segments_value_segment__High_Value__Medium_Value__Low_Value","resource_type":"test","package_name":"jaffle_shop","path":"accepted_values_customer_segme_9953bfc5b6269ad09e8130675fed4ab0.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.accepted_values_customer_segments_value_segment__High_Value__Medium_Value__Low_Value.089ad1c243","fqn":["jaffle_shop","accepted_values_customer_segments_value_segment__High_Value__Medium_Value__Low_Value"],"alias":"accepted_values_customer_segme_9953bfc5b6269ad09e8130675fed4ab0","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":"accepted_values_customer_segme_9953bfc5b6269ad09e8130675fed4ab0","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{"alias":"accepted_values_customer_segme_9953bfc5b6269ad09e8130675fed4ab0"},"created_at":1730854360.814633,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_customer_segme_9953bfc5b6269ad09e8130675fed4ab0\") }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customer_segments"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/accepted_values_customer_segme_9953bfc5b6269ad09e8130675fed4ab0.sql","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        value_segment as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"prod\".\"customer_segments\"\n    group by value_segment\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'High Value','Medium Value','Low Value'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.unique_customer_order_pattern_customer_id.99ad852c54":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"unique_customer_order_pattern_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_customer_order_pattern_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.unique_customer_order_pattern_customer_id.99ad852c54","fqn":["jaffle_shop","unique_customer_order_pattern_customer_id"],"alias":"unique_customer_order_pattern_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.821953,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customer_order_pattern"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/unique_customer_order_pattern_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"prod\".\"customer_order_pattern\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_customer_order_pattern_customer_id.3f8f4d52ea":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"not_null_customer_order_pattern_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_customer_order_pattern_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_customer_order_pattern_customer_id.3f8f4d52ea","fqn":["jaffle_shop","not_null_customer_order_pattern_customer_id"],"alias":"not_null_customer_order_pattern_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.823051,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customer_order_pattern"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/not_null_customer_order_pattern_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"prod\".\"customer_order_pattern\"\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.unique_orders_order_id.fed79b3a6e":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"unique_orders_order_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_orders_order_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.unique_orders_order_id.fed79b3a6e","fqn":["jaffle_shop","unique_orders_order_id"],"alias":"unique_orders_order_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.824137,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/unique_orders_order_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"prod\".\"orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_orders_order_id.cf6c17daed":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"not_null_orders_order_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_order_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_orders_order_id.cf6c17daed","fqn":["jaffle_shop","not_null_orders_order_id"],"alias":"not_null_orders_order_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.825227,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/not_null_orders_order_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_shop\".\"prod\".\"orders\"\nwhere order_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_orders_customer_id.c5f02694af":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"not_null_orders_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_orders_customer_id.c5f02694af","fqn":["jaffle_shop","not_null_orders_customer_id"],"alias":"not_null_orders_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.8264692,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/not_null_orders_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"prod\".\"orders\"\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"relationships_orders_customer_id__customer_id__ref_customers_","resource_type":"test","package_name":"jaffle_shop","path":"relationships_orders_customer_id__customer_id__ref_customers_.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2","fqn":["jaffle_shop","relationships_orders_customer_id__customer_id__ref_customers_"],"alias":"relationships_orders_customer_id__customer_id__ref_customers_","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.827565,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_relationships(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_relationships","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customers","model.jaffle_shop.orders"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/relationships_orders_customer_id__customer_id__ref_customers_.sql","compiled":true,"compiled_code":"\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"jaffle_shop\".\"prod\".\"orders\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"jaffle_shop\".\"prod\".\"customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"accepted_values_orders_status__placed__shipped__completed__return_pending__returned","resource_type":"test","package_name":"jaffle_shop","path":"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3","fqn":["jaffle_shop","accepted_values_orders_status__placed__shipped__completed__return_pending__returned"],"alias":"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{"alias":"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758"},"created_at":1730854360.831743,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758\") }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758.sql","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"prod\".\"orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_orders_amount.106140f9fd":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"not_null_orders_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_amount.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_orders_amount.106140f9fd","fqn":["jaffle_shop","not_null_orders_amount"],"alias":"not_null_orders_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.8350961,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/not_null_orders_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect amount\nfrom \"jaffle_shop\".\"prod\".\"orders\"\nwhere amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"not_null_orders_credit_card_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_credit_card_amount.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59","fqn":["jaffle_shop","not_null_orders_credit_card_amount"],"alias":"not_null_orders_credit_card_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.836191,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/not_null_orders_credit_card_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect credit_card_amount\nfrom \"jaffle_shop\".\"prod\".\"orders\"\nwhere credit_card_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"not_null_orders_coupon_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_coupon_amount.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625","fqn":["jaffle_shop","not_null_orders_coupon_amount"],"alias":"not_null_orders_coupon_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.8372638,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/not_null_orders_coupon_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect coupon_amount\nfrom \"jaffle_shop\".\"prod\".\"orders\"\nwhere coupon_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"not_null_orders_bank_transfer_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_bank_transfer_amount.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49","fqn":["jaffle_shop","not_null_orders_bank_transfer_amount"],"alias":"not_null_orders_bank_transfer_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.83837,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/not_null_orders_bank_transfer_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect bank_transfer_amount\nfrom \"jaffle_shop\".\"prod\".\"orders\"\nwhere bank_transfer_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"not_null_orders_gift_card_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_gift_card_amount.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a","fqn":["jaffle_shop","not_null_orders_gift_card_amount"],"alias":"not_null_orders_gift_card_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.839593,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target-base/compiled/jaffle_shop/models/schema.yml/not_null_orders_gift_card_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect gift_card_amount\nfrom \"jaffle_shop\".\"prod\".\"orders\"\nwhere gift_card_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.unique_stg_customers_customer_id.c7614daada":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"unique_stg_customers_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_stg_customers_customer_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.unique_stg_customers_customer_id.c7614daada","fqn":["jaffle_shop","staging","unique_stg_customers_customer_id"],"alias":"unique_stg_customers_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.841967,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_customers"]},"compiled_path":"target-base/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_customers_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"prod\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"not_null_stg_customers_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_stg_customers_customer_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa","fqn":["jaffle_shop","staging","not_null_stg_customers_customer_id"],"alias":"not_null_stg_customers_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.843081,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_customers"]},"compiled_path":"target-base/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_customers_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"prod\".\"stg_customers\"\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"unique_stg_orders_order_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_stg_orders_order_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a","fqn":["jaffle_shop","staging","unique_stg_orders_order_id"],"alias":"unique_stg_orders_order_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.8441641,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_orders"]},"compiled_path":"target-base/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_orders_order_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"prod\".\"stg_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"not_null_stg_orders_order_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_stg_orders_order_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64","fqn":["jaffle_shop","staging","not_null_stg_orders_order_id"],"alias":"not_null_stg_orders_order_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.845454,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_orders"]},"compiled_path":"target-base/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_orders_order_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_shop\".\"prod\".\"stg_orders\"\nwhere order_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned","resource_type":"test","package_name":"jaffle_shop","path":"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad","fqn":["jaffle_shop","staging","accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned"],"alias":"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{"alias":"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58"},"created_at":1730854360.846556,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58\") }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_orders"]},"compiled_path":"target-base/compiled/jaffle_shop/models/staging/schema.yml/accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"prod\".\"stg_orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.unique_stg_payments_payment_id.3744510712":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"unique_stg_payments_payment_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_stg_payments_payment_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.unique_stg_payments_payment_id.3744510712","fqn":["jaffle_shop","staging","unique_stg_payments_payment_id"],"alias":"unique_stg_payments_payment_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.849208,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_payments"]},"compiled_path":"target-base/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_payments_payment_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    payment_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"prod\".\"stg_payments\"\nwhere payment_id is not null\ngroup by payment_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"not_null_stg_payments_payment_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_stg_payments_payment_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075","fqn":["jaffle_shop","staging","not_null_stg_payments_payment_id"],"alias":"not_null_stg_payments_payment_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854360.850297,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_payments"]},"compiled_path":"target-base/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_payments_payment_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect payment_id\nfrom \"jaffle_shop\".\"prod\".\"stg_payments\"\nwhere payment_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278":{"database":"jaffle_shop","schema":"prod_dbt_test__audit","name":"accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card","resource_type":"test","package_name":"jaffle_shop","path":"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278","fqn":["jaffle_shop","staging","accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card"],"alias":"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{"alias":"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef"},"created_at":1730854360.8513951,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef\") }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_payments"]},"compiled_path":"target-base/compiled/jaffle_shop/models/staging/schema.yml/accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        payment_method as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"prod\".\"stg_payments\"\n    group by payment_method\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'credit_card','coupon','bank_transfer','gift_card'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"sql_operation.jaffle_shop.generated_868cc8eb56284aed99024f3cdd16d68e":{"database":"jaffle_shop","schema":"dev","name":"generated_868cc8eb56284aed99024f3cdd16d68e","resource_type":"sql_operation","package_name":"jaffle_shop","path":"sql/generated_868cc8eb56284aed99024f3cdd16d68e","original_file_path":"from remote system.sql","unique_id":"sql_operation.jaffle_shop.generated_868cc8eb56284aed99024f3cdd16d68e","fqn":["jaffle_shop","sql","generated_868cc8eb56284aed99024f3cdd16d68e"],"alias":"generated_868cc8eb56284aed99024f3cdd16d68e","checksum":{"name":"sha256","checksum":"3415f227d1f4806778fad5ec6a8cf1d32f5e29329002e9c925862506ae17b258"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true}},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":null,"build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730855403.353025,"config_call_dict":{},"relation_name":null,"raw_code":"SELECT\n    DATE_TRUNC('week', first_order) AS first_order_week,\n    AVG(customer_lifetime_value) AS avg_lifetime_value\nFROM\n    {{ ref(\"customers\") }}\nWHERE first_order is not NULL\nGROUP BY\n    first_order_week\nORDER BY\n    first_order_week;","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["model.jaffle_shop.customers"]},"compiled_path":"target/compiled/jaffle_shop/from remote system.sql/sql/generated_868cc8eb56284aed99024f3cdd16d68e","compiled":true,"compiled_code":"SELECT\n    DATE_TRUNC('week', first_order) AS first_order_week,\n    AVG(customer_lifetime_value) AS avg_lifetime_value\nFROM\n    \"jaffle_shop\".\"prod\".\"customers\"\nWHERE first_order is not NULL\nGROUP BY\n    first_order_week\nORDER BY\n    first_order_week;","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}}},"sources":{"source.jaffle_shop.jaffle-shop-data.raw_customers":{"database":"jaffle_shop","schema":"jaffle-shop-data","name":"raw_customers","resource_type":"source","package_name":"jaffle_shop","path":"models/staging/sources.yml","original_file_path":"models/staging/sources.yml","unique_id":"source.jaffle_shop.jaffle-shop-data.raw_customers","fqn":["jaffle_shop","staging","jaffle-shop-data","raw_customers"],"source_name":"jaffle-shop-data","source_description":"","loader":"","identifier":"raw_customers","quoting":{"database":null,"schema":null,"identifier":null,"column":null},"loaded_at_field":null,"freshness":{"warn_after":{"count":null,"period":null},"error_after":{"count":null,"period":null},"filter":null},"external":null,"description":"","columns":{},"meta":{"external_location":"read_csv('jaffle-shop-data/raw_customers.csv', header = true, auto_detect = true)"},"source_meta":{},"tags":[],"config":{"enabled":true},"patch_path":null,"unrendered_config":{},"relation_name":"read_csv('jaffle-shop-data/raw_customers.csv', header = true, auto_detect = true)","created_at":1730854360.890631},"source.jaffle_shop.jaffle-shop-data.raw_orders":{"database":"jaffle_shop","schema":"jaffle-shop-data","name":"raw_orders","resource_type":"source","package_name":"jaffle_shop","path":"models/staging/sources.yml","original_file_path":"models/staging/sources.yml","unique_id":"source.jaffle_shop.jaffle-shop-data.raw_orders","fqn":["jaffle_shop","staging","jaffle-shop-data","raw_orders"],"source_name":"jaffle-shop-data","source_description":"","loader":"","identifier":"raw_orders","quoting":{"database":null,"schema":null,"identifier":null,"column":null},"loaded_at_field":null,"freshness":{"warn_after":{"count":null,"period":null},"error_after":{"count":null,"period":null},"filter":null},"external":null,"description":"","columns":{},"meta":{"external_location":"read_csv('jaffle-shop-data/raw_orders.csv', header = true, auto_detect = true)"},"source_meta":{},"tags":[],"config":{"enabled":true},"patch_path":null,"unrendered_config":{},"relation_name":"read_csv('jaffle-shop-data/raw_orders.csv', header = true, auto_detect = true)","created_at":1730854360.890732},"source.jaffle_shop.jaffle-shop-data.raw_payments":{"database":"jaffle_shop","schema":"jaffle-shop-data","name":"raw_payments","resource_type":"source","package_name":"jaffle_shop","path":"models/staging/sources.yml","original_file_path":"models/staging/sources.yml","unique_id":"source.jaffle_shop.jaffle-shop-data.raw_payments","fqn":["jaffle_shop","staging","jaffle-shop-data","raw_payments"],"source_name":"jaffle-shop-data","source_description":"","loader":"","identifier":"raw_payments","quoting":{"database":null,"schema":null,"identifier":null,"column":null},"loaded_at_field":null,"freshness":{"warn_after":{"count":null,"period":null},"error_after":{"count":null,"period":null},"filter":null},"external":null,"description":"","columns":{},"meta":{"external_location":"read_csv('jaffle-shop-data/raw_payments.csv', header = true, auto_detect = true)"},"source_meta":{},"tags":[],"config":{"enabled":true},"patch_path":null,"unrendered_config":{},"relation_name":"read_csv('jaffle-shop-data/raw_payments.csv', header = true, auto_detect = true)","created_at":1730854360.890809}},"macros":{"macro.dbt_duckdb.duckdb__get_binding_char":{"name":"duckdb__get_binding_char","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/seed.sql","original_file_path":"macros/seed.sql","unique_id":"macro.dbt_duckdb.duckdb__get_binding_char","macro_sql":"{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.981396,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_batch_size":{"name":"duckdb__get_batch_size","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/seed.sql","original_file_path":"macros/seed.sql","unique_id":"macro.dbt_duckdb.duckdb__get_batch_size","macro_sql":"{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.981531,"supported_languages":null},"macro.dbt_duckdb.duckdb__load_csv_rows":{"name":"duckdb__load_csv_rows","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/seed.sql","original_file_path":"macros/seed.sql","unique_id":"macro.dbt_duckdb.duckdb__load_csv_rows","macro_sql":"{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set delimiter = config.get('delimiter', ',') %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE, DELIMITER '{{ delimiter }}')\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_batch_size","macro.dbt.get_seed_column_quoted_csv","macro.dbt.get_binding_char"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.983381,"supported_languages":null},"macro.dbt_duckdb.duckdb__snapshot_merge_sql":{"name":"duckdb__snapshot_merge_sql","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/snapshot_helper.sql","original_file_path":"macros/snapshot_helper.sql","unique_id":"macro.dbt_duckdb.duckdb__snapshot_merge_sql","macro_sql":"{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = DBT_INTERNAL_TARGET.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and DBT_INTERNAL_TARGET.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.9842792,"supported_languages":null},"macro.dbt_duckdb.build_snapshot_staging_table":{"name":"build_snapshot_staging_table","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/snapshot_helper.sql","original_file_path":"macros/snapshot_helper.sql","unique_id":"macro.dbt_duckdb.build_snapshot_staging_table","macro_sql":"{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.make_temp_relation","macro.dbt.snapshot_staging_table","macro.dbt.statement","macro.dbt.create_table_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.984713,"supported_languages":null},"macro.dbt_duckdb.duckdb__post_snapshot":{"name":"duckdb__post_snapshot","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/snapshot_helper.sql","original_file_path":"macros/snapshot_helper.sql","unique_id":"macro.dbt_duckdb.duckdb__post_snapshot","macro_sql":"{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.drop_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.984868,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_catalog":{"name":"duckdb__get_catalog","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/catalog.sql","original_file_path":"macros/catalog.sql","unique_id":"macro.dbt_duckdb.duckdb__get_catalog","macro_sql":"{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n        '{{ database }}' as table_database,\n        t.table_schema,\n        t.table_name,\n        t.table_type,\n        '' as table_comment,\n        c.column_name,\n        c.ordinal_position as column_index,\n        c.data_type column_type,\n        '' as column_comment,\n        '' as table_owner\n    FROM information_schema.tables t JOIN information_schema.columns c ON t.table_schema = c.table_schema AND t.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(t.table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    AND t.table_type IN ('BASE TABLE', 'VIEW')\n    ORDER BY\n        t.table_schema,\n        t.table_name,\n        c.ordinal_position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.985505,"supported_languages":null},"macro.dbt_duckdb.duckdb__create_schema":{"name":"duckdb__create_schema","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__create_schema","macro_sql":"{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {%- endcall -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.9929862,"supported_languages":null},"macro.dbt_duckdb.duckdb__drop_schema":{"name":"duckdb__drop_schema","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__drop_schema","macro_sql":"{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.993165,"supported_languages":null},"macro.dbt_duckdb.duckdb__list_schemas":{"name":"duckdb__list_schemas","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__list_schemas","macro_sql":"{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where catalog_name = '{{ database }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.99344,"supported_languages":null},"macro.dbt_duckdb.duckdb__check_schema_exists":{"name":"duckdb__check_schema_exists","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__check_schema_exists","macro_sql":"{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where schema_name = '{{ schema }}'\n        and catalog_name = '{{ information_schema.database }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.9936872,"supported_languages":null},"macro.dbt_duckdb.get_column_names":{"name":"get_column_names","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.get_column_names","macro_sql":"{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.994082,"supported_languages":null},"macro.dbt_duckdb.duckdb__create_table_as":{"name":"duckdb__create_table_as","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__create_table_as","macro_sql":"{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_assert_columns_equivalent","macro.dbt.get_table_columns_and_constraints","macro.dbt_duckdb.get_column_names","macro.dbt.get_select_subquery","macro.dbt_duckdb.py_write_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.995219,"supported_languages":null},"macro.dbt_duckdb.py_write_table":{"name":"py_write_table","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.py_write_table","macro_sql":"{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    con.execute('create table {{ relation }} as select * from df')\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.995391,"supported_languages":null},"macro.dbt_duckdb.duckdb__create_view_as":{"name":"duckdb__create_view_as","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__create_view_as","macro_sql":"{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_assert_columns_equivalent"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.995795,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_columns_in_relation":{"name":"duckdb__get_columns_in_relation","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__get_columns_in_relation","macro_sql":"{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and table_schema = '{{ relation.schema }}'\n      {% endif %}\n      {% if relation.database %}\n      and table_catalog = '{{ relation.database }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.sql_convert_columns_in_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.99628,"supported_languages":null},"macro.dbt_duckdb.duckdb__list_relations_without_caching":{"name":"duckdb__list_relations_without_caching","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__list_relations_without_caching","macro_sql":"{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n    and table_catalog = '{{ schema_relation.database }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.996605,"supported_languages":null},"macro.dbt_duckdb.duckdb__drop_relation":{"name":"duckdb__drop_relation","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__drop_relation","macro_sql":"{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.9968069,"supported_languages":null},"macro.dbt_duckdb.duckdb__rename_relation":{"name":"duckdb__rename_relation","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__rename_relation","macro_sql":"{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.997099,"supported_languages":null},"macro.dbt_duckdb.duckdb__make_temp_relation":{"name":"duckdb__make_temp_relation","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__make_temp_relation","macro_sql":"{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.py_current_timestring"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.997432,"supported_languages":null},"macro.dbt_duckdb.duckdb__current_timestamp":{"name":"duckdb__current_timestamp","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__current_timestamp","macro_sql":"{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.9975061,"supported_languages":null},"macro.dbt_duckdb.duckdb__snapshot_string_as_time":{"name":"duckdb__snapshot_string_as_time","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__snapshot_string_as_time","macro_sql":"{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.997671,"supported_languages":null},"macro.dbt_duckdb.duckdb__snapshot_get_time":{"name":"duckdb__snapshot_get_time","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__snapshot_get_time","macro_sql":"{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.current_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.997772,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_incremental_default_sql":{"name":"duckdb__get_incremental_default_sql","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__get_incremental_default_sql","macro_sql":"{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_incremental_delete_insert_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.9979131,"supported_languages":null},"macro.dbt_duckdb.location_exists":{"name":"location_exists","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.location_exists","macro_sql":"{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.998059,"supported_languages":null},"macro.dbt_duckdb.write_to_file":{"name":"write_to_file","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.write_to_file","macro_sql":"{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.998267,"supported_languages":null},"macro.dbt_duckdb.store_relation":{"name":"store_relation","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.store_relation","macro_sql":"{% macro store_relation(plugin, relation, location, format, config) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format, config) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.9985542,"supported_languages":null},"macro.dbt_duckdb.render_write_options":{"name":"render_write_options","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.render_write_options","macro_sql":"{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% if options is not mapping %}\n    {% do exceptions.raise_compiler_error(\"The options argument must be a dictionary\") %}\n  {% endif %}\n\n  {% for k in options %}\n    {% set _ = options.update({k: render(options[k])}) %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854359.999556,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql":{"name":"duckdb__get_delete_insert_merge_sql","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/incremental_helper.sql","original_file_path":"macros/incremental_helper.sql","unique_id":"macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql","macro_sql":"{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.get_quoted_csv"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.002312,"supported_languages":null},"macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns":{"name":"duckdb__alter_relation_add_remove_columns","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/columns.sql","original_file_path":"macros/columns.sql","unique_id":"macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns","macro_sql":"{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ column.name }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ column.name }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.003276,"supported_languages":null},"macro.dbt_duckdb.materialization_table_duckdb":{"name":"materialization_table_duckdb","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/materializations/table.sql","original_file_path":"macros/materializations/table.sql","unique_id":"macro.dbt_duckdb.materialization_table_duckdb","macro_sql":"{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks","macro.dbt.statement","macro.dbt.create_table_as","macro.dbt.create_indexes","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.006033,"supported_languages":["sql","python"]},"macro.dbt_duckdb.materialization_external_duckdb":{"name":"materialization_external_duckdb","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/materializations/external.sql","original_file_path":"macros/materializations/external.sql","unique_id":"macro.dbt_duckdb.materialization_external_duckdb","macro_sql":"{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n  {%- set format = config.get('format', 'parquet') -%}\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- write an temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n  -- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    create or replace view {{ intermediate_relation }} as (\n        select * from '{{ read_location }}'\n    );\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format, config) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt_duckdb.external_location","macro.dbt_duckdb.render_write_options","macro.dbt.load_cached_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks","macro.dbt.statement","macro.dbt.create_table_as","macro.dbt_duckdb.write_to_file","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs","macro.dbt_duckdb.store_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.011002,"supported_languages":["sql","python"]},"macro.dbt_duckdb.materialization_incremental_duckdb":{"name":"materialization_incremental_duckdb","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/materializations/incremental.sql","original_file_path":"macros/materializations/incremental.sql","unique_id":"macro.dbt_duckdb.materialization_incremental_duckdb","macro_sql":"{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(True, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_temp_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.should_full_refresh","macro.dbt.incremental_validate_on_schema_change","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks","macro.dbt.create_table_as","macro.dbt.statement","macro.dbt.run_query","macro.dbt.process_schema_changes","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs","macro.dbt.create_indexes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.016437,"supported_languages":["sql","python"]},"macro.dbt_duckdb.duckdb__dateadd":{"name":"duckdb__dateadd","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/dateadd.sql","original_file_path":"macros/utils/dateadd.sql","unique_id":"macro.dbt_duckdb.duckdb__dateadd","macro_sql":"{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.0166762,"supported_languages":null},"macro.dbt_duckdb.duckdb__listagg":{"name":"duckdb__listagg","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/listagg.sql","original_file_path":"macros/utils/listagg.sql","unique_id":"macro.dbt_duckdb.duckdb__listagg","macro_sql":"{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.017805,"supported_languages":null},"macro.dbt_duckdb.duckdb__datediff":{"name":"duckdb__datediff","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/datediff.sql","original_file_path":"macros/utils/datediff.sql","unique_id":"macro.dbt_duckdb.duckdb__datediff","macro_sql":"{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.datediff"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.02094,"supported_languages":null},"macro.dbt_duckdb.duckdb__any_value":{"name":"duckdb__any_value","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/any_value.sql","original_file_path":"macros/utils/any_value.sql","unique_id":"macro.dbt_duckdb.duckdb__any_value","macro_sql":"{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.021086,"supported_languages":null},"macro.dbt_duckdb.register_upstream_external_models":{"name":"register_upstream_external_models","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/upstream.sql","original_file_path":"macros/utils/upstream.sql","unique_id":"macro.dbt_duckdb.register_upstream_external_models","macro_sql":"{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt_duckdb.external_location","macro.dbt_duckdb.render_write_options","macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.0234911,"supported_languages":null},"macro.dbt_duckdb.duckdb__split_part":{"name":"duckdb__split_part","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/splitpart.sql","original_file_path":"macros/utils/splitpart.sql","unique_id":"macro.dbt_duckdb.duckdb__split_part","macro_sql":"{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.023705,"supported_languages":null},"macro.dbt_duckdb.duckdb__last_day":{"name":"duckdb__last_day","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/lastday.sql","original_file_path":"macros/utils/lastday.sql","unique_id":"macro.dbt_duckdb.duckdb__last_day","macro_sql":"{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.dateadd","macro.dbt.date_trunc","macro.dbt.default_last_day"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.024183,"supported_languages":null},"macro.dbt_duckdb.external_location":{"name":"external_location","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/external_location.sql","original_file_path":"macros/utils/external_location.sql","unique_id":"macro.dbt_duckdb.external_location","macro_sql":"{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.024707,"supported_languages":null},"macro.dbt.run_hooks":{"name":"run_hooks","resource_type":"macro","package_name":"dbt","path":"macros/materializations/hooks.sql","original_file_path":"macros/materializations/hooks.sql","unique_id":"macro.dbt.run_hooks","macro_sql":"{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.025764,"supported_languages":null},"macro.dbt.make_hook_config":{"name":"make_hook_config","resource_type":"macro","package_name":"dbt","path":"macros/materializations/hooks.sql","original_file_path":"macros/materializations/hooks.sql","unique_id":"macro.dbt.make_hook_config","macro_sql":"{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.025957,"supported_languages":null},"macro.dbt.before_begin":{"name":"before_begin","resource_type":"macro","package_name":"dbt","path":"macros/materializations/hooks.sql","original_file_path":"macros/materializations/hooks.sql","unique_id":"macro.dbt.before_begin","macro_sql":"{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.make_hook_config"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.026093,"supported_languages":null},"macro.dbt.in_transaction":{"name":"in_transaction","resource_type":"macro","package_name":"dbt","path":"macros/materializations/hooks.sql","original_file_path":"macros/materializations/hooks.sql","unique_id":"macro.dbt.in_transaction","macro_sql":"{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.make_hook_config"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.026227,"supported_languages":null},"macro.dbt.after_commit":{"name":"after_commit","resource_type":"macro","package_name":"dbt","path":"macros/materializations/hooks.sql","original_file_path":"macros/materializations/hooks.sql","unique_id":"macro.dbt.after_commit","macro_sql":"{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.make_hook_config"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.0263638,"supported_languages":null},"macro.dbt.set_sql_header":{"name":"set_sql_header","resource_type":"macro","package_name":"dbt","path":"macros/materializations/configs.sql","original_file_path":"macros/materializations/configs.sql","unique_id":"macro.dbt.set_sql_header","macro_sql":"{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.0267148,"supported_languages":null},"macro.dbt.should_full_refresh":{"name":"should_full_refresh","resource_type":"macro","package_name":"dbt","path":"macros/materializations/configs.sql","original_file_path":"macros/materializations/configs.sql","unique_id":"macro.dbt.should_full_refresh","macro_sql":"{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.027005,"supported_languages":null},"macro.dbt.should_store_failures":{"name":"should_store_failures","resource_type":"macro","package_name":"dbt","path":"macros/materializations/configs.sql","original_file_path":"macros/materializations/configs.sql","unique_id":"macro.dbt.should_store_failures","macro_sql":"{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.027373,"supported_languages":null},"macro.dbt.snapshot_merge_sql":{"name":"snapshot_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/snapshot_merge.sql","original_file_path":"macros/materializations/snapshots/snapshot_merge.sql","unique_id":"macro.dbt.snapshot_merge_sql","macro_sql":"{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.02787,"supported_languages":null},"macro.dbt.default__snapshot_merge_sql":{"name":"default__snapshot_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/snapshot_merge.sql","original_file_path":"macros/materializations/snapshots/snapshot_merge.sql","unique_id":"macro.dbt.default__snapshot_merge_sql","macro_sql":"{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.0281742,"supported_languages":null},"macro.dbt.strategy_dispatch":{"name":"strategy_dispatch","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.strategy_dispatch","macro_sql":"{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.0316858,"supported_languages":null},"macro.dbt.snapshot_hash_arguments":{"name":"snapshot_hash_arguments","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.snapshot_hash_arguments","macro_sql":"{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__snapshot_hash_arguments"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.03185,"supported_languages":null},"macro.dbt.default__snapshot_hash_arguments":{"name":"default__snapshot_hash_arguments","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.default__snapshot_hash_arguments","macro_sql":"{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.032063,"supported_languages":null},"macro.dbt.snapshot_timestamp_strategy":{"name":"snapshot_timestamp_strategy","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.snapshot_timestamp_strategy","macro_sql":"{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.snapshot_hash_arguments"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.032744,"supported_languages":null},"macro.dbt.snapshot_string_as_time":{"name":"snapshot_string_as_time","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.snapshot_string_as_time","macro_sql":"{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.032906,"supported_languages":null},"macro.dbt.default__snapshot_string_as_time":{"name":"default__snapshot_string_as_time","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.default__snapshot_string_as_time","macro_sql":"{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.033068,"supported_languages":null},"macro.dbt.snapshot_check_all_get_existing_columns":{"name":"snapshot_check_all_get_existing_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.snapshot_check_all_get_existing_columns","macro_sql":"{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.get_columns_in_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.034407,"supported_languages":null},"macro.dbt.snapshot_check_strategy":{"name":"snapshot_check_strategy","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.snapshot_check_strategy","macro_sql":"{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.snapshot_get_time","macro.dbt.snapshot_check_all_get_existing_columns","macro.dbt.get_true_sql","macro.dbt.snapshot_hash_arguments"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.035705,"supported_languages":null},"macro.dbt.create_columns":{"name":"create_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.create_columns","macro_sql":"{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__create_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.039753,"supported_languages":null},"macro.dbt.default__create_columns":{"name":"default__create_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.default__create_columns","macro_sql":"{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.04002,"supported_languages":null},"macro.dbt.post_snapshot":{"name":"post_snapshot","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.post_snapshot","macro_sql":"{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__post_snapshot"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.040182,"supported_languages":null},"macro.dbt.default__post_snapshot":{"name":"default__post_snapshot","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.default__post_snapshot","macro_sql":"{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.040267,"supported_languages":null},"macro.dbt.get_true_sql":{"name":"get_true_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.get_true_sql","macro_sql":"{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_true_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.040404,"supported_languages":null},"macro.dbt.default__get_true_sql":{"name":"default__get_true_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.default__get_true_sql","macro_sql":"{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.040514,"supported_languages":null},"macro.dbt.snapshot_staging_table":{"name":"snapshot_staging_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.snapshot_staging_table","macro_sql":"{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__snapshot_staging_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.040708,"supported_languages":null},"macro.dbt.default__snapshot_staging_table":{"name":"default__snapshot_staging_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.default__snapshot_staging_table","macro_sql":"{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.snapshot_get_time"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.041547,"supported_languages":null},"macro.dbt.build_snapshot_table":{"name":"build_snapshot_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.build_snapshot_table","macro_sql":"{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__build_snapshot_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.041727,"supported_languages":null},"macro.dbt.default__build_snapshot_table":{"name":"default__build_snapshot_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.default__build_snapshot_table","macro_sql":"{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.041965,"supported_languages":null},"macro.dbt.build_snapshot_staging_table":{"name":"build_snapshot_staging_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.build_snapshot_staging_table","macro_sql":"{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.make_temp_relation","macro.dbt.snapshot_staging_table","macro.dbt.statement","macro.dbt.create_table_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.0423748,"supported_languages":null},"macro.dbt.materialization_snapshot_default":{"name":"materialization_snapshot_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/snapshot.sql","original_file_path":"macros/materializations/snapshots/snapshot.sql","unique_id":"macro.dbt.materialization_snapshot_default","macro_sql":"{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt.get_or_create_relation","macro.dbt.run_hooks","macro.dbt.strategy_dispatch","macro.dbt.build_snapshot_table","macro.dbt.create_table_as","macro.dbt.build_snapshot_staging_table","macro.dbt.create_columns","macro.dbt.snapshot_merge_sql","macro.dbt.statement","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs","macro.dbt.create_indexes","macro.dbt.post_snapshot"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.048465,"supported_languages":["sql"]},"macro.dbt.materialization_test_default":{"name":"materialization_test_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/test.sql","original_file_path":"macros/materializations/tests/test.sql","unique_id":"macro.dbt.materialization_test_default","macro_sql":"{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}","depends_on":{"macros":["macro.dbt.should_store_failures","macro.dbt.statement","macro.dbt.get_create_sql","macro.dbt.get_test_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.051042,"supported_languages":["sql"]},"macro.dbt.get_test_sql":{"name":"get_test_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/helpers.sql","original_file_path":"macros/materializations/tests/helpers.sql","unique_id":"macro.dbt.get_test_sql","macro_sql":"{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_test_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.051467,"supported_languages":null},"macro.dbt.default__get_test_sql":{"name":"default__get_test_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/helpers.sql","original_file_path":"macros/materializations/tests/helpers.sql","unique_id":"macro.dbt.default__get_test_sql","macro_sql":"{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.051758,"supported_languages":null},"macro.dbt.get_where_subquery":{"name":"get_where_subquery","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/where_subquery.sql","original_file_path":"macros/materializations/tests/where_subquery.sql","unique_id":"macro.dbt.get_where_subquery","macro_sql":"{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_where_subquery"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.0521128,"supported_languages":null},"macro.dbt.default__get_where_subquery":{"name":"default__get_where_subquery","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/where_subquery.sql","original_file_path":"macros/materializations/tests/where_subquery.sql","unique_id":"macro.dbt.default__get_where_subquery","macro_sql":"{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.05247,"supported_languages":null},"macro.dbt.materialization_unit_default":{"name":"materialization_unit_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/unit.sql","original_file_path":"macros/materializations/tests/unit.sql","unique_id":"macro.dbt.materialization_unit_default","macro_sql":"{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}","depends_on":{"macros":["macro.dbt.get_columns_in_query","macro.dbt.make_temp_relation","macro.dbt.run_query","macro.dbt.get_create_table_as_sql","macro.dbt.get_empty_subquery_sql","macro.dbt.get_expected_sql","macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.054136,"supported_languages":["sql"]},"macro.dbt.materialization_materialized_view_default":{"name":"materialization_materialized_view_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialization_materialized_view_default","macro_sql":"{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.materialized_view_setup","macro.dbt.materialized_view_get_build_sql","macro.dbt.materialized_view_execute_no_op","macro.dbt.materialized_view_execute_build_sql","macro.dbt.materialized_view_teardown"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.059006,"supported_languages":["sql"]},"macro.dbt.materialized_view_setup":{"name":"materialized_view_setup","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialized_view_setup","macro_sql":"{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.059375,"supported_languages":null},"macro.dbt.materialized_view_teardown":{"name":"materialized_view_teardown","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialized_view_teardown","macro_sql":"{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.0596118,"supported_languages":null},"macro.dbt.materialized_view_get_build_sql":{"name":"materialized_view_get_build_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialized_view_get_build_sql","macro_sql":"{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.should_full_refresh","macro.dbt.get_create_materialized_view_as_sql","macro.dbt.get_replace_sql","macro.dbt.get_materialized_view_configuration_changes","macro.dbt.refresh_materialized_view","macro.dbt.get_alter_materialized_view_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.060897,"supported_languages":null},"macro.dbt.materialized_view_execute_no_op":{"name":"materialized_view_execute_no_op","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialized_view_execute_no_op","macro_sql":"{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.061322,"supported_languages":null},"macro.dbt.materialized_view_execute_build_sql":{"name":"materialized_view_execute_build_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialized_view_execute_build_sql","macro_sql":"{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_hooks","macro.dbt.statement","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.061942,"supported_languages":null},"macro.dbt.materialization_view_default":{"name":"materialization_view_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/view.sql","original_file_path":"macros/materializations/models/view.sql","unique_id":"macro.dbt.materialization_view_default","macro_sql":"{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.run_hooks","macro.dbt.drop_relation_if_exists","macro.dbt.statement","macro.dbt.get_create_view_as_sql","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.064647,"supported_languages":["sql"]},"macro.dbt.materialization_table_default":{"name":"materialization_table_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/table.sql","original_file_path":"macros/materializations/models/table.sql","unique_id":"macro.dbt.materialization_table_default","macro_sql":"{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks","macro.dbt.statement","macro.dbt.get_create_table_as_sql","macro.dbt.create_indexes","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.067353,"supported_languages":["sql"]},"macro.dbt.get_quoted_csv":{"name":"get_quoted_csv","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","original_file_path":"macros/materializations/models/incremental/column_helpers.sql","unique_id":"macro.dbt.get_quoted_csv","macro_sql":"{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.068871,"supported_languages":null},"macro.dbt.diff_columns":{"name":"diff_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","original_file_path":"macros/materializations/models/incremental/column_helpers.sql","unique_id":"macro.dbt.diff_columns","macro_sql":"{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.06939,"supported_languages":null},"macro.dbt.diff_column_data_types":{"name":"diff_column_data_types","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","original_file_path":"macros/materializations/models/incremental/column_helpers.sql","unique_id":"macro.dbt.diff_column_data_types","macro_sql":"{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.070016,"supported_languages":null},"macro.dbt.get_merge_update_columns":{"name":"get_merge_update_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","original_file_path":"macros/materializations/models/incremental/column_helpers.sql","unique_id":"macro.dbt.get_merge_update_columns","macro_sql":"{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_merge_update_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.070241,"supported_languages":null},"macro.dbt.default__get_merge_update_columns":{"name":"default__get_merge_update_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","original_file_path":"macros/materializations/models/incremental/column_helpers.sql","unique_id":"macro.dbt.default__get_merge_update_columns","macro_sql":"{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.0709171,"supported_languages":null},"macro.dbt.get_merge_sql":{"name":"get_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.get_merge_sql","macro_sql":"{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.077454,"supported_languages":null},"macro.dbt.default__get_merge_sql":{"name":"default__get_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.default__get_merge_sql","macro_sql":"{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_quoted_csv","macro.dbt.get_merge_update_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.079048,"supported_languages":null},"macro.dbt.get_delete_insert_merge_sql":{"name":"get_delete_insert_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.get_delete_insert_merge_sql","macro_sql":"{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.079297,"supported_languages":null},"macro.dbt.default__get_delete_insert_merge_sql":{"name":"default__get_delete_insert_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.default__get_delete_insert_merge_sql","macro_sql":"{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.get_quoted_csv"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.08025,"supported_languages":null},"macro.dbt.get_insert_overwrite_merge_sql":{"name":"get_insert_overwrite_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.get_insert_overwrite_merge_sql","macro_sql":"{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_insert_overwrite_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.080514,"supported_languages":null},"macro.dbt.default__get_insert_overwrite_merge_sql":{"name":"default__get_insert_overwrite_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.default__get_insert_overwrite_merge_sql","macro_sql":"{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_quoted_csv"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.081128,"supported_languages":null},"macro.dbt.is_incremental":{"name":"is_incremental","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/is_incremental.sql","original_file_path":"macros/materializations/models/incremental/is_incremental.sql","unique_id":"macro.dbt.is_incremental","macro_sql":"{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.should_full_refresh"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.081729,"supported_languages":null},"macro.dbt.get_incremental_append_sql":{"name":"get_incremental_append_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_incremental_append_sql","macro_sql":"{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_incremental_append_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.082568,"supported_languages":null},"macro.dbt.default__get_incremental_append_sql":{"name":"default__get_incremental_append_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.default__get_incremental_append_sql","macro_sql":"{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_insert_into_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.082797,"supported_languages":null},"macro.dbt.get_incremental_delete_insert_sql":{"name":"get_incremental_delete_insert_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_incremental_delete_insert_sql","macro_sql":"{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_incremental_delete_insert_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.082974,"supported_languages":null},"macro.dbt.default__get_incremental_delete_insert_sql":{"name":"default__get_incremental_delete_insert_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.default__get_incremental_delete_insert_sql","macro_sql":"{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_delete_insert_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.083254,"supported_languages":null},"macro.dbt.get_incremental_merge_sql":{"name":"get_incremental_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_incremental_merge_sql","macro_sql":"{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_incremental_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.0834298,"supported_languages":null},"macro.dbt.default__get_incremental_merge_sql":{"name":"default__get_incremental_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.default__get_incremental_merge_sql","macro_sql":"{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.083711,"supported_languages":null},"macro.dbt.get_incremental_insert_overwrite_sql":{"name":"get_incremental_insert_overwrite_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_incremental_insert_overwrite_sql","macro_sql":"{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_incremental_insert_overwrite_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.083889,"supported_languages":null},"macro.dbt.default__get_incremental_insert_overwrite_sql":{"name":"default__get_incremental_insert_overwrite_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.default__get_incremental_insert_overwrite_sql","macro_sql":"{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_insert_overwrite_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.084137,"supported_languages":null},"macro.dbt.get_incremental_default_sql":{"name":"get_incremental_default_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_incremental_default_sql","macro_sql":"{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.084312,"supported_languages":null},"macro.dbt.default__get_incremental_default_sql":{"name":"default__get_incremental_default_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.default__get_incremental_default_sql","macro_sql":"{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_incremental_append_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.084456,"supported_languages":null},"macro.dbt.get_insert_into_sql":{"name":"get_insert_into_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_insert_into_sql","macro_sql":"{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_quoted_csv"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.084714,"supported_languages":null},"macro.dbt.materialization_incremental_default":{"name":"materialization_incremental_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/incremental.sql","original_file_path":"macros/materializations/models/incremental/incremental.sql","unique_id":"macro.dbt.materialization_incremental_default","macro_sql":"{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_temp_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.should_full_refresh","macro.dbt.incremental_validate_on_schema_change","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks","macro.dbt.get_create_table_as_sql","macro.dbt.run_query","macro.dbt.process_schema_changes","macro.dbt.statement","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs","macro.dbt.create_indexes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.089489,"supported_languages":["sql"]},"macro.dbt.incremental_validate_on_schema_change":{"name":"incremental_validate_on_schema_change","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","original_file_path":"macros/materializations/models/incremental/on_schema_change.sql","unique_id":"macro.dbt.incremental_validate_on_schema_change","macro_sql":"{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.094999,"supported_languages":null},"macro.dbt.check_for_schema_changes":{"name":"check_for_schema_changes","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","original_file_path":"macros/materializations/models/incremental/on_schema_change.sql","unique_id":"macro.dbt.check_for_schema_changes","macro_sql":"{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.diff_columns","macro.dbt.diff_column_data_types"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.0961542,"supported_languages":null},"macro.dbt.sync_column_schemas":{"name":"sync_column_schemas","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","original_file_path":"macros/materializations/models/incremental/on_schema_change.sql","unique_id":"macro.dbt.sync_column_schemas","macro_sql":"{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.alter_relation_add_remove_columns","macro.dbt.alter_column_type"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.097284,"supported_languages":null},"macro.dbt.process_schema_changes":{"name":"process_schema_changes","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","original_file_path":"macros/materializations/models/incremental/on_schema_change.sql","unique_id":"macro.dbt.process_schema_changes","macro_sql":"{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.check_for_schema_changes","macro.dbt.sync_column_schemas"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.0980768,"supported_languages":null},"macro.dbt.can_clone_table":{"name":"can_clone_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/clone/can_clone_table.sql","original_file_path":"macros/materializations/models/clone/can_clone_table.sql","unique_id":"macro.dbt.can_clone_table","macro_sql":"{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__can_clone_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.098303,"supported_languages":null},"macro.dbt.default__can_clone_table":{"name":"default__can_clone_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/clone/can_clone_table.sql","original_file_path":"macros/materializations/models/clone/can_clone_table.sql","unique_id":"macro.dbt.default__can_clone_table","macro_sql":"{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.0984142,"supported_languages":null},"macro.dbt.create_or_replace_clone":{"name":"create_or_replace_clone","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/clone/create_or_replace_clone.sql","original_file_path":"macros/materializations/models/clone/create_or_replace_clone.sql","unique_id":"macro.dbt.create_or_replace_clone","macro_sql":"{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__create_or_replace_clone"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.098688,"supported_languages":null},"macro.dbt.default__create_or_replace_clone":{"name":"default__create_or_replace_clone","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/clone/create_or_replace_clone.sql","original_file_path":"macros/materializations/models/clone/create_or_replace_clone.sql","unique_id":"macro.dbt.default__create_or_replace_clone","macro_sql":"{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.098811,"supported_languages":null},"macro.dbt.materialization_clone_default":{"name":"materialization_clone_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/clone/clone.sql","original_file_path":"macros/materializations/models/clone/clone.sql","unique_id":"macro.dbt.materialization_clone_default","macro_sql":"{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.can_clone_table","macro.dbt.drop_relation_if_exists","macro.dbt.statement","macro.dbt.create_or_replace_clone","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.102272,"supported_languages":["sql"]},"macro.dbt.materialization_seed_default":{"name":"materialization_seed_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/seed.sql","original_file_path":"macros/materializations/seeds/seed.sql","unique_id":"macro.dbt.materialization_seed_default","macro_sql":"{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt.should_full_refresh","macro.dbt.run_hooks","macro.dbt.reset_csv_table","macro.dbt.create_csv_table","macro.dbt.load_csv_rows","macro.dbt.noop_statement","macro.dbt.get_csv_sql","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs","macro.dbt.create_indexes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.105315,"supported_languages":["sql"]},"macro.dbt.create_csv_table":{"name":"create_csv_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.create_csv_table","macro_sql":"{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__create_csv_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1103518,"supported_languages":null},"macro.dbt.default__create_csv_table":{"name":"default__create_csv_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__create_csv_table","macro_sql":"{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1112242,"supported_languages":null},"macro.dbt.reset_csv_table":{"name":"reset_csv_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.reset_csv_table","macro_sql":"{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__reset_csv_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.111447,"supported_languages":null},"macro.dbt.default__reset_csv_table":{"name":"default__reset_csv_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__reset_csv_table","macro_sql":"{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.create_csv_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1119099,"supported_languages":null},"macro.dbt.get_csv_sql":{"name":"get_csv_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.get_csv_sql","macro_sql":"{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_csv_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.112094,"supported_languages":null},"macro.dbt.default__get_csv_sql":{"name":"default__get_csv_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__get_csv_sql","macro_sql":"{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.112221,"supported_languages":null},"macro.dbt.get_binding_char":{"name":"get_binding_char","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.get_binding_char","macro_sql":"{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_binding_char"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.112352,"supported_languages":null},"macro.dbt.default__get_binding_char":{"name":"default__get_binding_char","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__get_binding_char","macro_sql":"{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.112462,"supported_languages":null},"macro.dbt.get_batch_size":{"name":"get_batch_size","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.get_batch_size","macro_sql":"{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_batch_size"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1126149,"supported_languages":null},"macro.dbt.default__get_batch_size":{"name":"default__get_batch_size","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__get_batch_size","macro_sql":"{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.112725,"supported_languages":null},"macro.dbt.get_seed_column_quoted_csv":{"name":"get_seed_column_quoted_csv","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.get_seed_column_quoted_csv","macro_sql":"{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.113172,"supported_languages":null},"macro.dbt.load_csv_rows":{"name":"load_csv_rows","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.load_csv_rows","macro_sql":"{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__load_csv_rows"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.113347,"supported_languages":null},"macro.dbt.default__load_csv_rows":{"name":"default__load_csv_rows","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__load_csv_rows","macro_sql":"{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_batch_size","macro.dbt.get_seed_column_quoted_csv","macro.dbt.get_binding_char"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1145442,"supported_languages":null},"macro.dbt.generate_alias_name":{"name":"generate_alias_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_alias.sql","original_file_path":"macros/get_custom_name/get_custom_alias.sql","unique_id":"macro.dbt.generate_alias_name","macro_sql":"{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__generate_alias_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1149492,"supported_languages":null},"macro.dbt.default__generate_alias_name":{"name":"default__generate_alias_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_alias.sql","original_file_path":"macros/get_custom_name/get_custom_alias.sql","unique_id":"macro.dbt.default__generate_alias_name","macro_sql":"{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.115306,"supported_languages":null},"macro.dbt.generate_schema_name":{"name":"generate_schema_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_schema.sql","original_file_path":"macros/get_custom_name/get_custom_schema.sql","unique_id":"macro.dbt.generate_schema_name","macro_sql":"{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__generate_schema_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1157959,"supported_languages":null},"macro.dbt.default__generate_schema_name":{"name":"default__generate_schema_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_schema.sql","original_file_path":"macros/get_custom_name/get_custom_schema.sql","unique_id":"macro.dbt.default__generate_schema_name","macro_sql":"{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.116043,"supported_languages":null},"macro.dbt.generate_schema_name_for_env":{"name":"generate_schema_name_for_env","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_schema.sql","original_file_path":"macros/get_custom_name/get_custom_schema.sql","unique_id":"macro.dbt.generate_schema_name_for_env","macro_sql":"{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.116311,"supported_languages":null},"macro.dbt.generate_database_name":{"name":"generate_database_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_database.sql","original_file_path":"macros/get_custom_name/get_custom_database.sql","unique_id":"macro.dbt.generate_database_name","macro_sql":"{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__generate_database_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.11668,"supported_languages":null},"macro.dbt.default__generate_database_name":{"name":"default__generate_database_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_database.sql","original_file_path":"macros/get_custom_name/get_custom_database.sql","unique_id":"macro.dbt.default__generate_database_name","macro_sql":"{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.116914,"supported_languages":null},"macro.dbt.get_drop_sql":{"name":"get_drop_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop.sql","original_file_path":"macros/relations/drop.sql","unique_id":"macro.dbt.get_drop_sql","macro_sql":"{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_drop_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.117584,"supported_languages":null},"macro.dbt.default__get_drop_sql":{"name":"default__get_drop_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop.sql","original_file_path":"macros/relations/drop.sql","unique_id":"macro.dbt.default__get_drop_sql","macro_sql":"{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.drop_view","macro.dbt.drop_table","macro.dbt.drop_materialized_view"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.117929,"supported_languages":null},"macro.dbt.drop_relation":{"name":"drop_relation","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop.sql","original_file_path":"macros/relations/drop.sql","unique_id":"macro.dbt.drop_relation","macro_sql":"{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__drop_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.118101,"supported_languages":null},"macro.dbt.default__drop_relation":{"name":"default__drop_relation","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop.sql","original_file_path":"macros/relations/drop.sql","unique_id":"macro.dbt.default__drop_relation","macro_sql":"{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.get_drop_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.118289,"supported_languages":null},"macro.dbt.drop_relation_if_exists":{"name":"drop_relation_if_exists","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop.sql","original_file_path":"macros/relations/drop.sql","unique_id":"macro.dbt.drop_relation_if_exists","macro_sql":"{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1184692,"supported_languages":null},"macro.dbt.get_replace_sql":{"name":"get_replace_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/replace.sql","original_file_path":"macros/relations/replace.sql","unique_id":"macro.dbt.get_replace_sql","macro_sql":"{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_replace_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.119204,"supported_languages":null},"macro.dbt.default__get_replace_sql":{"name":"default__get_replace_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/replace.sql","original_file_path":"macros/relations/replace.sql","unique_id":"macro.dbt.default__get_replace_sql","macro_sql":"{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_replace_view_sql","macro.dbt.get_replace_table_sql","macro.dbt.get_replace_materialized_view_sql","macro.dbt.get_create_intermediate_sql","macro.dbt.get_create_backup_sql","macro.dbt.get_rename_intermediate_sql","macro.dbt.get_drop_backup_sql","macro.dbt.get_drop_sql","macro.dbt.get_create_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1204321,"supported_languages":null},"macro.dbt.get_create_intermediate_sql":{"name":"get_create_intermediate_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create_intermediate.sql","original_file_path":"macros/relations/create_intermediate.sql","unique_id":"macro.dbt.get_create_intermediate_sql","macro_sql":"{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_create_intermediate_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.120793,"supported_languages":null},"macro.dbt.default__get_create_intermediate_sql":{"name":"default__get_create_intermediate_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create_intermediate.sql","original_file_path":"macros/relations/create_intermediate.sql","unique_id":"macro.dbt.default__get_create_intermediate_sql","macro_sql":"{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.make_intermediate_relation","macro.dbt.get_drop_sql","macro.dbt.get_create_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.121033,"supported_languages":null},"macro.dbt.drop_schema_named":{"name":"drop_schema_named","resource_type":"macro","package_name":"dbt","path":"macros/relations/schema.sql","original_file_path":"macros/relations/schema.sql","unique_id":"macro.dbt.drop_schema_named","macro_sql":"{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__drop_schema_named"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.121299,"supported_languages":null},"macro.dbt.default__drop_schema_named":{"name":"default__drop_schema_named","resource_type":"macro","package_name":"dbt","path":"macros/relations/schema.sql","original_file_path":"macros/relations/schema.sql","unique_id":"macro.dbt.default__drop_schema_named","macro_sql":"{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.121509,"supported_languages":null},"macro.dbt.get_drop_backup_sql":{"name":"get_drop_backup_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop_backup.sql","original_file_path":"macros/relations/drop_backup.sql","unique_id":"macro.dbt.get_drop_backup_sql","macro_sql":"{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_drop_backup_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.121807,"supported_languages":null},"macro.dbt.default__get_drop_backup_sql":{"name":"default__get_drop_backup_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop_backup.sql","original_file_path":"macros/relations/drop_backup.sql","unique_id":"macro.dbt.default__get_drop_backup_sql","macro_sql":"{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.make_backup_relation","macro.dbt.get_drop_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.122006,"supported_languages":null},"macro.dbt.get_rename_sql":{"name":"get_rename_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename.sql","original_file_path":"macros/relations/rename.sql","unique_id":"macro.dbt.get_rename_sql","macro_sql":"{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_rename_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.122667,"supported_languages":null},"macro.dbt.default__get_rename_sql":{"name":"default__get_rename_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename.sql","original_file_path":"macros/relations/rename.sql","unique_id":"macro.dbt.default__get_rename_sql","macro_sql":"{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.get_rename_view_sql","macro.dbt.get_rename_table_sql","macro.dbt.get_rename_materialized_view_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.123073,"supported_languages":null},"macro.dbt.rename_relation":{"name":"rename_relation","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename.sql","original_file_path":"macros/relations/rename.sql","unique_id":"macro.dbt.rename_relation","macro_sql":"{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__rename_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.123263,"supported_languages":null},"macro.dbt.default__rename_relation":{"name":"default__rename_relation","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename.sql","original_file_path":"macros/relations/rename.sql","unique_id":"macro.dbt.default__rename_relation","macro_sql":"{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.123528,"supported_languages":null},"macro.dbt.get_create_backup_sql":{"name":"get_create_backup_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create_backup.sql","original_file_path":"macros/relations/create_backup.sql","unique_id":"macro.dbt.get_create_backup_sql","macro_sql":"{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_create_backup_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.123853,"supported_languages":null},"macro.dbt.default__get_create_backup_sql":{"name":"default__get_create_backup_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create_backup.sql","original_file_path":"macros/relations/create_backup.sql","unique_id":"macro.dbt.default__get_create_backup_sql","macro_sql":"{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.make_backup_relation","macro.dbt.get_drop_sql","macro.dbt.get_rename_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1241071,"supported_languages":null},"macro.dbt.get_create_sql":{"name":"get_create_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create.sql","original_file_path":"macros/relations/create.sql","unique_id":"macro.dbt.get_create_sql","macro_sql":"{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_create_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.124547,"supported_languages":null},"macro.dbt.default__get_create_sql":{"name":"default__get_create_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create.sql","original_file_path":"macros/relations/create.sql","unique_id":"macro.dbt.default__get_create_sql","macro_sql":"{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.get_create_view_as_sql","macro.dbt.get_create_table_as_sql","macro.dbt.get_create_materialized_view_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.124969,"supported_languages":null},"macro.dbt.get_rename_intermediate_sql":{"name":"get_rename_intermediate_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename_intermediate.sql","original_file_path":"macros/relations/rename_intermediate.sql","unique_id":"macro.dbt.get_rename_intermediate_sql","macro_sql":"{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_rename_intermediate_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1252742,"supported_languages":null},"macro.dbt.default__get_rename_intermediate_sql":{"name":"default__get_rename_intermediate_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename_intermediate.sql","original_file_path":"macros/relations/rename_intermediate.sql","unique_id":"macro.dbt.default__get_rename_intermediate_sql","macro_sql":"{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.make_intermediate_relation","macro.dbt.get_rename_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.125473,"supported_languages":null},"macro.dbt.drop_materialized_view":{"name":"drop_materialized_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/drop.sql","original_file_path":"macros/relations/materialized_view/drop.sql","unique_id":"macro.dbt.drop_materialized_view","macro_sql":"{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__drop_materialized_view"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.125723,"supported_languages":null},"macro.dbt.default__drop_materialized_view":{"name":"default__drop_materialized_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/drop.sql","original_file_path":"macros/relations/materialized_view/drop.sql","unique_id":"macro.dbt.default__drop_materialized_view","macro_sql":"{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.125824,"supported_languages":null},"macro.dbt.get_replace_materialized_view_sql":{"name":"get_replace_materialized_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/replace.sql","original_file_path":"macros/relations/materialized_view/replace.sql","unique_id":"macro.dbt.get_replace_materialized_view_sql","macro_sql":"{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_replace_materialized_view_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.126078,"supported_languages":null},"macro.dbt.default__get_replace_materialized_view_sql":{"name":"default__get_replace_materialized_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/replace.sql","original_file_path":"macros/relations/materialized_view/replace.sql","unique_id":"macro.dbt.default__get_replace_materialized_view_sql","macro_sql":"{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1262789,"supported_languages":null},"macro.dbt.refresh_materialized_view":{"name":"refresh_materialized_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/refresh.sql","original_file_path":"macros/relations/materialized_view/refresh.sql","unique_id":"macro.dbt.refresh_materialized_view","macro_sql":"{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__refresh_materialized_view"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.126582,"supported_languages":null},"macro.dbt.default__refresh_materialized_view":{"name":"default__refresh_materialized_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/refresh.sql","original_file_path":"macros/relations/materialized_view/refresh.sql","unique_id":"macro.dbt.default__refresh_materialized_view","macro_sql":"{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.12672,"supported_languages":null},"macro.dbt.get_rename_materialized_view_sql":{"name":"get_rename_materialized_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/rename.sql","original_file_path":"macros/relations/materialized_view/rename.sql","unique_id":"macro.dbt.get_rename_materialized_view_sql","macro_sql":"{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_rename_materialized_view_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1269782,"supported_languages":null},"macro.dbt.default__get_rename_materialized_view_sql":{"name":"default__get_rename_materialized_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/rename.sql","original_file_path":"macros/relations/materialized_view/rename.sql","unique_id":"macro.dbt.default__get_rename_materialized_view_sql","macro_sql":"{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.127118,"supported_languages":null},"macro.dbt.get_alter_materialized_view_as_sql":{"name":"get_alter_materialized_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","original_file_path":"macros/relations/materialized_view/alter.sql","unique_id":"macro.dbt.get_alter_materialized_view_as_sql","macro_sql":"{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_alter_materialized_view_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.127709,"supported_languages":null},"macro.dbt.default__get_alter_materialized_view_as_sql":{"name":"default__get_alter_materialized_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","original_file_path":"macros/relations/materialized_view/alter.sql","unique_id":"macro.dbt.default__get_alter_materialized_view_as_sql","macro_sql":"{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1278841,"supported_languages":null},"macro.dbt.get_materialized_view_configuration_changes":{"name":"get_materialized_view_configuration_changes","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","original_file_path":"macros/relations/materialized_view/alter.sql","unique_id":"macro.dbt.get_materialized_view_configuration_changes","macro_sql":"{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_materialized_view_configuration_changes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.128166,"supported_languages":null},"macro.dbt.default__get_materialized_view_configuration_changes":{"name":"default__get_materialized_view_configuration_changes","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","original_file_path":"macros/relations/materialized_view/alter.sql","unique_id":"macro.dbt.default__get_materialized_view_configuration_changes","macro_sql":"{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1283011,"supported_languages":null},"macro.dbt.get_create_materialized_view_as_sql":{"name":"get_create_materialized_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/create.sql","original_file_path":"macros/relations/materialized_view/create.sql","unique_id":"macro.dbt.get_create_materialized_view_as_sql","macro_sql":"{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_create_materialized_view_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.128559,"supported_languages":null},"macro.dbt.default__get_create_materialized_view_as_sql":{"name":"default__get_create_materialized_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/create.sql","original_file_path":"macros/relations/materialized_view/create.sql","unique_id":"macro.dbt.default__get_create_materialized_view_as_sql","macro_sql":"{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.128694,"supported_languages":null},"macro.dbt.get_table_columns_and_constraints":{"name":"get_table_columns_and_constraints","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.get_table_columns_and_constraints","macro_sql":"{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__get_table_columns_and_constraints"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1296399,"supported_languages":null},"macro.dbt.default__get_table_columns_and_constraints":{"name":"default__get_table_columns_and_constraints","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.default__get_table_columns_and_constraints","macro_sql":"{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.table_columns_and_constraints"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1297548,"supported_languages":null},"macro.dbt.table_columns_and_constraints":{"name":"table_columns_and_constraints","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.table_columns_and_constraints","macro_sql":"{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.130257,"supported_languages":null},"macro.dbt.get_assert_columns_equivalent":{"name":"get_assert_columns_equivalent","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.get_assert_columns_equivalent","macro_sql":"\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__get_assert_columns_equivalent"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.130421,"supported_languages":null},"macro.dbt.default__get_assert_columns_equivalent":{"name":"default__get_assert_columns_equivalent","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.default__get_assert_columns_equivalent","macro_sql":"{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.assert_columns_equivalent"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1305459,"supported_languages":null},"macro.dbt.assert_columns_equivalent":{"name":"assert_columns_equivalent","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.assert_columns_equivalent","macro_sql":"{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_column_schema_from_query","macro.dbt.get_empty_schema_sql","macro.dbt.format_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.131805,"supported_languages":null},"macro.dbt.format_columns":{"name":"format_columns","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.format_columns","macro_sql":"{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__format_column"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.132166,"supported_languages":null},"macro.dbt.default__format_column":{"name":"default__format_column","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.default__format_column","macro_sql":"{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.132489,"supported_languages":null},"macro.dbt.drop_table":{"name":"drop_table","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/drop.sql","original_file_path":"macros/relations/table/drop.sql","unique_id":"macro.dbt.drop_table","macro_sql":"{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__drop_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1327412,"supported_languages":null},"macro.dbt.default__drop_table":{"name":"default__drop_table","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/drop.sql","original_file_path":"macros/relations/table/drop.sql","unique_id":"macro.dbt.default__drop_table","macro_sql":"{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.132839,"supported_languages":null},"macro.dbt.get_replace_table_sql":{"name":"get_replace_table_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/replace.sql","original_file_path":"macros/relations/table/replace.sql","unique_id":"macro.dbt.get_replace_table_sql","macro_sql":"{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_replace_table_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1330938,"supported_languages":null},"macro.dbt.default__get_replace_table_sql":{"name":"default__get_replace_table_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/replace.sql","original_file_path":"macros/relations/table/replace.sql","unique_id":"macro.dbt.default__get_replace_table_sql","macro_sql":"{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1332312,"supported_languages":null},"macro.dbt.get_rename_table_sql":{"name":"get_rename_table_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/rename.sql","original_file_path":"macros/relations/table/rename.sql","unique_id":"macro.dbt.get_rename_table_sql","macro_sql":"{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_rename_table_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.133483,"supported_languages":null},"macro.dbt.default__get_rename_table_sql":{"name":"default__get_rename_table_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/rename.sql","original_file_path":"macros/relations/table/rename.sql","unique_id":"macro.dbt.default__get_rename_table_sql","macro_sql":"{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.13362,"supported_languages":null},"macro.dbt.get_create_table_as_sql":{"name":"get_create_table_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.get_create_table_as_sql","macro_sql":"{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_create_table_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1344278,"supported_languages":null},"macro.dbt.default__get_create_table_as_sql":{"name":"default__get_create_table_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.default__get_create_table_as_sql","macro_sql":"{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.create_table_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1346,"supported_languages":null},"macro.dbt.create_table_as":{"name":"create_table_as","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.create_table_as","macro_sql":"{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__create_table_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1350021,"supported_languages":null},"macro.dbt.default__create_table_as":{"name":"default__create_table_as","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.default__create_table_as","macro_sql":"{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.get_assert_columns_equivalent","macro.dbt.get_table_columns_and_constraints","macro.dbt.get_select_subquery"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.135652,"supported_languages":null},"macro.dbt.default__get_column_names":{"name":"default__get_column_names","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.default__get_column_names","macro_sql":"{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.136083,"supported_languages":null},"macro.dbt.get_select_subquery":{"name":"get_select_subquery","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.get_select_subquery","macro_sql":"{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_select_subquery"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.136255,"supported_languages":null},"macro.dbt.default__get_select_subquery":{"name":"default__get_select_subquery","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.default__get_select_subquery","macro_sql":"{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.get_column_names","macro.dbt.default__get_column_names"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1364238,"supported_languages":null},"macro.dbt.drop_view":{"name":"drop_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/drop.sql","original_file_path":"macros/relations/view/drop.sql","unique_id":"macro.dbt.drop_view","macro_sql":"{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__drop_view"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1366699,"supported_languages":null},"macro.dbt.default__drop_view":{"name":"default__drop_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/drop.sql","original_file_path":"macros/relations/view/drop.sql","unique_id":"macro.dbt.default__drop_view","macro_sql":"{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.136767,"supported_languages":null},"macro.dbt.get_replace_view_sql":{"name":"get_replace_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/replace.sql","original_file_path":"macros/relations/view/replace.sql","unique_id":"macro.dbt.get_replace_view_sql","macro_sql":"{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_replace_view_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1375759,"supported_languages":null},"macro.dbt.default__get_replace_view_sql":{"name":"default__get_replace_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/replace.sql","original_file_path":"macros/relations/view/replace.sql","unique_id":"macro.dbt.default__get_replace_view_sql","macro_sql":"{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.137711,"supported_languages":null},"macro.dbt.create_or_replace_view":{"name":"create_or_replace_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/replace.sql","original_file_path":"macros/relations/view/replace.sql","unique_id":"macro.dbt.create_or_replace_view","macro_sql":"{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_hooks","macro.dbt.handle_existing_table","macro.dbt.should_full_refresh","macro.dbt.statement","macro.dbt.get_create_view_as_sql","macro.dbt.should_revoke","macro.dbt.apply_grants"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.138853,"supported_languages":null},"macro.dbt.handle_existing_table":{"name":"handle_existing_table","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/replace.sql","original_file_path":"macros/relations/view/replace.sql","unique_id":"macro.dbt.handle_existing_table","macro_sql":"{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__handle_existing_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.139039,"supported_languages":null},"macro.dbt.default__handle_existing_table":{"name":"default__handle_existing_table","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/replace.sql","original_file_path":"macros/relations/view/replace.sql","unique_id":"macro.dbt.default__handle_existing_table","macro_sql":"{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1392498,"supported_languages":null},"macro.dbt.get_rename_view_sql":{"name":"get_rename_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/rename.sql","original_file_path":"macros/relations/view/rename.sql","unique_id":"macro.dbt.get_rename_view_sql","macro_sql":"{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_rename_view_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.139507,"supported_languages":null},"macro.dbt.default__get_rename_view_sql":{"name":"default__get_rename_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/rename.sql","original_file_path":"macros/relations/view/rename.sql","unique_id":"macro.dbt.default__get_rename_view_sql","macro_sql":"{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1396449,"supported_languages":null},"macro.dbt.get_create_view_as_sql":{"name":"get_create_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/create.sql","original_file_path":"macros/relations/view/create.sql","unique_id":"macro.dbt.get_create_view_as_sql","macro_sql":"{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_create_view_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.14003,"supported_languages":null},"macro.dbt.default__get_create_view_as_sql":{"name":"default__get_create_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/create.sql","original_file_path":"macros/relations/view/create.sql","unique_id":"macro.dbt.default__get_create_view_as_sql","macro_sql":"{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.create_view_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.140188,"supported_languages":null},"macro.dbt.create_view_as":{"name":"create_view_as","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/create.sql","original_file_path":"macros/relations/view/create.sql","unique_id":"macro.dbt.create_view_as","macro_sql":"{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__create_view_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.140356,"supported_languages":null},"macro.dbt.default__create_view_as":{"name":"default__create_view_as","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/create.sql","original_file_path":"macros/relations/view/create.sql","unique_id":"macro.dbt.default__create_view_as","macro_sql":"{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.get_assert_columns_equivalent"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.140754,"supported_languages":null},"macro.dbt.default__test_relationships":{"name":"default__test_relationships","resource_type":"macro","package_name":"dbt","path":"macros/generic_test_sql/relationships.sql","original_file_path":"macros/generic_test_sql/relationships.sql","unique_id":"macro.dbt.default__test_relationships","macro_sql":"{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.141085,"supported_languages":null},"macro.dbt.default__test_not_null":{"name":"default__test_not_null","resource_type":"macro","package_name":"dbt","path":"macros/generic_test_sql/not_null.sql","original_file_path":"macros/generic_test_sql/not_null.sql","unique_id":"macro.dbt.default__test_not_null","macro_sql":"{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.should_store_failures"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.141369,"supported_languages":null},"macro.dbt.default__test_unique":{"name":"default__test_unique","resource_type":"macro","package_name":"dbt","path":"macros/generic_test_sql/unique.sql","original_file_path":"macros/generic_test_sql/unique.sql","unique_id":"macro.dbt.default__test_unique","macro_sql":"{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.141599,"supported_languages":null},"macro.dbt.default__test_accepted_values":{"name":"default__test_accepted_values","resource_type":"macro","package_name":"dbt","path":"macros/generic_test_sql/accepted_values.sql","original_file_path":"macros/generic_test_sql/accepted_values.sql","unique_id":"macro.dbt.default__test_accepted_values","macro_sql":"{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.142129,"supported_languages":null},"macro.dbt.statement":{"name":"statement","resource_type":"macro","package_name":"dbt","path":"macros/etc/statement.sql","original_file_path":"macros/etc/statement.sql","unique_id":"macro.dbt.statement","macro_sql":"\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.143512,"supported_languages":null},"macro.dbt.noop_statement":{"name":"noop_statement","resource_type":"macro","package_name":"dbt","path":"macros/etc/statement.sql","original_file_path":"macros/etc/statement.sql","unique_id":"macro.dbt.noop_statement","macro_sql":"{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.144054,"supported_languages":null},"macro.dbt.run_query":{"name":"run_query","resource_type":"macro","package_name":"dbt","path":"macros/etc/statement.sql","original_file_path":"macros/etc/statement.sql","unique_id":"macro.dbt.run_query","macro_sql":"{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1443279,"supported_languages":null},"macro.dbt.convert_datetime":{"name":"convert_datetime","resource_type":"macro","package_name":"dbt","path":"macros/etc/datetime.sql","original_file_path":"macros/etc/datetime.sql","unique_id":"macro.dbt.convert_datetime","macro_sql":"{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.146085,"supported_languages":null},"macro.dbt.dates_in_range":{"name":"dates_in_range","resource_type":"macro","package_name":"dbt","path":"macros/etc/datetime.sql","original_file_path":"macros/etc/datetime.sql","unique_id":"macro.dbt.dates_in_range","macro_sql":"{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.convert_datetime"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.147268,"supported_languages":null},"macro.dbt.partition_range":{"name":"partition_range","resource_type":"macro","package_name":"dbt","path":"macros/etc/datetime.sql","original_file_path":"macros/etc/datetime.sql","unique_id":"macro.dbt.partition_range","macro_sql":"{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.dates_in_range"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1479738,"supported_languages":null},"macro.dbt.py_current_timestring":{"name":"py_current_timestring","resource_type":"macro","package_name":"dbt","path":"macros/etc/datetime.sql","original_file_path":"macros/etc/datetime.sql","unique_id":"macro.dbt.py_current_timestring","macro_sql":"{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.148196,"supported_languages":null},"macro.dbt.except":{"name":"except","resource_type":"macro","package_name":"dbt","path":"macros/utils/except.sql","original_file_path":"macros/utils/except.sql","unique_id":"macro.dbt.except","macro_sql":"{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__except"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.14841,"supported_languages":null},"macro.dbt.default__except":{"name":"default__except","resource_type":"macro","package_name":"dbt","path":"macros/utils/except.sql","original_file_path":"macros/utils/except.sql","unique_id":"macro.dbt.default__except","macro_sql":"{% macro default__except() %}\n\n    except\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.148482,"supported_languages":null},"macro.dbt.get_intervals_between":{"name":"get_intervals_between","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_spine.sql","original_file_path":"macros/utils/date_spine.sql","unique_id":"macro.dbt.get_intervals_between","macro_sql":"{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_intervals_between"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.149193,"supported_languages":null},"macro.dbt.default__get_intervals_between":{"name":"default__get_intervals_between","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_spine.sql","original_file_path":"macros/utils/date_spine.sql","unique_id":"macro.dbt.default__get_intervals_between","macro_sql":"{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.datediff"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.14975,"supported_languages":null},"macro.dbt.date_spine":{"name":"date_spine","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_spine.sql","original_file_path":"macros/utils/date_spine.sql","unique_id":"macro.dbt.date_spine","macro_sql":"{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__date_spine"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.149964,"supported_languages":null},"macro.dbt.default__date_spine":{"name":"default__date_spine","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_spine.sql","original_file_path":"macros/utils/date_spine.sql","unique_id":"macro.dbt.default__date_spine","macro_sql":"{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.generate_series","macro.dbt.get_intervals_between","macro.dbt.dateadd"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.150309,"supported_languages":null},"macro.dbt.date":{"name":"date","resource_type":"macro","package_name":"dbt","path":"macros/utils/date.sql","original_file_path":"macros/utils/date.sql","unique_id":"macro.dbt.date","macro_sql":"{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__date"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.150622,"supported_languages":null},"macro.dbt.default__date":{"name":"default__date","resource_type":"macro","package_name":"dbt","path":"macros/utils/date.sql","original_file_path":"macros/utils/date.sql","unique_id":"macro.dbt.default__date","macro_sql":"{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.150891,"supported_languages":null},"macro.dbt.replace":{"name":"replace","resource_type":"macro","package_name":"dbt","path":"macros/utils/replace.sql","original_file_path":"macros/utils/replace.sql","unique_id":"macro.dbt.replace","macro_sql":"{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__replace"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1511989,"supported_languages":null},"macro.dbt.default__replace":{"name":"default__replace","resource_type":"macro","package_name":"dbt","path":"macros/utils/replace.sql","original_file_path":"macros/utils/replace.sql","unique_id":"macro.dbt.default__replace","macro_sql":"{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.15135,"supported_languages":null},"macro.dbt.concat":{"name":"concat","resource_type":"macro","package_name":"dbt","path":"macros/utils/concat.sql","original_file_path":"macros/utils/concat.sql","unique_id":"macro.dbt.concat","macro_sql":"{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__concat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.151579,"supported_languages":null},"macro.dbt.default__concat":{"name":"default__concat","resource_type":"macro","package_name":"dbt","path":"macros/utils/concat.sql","original_file_path":"macros/utils/concat.sql","unique_id":"macro.dbt.default__concat","macro_sql":"{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.151695,"supported_languages":null},"macro.dbt.get_powers_of_two":{"name":"get_powers_of_two","resource_type":"macro","package_name":"dbt","path":"macros/utils/generate_series.sql","original_file_path":"macros/utils/generate_series.sql","unique_id":"macro.dbt.get_powers_of_two","macro_sql":"{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_powers_of_two"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.152479,"supported_languages":null},"macro.dbt.default__get_powers_of_two":{"name":"default__get_powers_of_two","resource_type":"macro","package_name":"dbt","path":"macros/utils/generate_series.sql","original_file_path":"macros/utils/generate_series.sql","unique_id":"macro.dbt.default__get_powers_of_two","macro_sql":"{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.152871,"supported_languages":null},"macro.dbt.generate_series":{"name":"generate_series","resource_type":"macro","package_name":"dbt","path":"macros/utils/generate_series.sql","original_file_path":"macros/utils/generate_series.sql","unique_id":"macro.dbt.generate_series","macro_sql":"{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__generate_series"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.153044,"supported_languages":null},"macro.dbt.default__generate_series":{"name":"default__generate_series","resource_type":"macro","package_name":"dbt","path":"macros/utils/generate_series.sql","original_file_path":"macros/utils/generate_series.sql","unique_id":"macro.dbt.default__generate_series","macro_sql":"{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_powers_of_two"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.153536,"supported_languages":null},"macro.dbt.length":{"name":"length","resource_type":"macro","package_name":"dbt","path":"macros/utils/length.sql","original_file_path":"macros/utils/length.sql","unique_id":"macro.dbt.length","macro_sql":"{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__length"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1537778,"supported_languages":null},"macro.dbt.default__length":{"name":"default__length","resource_type":"macro","package_name":"dbt","path":"macros/utils/length.sql","original_file_path":"macros/utils/length.sql","unique_id":"macro.dbt.default__length","macro_sql":"{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1538801,"supported_languages":null},"macro.dbt.dateadd":{"name":"dateadd","resource_type":"macro","package_name":"dbt","path":"macros/utils/dateadd.sql","original_file_path":"macros/utils/dateadd.sql","unique_id":"macro.dbt.dateadd","macro_sql":"{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__dateadd"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.154262,"supported_languages":null},"macro.dbt.default__dateadd":{"name":"default__dateadd","resource_type":"macro","package_name":"dbt","path":"macros/utils/dateadd.sql","original_file_path":"macros/utils/dateadd.sql","unique_id":"macro.dbt.default__dateadd","macro_sql":"{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.15442,"supported_languages":null},"macro.dbt.intersect":{"name":"intersect","resource_type":"macro","package_name":"dbt","path":"macros/utils/intersect.sql","original_file_path":"macros/utils/intersect.sql","unique_id":"macro.dbt.intersect","macro_sql":"{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__intersect"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.154651,"supported_languages":null},"macro.dbt.default__intersect":{"name":"default__intersect","resource_type":"macro","package_name":"dbt","path":"macros/utils/intersect.sql","original_file_path":"macros/utils/intersect.sql","unique_id":"macro.dbt.default__intersect","macro_sql":"{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.154721,"supported_languages":null},"macro.dbt.escape_single_quotes":{"name":"escape_single_quotes","resource_type":"macro","package_name":"dbt","path":"macros/utils/escape_single_quotes.sql","original_file_path":"macros/utils/escape_single_quotes.sql","unique_id":"macro.dbt.escape_single_quotes","macro_sql":"{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__escape_single_quotes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.154965,"supported_languages":null},"macro.dbt.default__escape_single_quotes":{"name":"default__escape_single_quotes","resource_type":"macro","package_name":"dbt","path":"macros/utils/escape_single_quotes.sql","original_file_path":"macros/utils/escape_single_quotes.sql","unique_id":"macro.dbt.default__escape_single_quotes","macro_sql":"{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.155095,"supported_languages":null},"macro.dbt.right":{"name":"right","resource_type":"macro","package_name":"dbt","path":"macros/utils/right.sql","original_file_path":"macros/utils/right.sql","unique_id":"macro.dbt.right","macro_sql":"{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__right"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.155371,"supported_languages":null},"macro.dbt.default__right":{"name":"default__right","resource_type":"macro","package_name":"dbt","path":"macros/utils/right.sql","original_file_path":"macros/utils/right.sql","unique_id":"macro.dbt.default__right","macro_sql":"{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.155503,"supported_languages":null},"macro.dbt.listagg":{"name":"listagg","resource_type":"macro","package_name":"dbt","path":"macros/utils/listagg.sql","original_file_path":"macros/utils/listagg.sql","unique_id":"macro.dbt.listagg","macro_sql":"{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__listagg"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.156111,"supported_languages":null},"macro.dbt.default__listagg":{"name":"default__listagg","resource_type":"macro","package_name":"dbt","path":"macros/utils/listagg.sql","original_file_path":"macros/utils/listagg.sql","unique_id":"macro.dbt.default__listagg","macro_sql":"{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.156491,"supported_languages":null},"macro.dbt.datediff":{"name":"datediff","resource_type":"macro","package_name":"dbt","path":"macros/utils/datediff.sql","original_file_path":"macros/utils/datediff.sql","unique_id":"macro.dbt.datediff","macro_sql":"{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__datediff"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.156806,"supported_languages":null},"macro.dbt.default__datediff":{"name":"default__datediff","resource_type":"macro","package_name":"dbt","path":"macros/utils/datediff.sql","original_file_path":"macros/utils/datediff.sql","unique_id":"macro.dbt.default__datediff","macro_sql":"{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.156959,"supported_languages":null},"macro.dbt.safe_cast":{"name":"safe_cast","resource_type":"macro","package_name":"dbt","path":"macros/utils/safe_cast.sql","original_file_path":"macros/utils/safe_cast.sql","unique_id":"macro.dbt.safe_cast","macro_sql":"{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__safe_cast"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.157224,"supported_languages":null},"macro.dbt.default__safe_cast":{"name":"default__safe_cast","resource_type":"macro","package_name":"dbt","path":"macros/utils/safe_cast.sql","original_file_path":"macros/utils/safe_cast.sql","unique_id":"macro.dbt.default__safe_cast","macro_sql":"{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.157352,"supported_languages":null},"macro.dbt.hash":{"name":"hash","resource_type":"macro","package_name":"dbt","path":"macros/utils/hash.sql","original_file_path":"macros/utils/hash.sql","unique_id":"macro.dbt.hash","macro_sql":"{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__hash"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.157592,"supported_languages":null},"macro.dbt.default__hash":{"name":"default__hash","resource_type":"macro","package_name":"dbt","path":"macros/utils/hash.sql","original_file_path":"macros/utils/hash.sql","unique_id":"macro.dbt.default__hash","macro_sql":"{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.157742,"supported_languages":null},"macro.dbt.cast_bool_to_text":{"name":"cast_bool_to_text","resource_type":"macro","package_name":"dbt","path":"macros/utils/cast_bool_to_text.sql","original_file_path":"macros/utils/cast_bool_to_text.sql","unique_id":"macro.dbt.cast_bool_to_text","macro_sql":"{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__cast_bool_to_text"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1579678,"supported_languages":null},"macro.dbt.default__cast_bool_to_text":{"name":"default__cast_bool_to_text","resource_type":"macro","package_name":"dbt","path":"macros/utils/cast_bool_to_text.sql","original_file_path":"macros/utils/cast_bool_to_text.sql","unique_id":"macro.dbt.default__cast_bool_to_text","macro_sql":"{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.158114,"supported_languages":null},"macro.dbt.cast":{"name":"cast","resource_type":"macro","package_name":"dbt","path":"macros/utils/cast.sql","original_file_path":"macros/utils/cast.sql","unique_id":"macro.dbt.cast","macro_sql":"{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__cast"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.158371,"supported_languages":null},"macro.dbt.default__cast":{"name":"default__cast","resource_type":"macro","package_name":"dbt","path":"macros/utils/cast.sql","original_file_path":"macros/utils/cast.sql","unique_id":"macro.dbt.default__cast","macro_sql":"{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1584902,"supported_languages":null},"macro.dbt.any_value":{"name":"any_value","resource_type":"macro","package_name":"dbt","path":"macros/utils/any_value.sql","original_file_path":"macros/utils/any_value.sql","unique_id":"macro.dbt.any_value","macro_sql":"{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__any_value"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.158721,"supported_languages":null},"macro.dbt.default__any_value":{"name":"default__any_value","resource_type":"macro","package_name":"dbt","path":"macros/utils/any_value.sql","original_file_path":"macros/utils/any_value.sql","unique_id":"macro.dbt.default__any_value","macro_sql":"{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.158877,"supported_languages":null},"macro.dbt.position":{"name":"position","resource_type":"macro","package_name":"dbt","path":"macros/utils/position.sql","original_file_path":"macros/utils/position.sql","unique_id":"macro.dbt.position","macro_sql":"{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__position"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.159144,"supported_languages":null},"macro.dbt.default__position":{"name":"default__position","resource_type":"macro","package_name":"dbt","path":"macros/utils/position.sql","original_file_path":"macros/utils/position.sql","unique_id":"macro.dbt.default__position","macro_sql":"{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.159271,"supported_languages":null},"macro.dbt.string_literal":{"name":"string_literal","resource_type":"macro","package_name":"dbt","path":"macros/utils/literal.sql","original_file_path":"macros/utils/literal.sql","unique_id":"macro.dbt.string_literal","macro_sql":"{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__string_literal"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.159497,"supported_languages":null},"macro.dbt.default__string_literal":{"name":"default__string_literal","resource_type":"macro","package_name":"dbt","path":"macros/utils/literal.sql","original_file_path":"macros/utils/literal.sql","unique_id":"macro.dbt.default__string_literal","macro_sql":"{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.159594,"supported_languages":null},"macro.dbt.type_string":{"name":"type_string","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_string","macro_sql":"\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1604722,"supported_languages":null},"macro.dbt.default__type_string":{"name":"default__type_string","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_string","macro_sql":"{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1606138,"supported_languages":null},"macro.dbt.type_timestamp":{"name":"type_timestamp","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_timestamp","macro_sql":"\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.160768,"supported_languages":null},"macro.dbt.default__type_timestamp":{"name":"default__type_timestamp","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_timestamp","macro_sql":"{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.160908,"supported_languages":null},"macro.dbt.type_float":{"name":"type_float","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_float","macro_sql":"\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_float"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.16106,"supported_languages":null},"macro.dbt.default__type_float":{"name":"default__type_float","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_float","macro_sql":"{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.161199,"supported_languages":null},"macro.dbt.type_numeric":{"name":"type_numeric","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_numeric","macro_sql":"\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.161351,"supported_languages":null},"macro.dbt.default__type_numeric":{"name":"default__type_numeric","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_numeric","macro_sql":"{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.161525,"supported_languages":null},"macro.dbt.type_bigint":{"name":"type_bigint","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_bigint","macro_sql":"\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_bigint"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.161689,"supported_languages":null},"macro.dbt.default__type_bigint":{"name":"default__type_bigint","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_bigint","macro_sql":"{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.16183,"supported_languages":null},"macro.dbt.type_int":{"name":"type_int","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_int","macro_sql":"\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_int"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.161986,"supported_languages":null},"macro.dbt.default__type_int":{"name":"default__type_int","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_int","macro_sql":"{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.162121,"supported_languages":null},"macro.dbt.type_boolean":{"name":"type_boolean","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_boolean","macro_sql":"\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_boolean"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.162271,"supported_languages":null},"macro.dbt.default__type_boolean":{"name":"default__type_boolean","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_boolean","macro_sql":"{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.162574,"supported_languages":null},"macro.dbt.array_concat":{"name":"array_concat","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_concat.sql","original_file_path":"macros/utils/array_concat.sql","unique_id":"macro.dbt.array_concat","macro_sql":"{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__array_concat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1628318,"supported_languages":null},"macro.dbt.default__array_concat":{"name":"default__array_concat","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_concat.sql","original_file_path":"macros/utils/array_concat.sql","unique_id":"macro.dbt.default__array_concat","macro_sql":"{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.162955,"supported_languages":null},"macro.dbt.bool_or":{"name":"bool_or","resource_type":"macro","package_name":"dbt","path":"macros/utils/bool_or.sql","original_file_path":"macros/utils/bool_or.sql","unique_id":"macro.dbt.bool_or","macro_sql":"{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__bool_or"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1631842,"supported_languages":null},"macro.dbt.default__bool_or":{"name":"default__bool_or","resource_type":"macro","package_name":"dbt","path":"macros/utils/bool_or.sql","original_file_path":"macros/utils/bool_or.sql","unique_id":"macro.dbt.default__bool_or","macro_sql":"{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.163281,"supported_languages":null},"macro.dbt.last_day":{"name":"last_day","resource_type":"macro","package_name":"dbt","path":"macros/utils/last_day.sql","original_file_path":"macros/utils/last_day.sql","unique_id":"macro.dbt.last_day","macro_sql":"{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__last_day"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1636,"supported_languages":null},"macro.dbt.default_last_day":{"name":"default_last_day","resource_type":"macro","package_name":"dbt","path":"macros/utils/last_day.sql","original_file_path":"macros/utils/last_day.sql","unique_id":"macro.dbt.default_last_day","macro_sql":"\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.dateadd","macro.dbt.date_trunc"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1638532,"supported_languages":null},"macro.dbt.default__last_day":{"name":"default__last_day","resource_type":"macro","package_name":"dbt","path":"macros/utils/last_day.sql","original_file_path":"macros/utils/last_day.sql","unique_id":"macro.dbt.default__last_day","macro_sql":"{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default_last_day"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1639931,"supported_languages":null},"macro.dbt.split_part":{"name":"split_part","resource_type":"macro","package_name":"dbt","path":"macros/utils/split_part.sql","original_file_path":"macros/utils/split_part.sql","unique_id":"macro.dbt.split_part","macro_sql":"{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__split_part"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.164491,"supported_languages":null},"macro.dbt.default__split_part":{"name":"default__split_part","resource_type":"macro","package_name":"dbt","path":"macros/utils/split_part.sql","original_file_path":"macros/utils/split_part.sql","unique_id":"macro.dbt.default__split_part","macro_sql":"{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1646452,"supported_languages":null},"macro.dbt._split_part_negative":{"name":"_split_part_negative","resource_type":"macro","package_name":"dbt","path":"macros/utils/split_part.sql","original_file_path":"macros/utils/split_part.sql","unique_id":"macro.dbt._split_part_negative","macro_sql":"{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.164854,"supported_languages":null},"macro.dbt.date_trunc":{"name":"date_trunc","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_trunc.sql","original_file_path":"macros/utils/date_trunc.sql","unique_id":"macro.dbt.date_trunc","macro_sql":"{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__date_trunc"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.165111,"supported_languages":null},"macro.dbt.default__date_trunc":{"name":"default__date_trunc","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_trunc.sql","original_file_path":"macros/utils/date_trunc.sql","unique_id":"macro.dbt.default__date_trunc","macro_sql":"{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.16523,"supported_languages":null},"macro.dbt.array_construct":{"name":"array_construct","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_construct.sql","original_file_path":"macros/utils/array_construct.sql","unique_id":"macro.dbt.array_construct","macro_sql":"{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__array_construct"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.16558,"supported_languages":null},"macro.dbt.default__array_construct":{"name":"default__array_construct","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_construct.sql","original_file_path":"macros/utils/array_construct.sql","unique_id":"macro.dbt.default__array_construct","macro_sql":"{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.165805,"supported_languages":null},"macro.dbt.array_append":{"name":"array_append","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_append.sql","original_file_path":"macros/utils/array_append.sql","unique_id":"macro.dbt.array_append","macro_sql":"{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__array_append"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.166067,"supported_languages":null},"macro.dbt.default__array_append":{"name":"default__array_append","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_append.sql","original_file_path":"macros/utils/array_append.sql","unique_id":"macro.dbt.default__array_append","macro_sql":"{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1661901,"supported_languages":null},"macro.dbt.create_schema":{"name":"create_schema","resource_type":"macro","package_name":"dbt","path":"macros/adapters/schema.sql","original_file_path":"macros/adapters/schema.sql","unique_id":"macro.dbt.create_schema","macro_sql":"{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__create_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.166538,"supported_languages":null},"macro.dbt.default__create_schema":{"name":"default__create_schema","resource_type":"macro","package_name":"dbt","path":"macros/adapters/schema.sql","original_file_path":"macros/adapters/schema.sql","unique_id":"macro.dbt.default__create_schema","macro_sql":"{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.166712,"supported_languages":null},"macro.dbt.drop_schema":{"name":"drop_schema","resource_type":"macro","package_name":"dbt","path":"macros/adapters/schema.sql","original_file_path":"macros/adapters/schema.sql","unique_id":"macro.dbt.drop_schema","macro_sql":"{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__drop_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.166921,"supported_languages":null},"macro.dbt.default__drop_schema":{"name":"default__drop_schema","resource_type":"macro","package_name":"dbt","path":"macros/adapters/schema.sql","original_file_path":"macros/adapters/schema.sql","unique_id":"macro.dbt.default__drop_schema","macro_sql":"{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.167095,"supported_languages":null},"macro.dbt.current_timestamp":{"name":"current_timestamp","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.current_timestamp","macro_sql":"{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_duckdb.duckdb__current_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.167546,"supported_languages":null},"macro.dbt.default__current_timestamp":{"name":"default__current_timestamp","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.default__current_timestamp","macro_sql":"{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.167684,"supported_languages":null},"macro.dbt.snapshot_get_time":{"name":"snapshot_get_time","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.snapshot_get_time","macro_sql":"\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_duckdb.duckdb__snapshot_get_time"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.167819,"supported_languages":null},"macro.dbt.default__snapshot_get_time":{"name":"default__snapshot_get_time","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.default__snapshot_get_time","macro_sql":"{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.current_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.167916,"supported_languages":null},"macro.dbt.current_timestamp_backcompat":{"name":"current_timestamp_backcompat","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.current_timestamp_backcompat","macro_sql":"{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__current_timestamp_backcompat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1680691,"supported_languages":null},"macro.dbt.default__current_timestamp_backcompat":{"name":"default__current_timestamp_backcompat","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.default__current_timestamp_backcompat","macro_sql":"{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1681411,"supported_languages":null},"macro.dbt.current_timestamp_in_utc_backcompat":{"name":"current_timestamp_in_utc_backcompat","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.current_timestamp_in_utc_backcompat","macro_sql":"{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__current_timestamp_in_utc_backcompat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.168294,"supported_languages":null},"macro.dbt.default__current_timestamp_in_utc_backcompat":{"name":"default__current_timestamp_in_utc_backcompat","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.default__current_timestamp_in_utc_backcompat","macro_sql":"{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.current_timestamp_backcompat","macro.dbt.default__current_timestamp_backcompat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.168452,"supported_languages":null},"macro.dbt.get_create_index_sql":{"name":"get_create_index_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.get_create_index_sql","macro_sql":"{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_create_index_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1692412,"supported_languages":null},"macro.dbt.default__get_create_index_sql":{"name":"default__get_create_index_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.default__get_create_index_sql","macro_sql":"{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.169369,"supported_languages":null},"macro.dbt.create_indexes":{"name":"create_indexes","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.create_indexes","macro_sql":"{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__create_indexes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.169516,"supported_languages":null},"macro.dbt.default__create_indexes":{"name":"default__create_indexes","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.default__create_indexes","macro_sql":"{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_create_index_sql","macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.169895,"supported_languages":null},"macro.dbt.get_drop_index_sql":{"name":"get_drop_index_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.get_drop_index_sql","macro_sql":"{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_drop_index_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.170073,"supported_languages":null},"macro.dbt.default__get_drop_index_sql":{"name":"default__get_drop_index_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.default__get_drop_index_sql","macro_sql":"{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1701992,"supported_languages":null},"macro.dbt.get_show_indexes_sql":{"name":"get_show_indexes_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.get_show_indexes_sql","macro_sql":"{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_show_indexes_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1703491,"supported_languages":null},"macro.dbt.default__get_show_indexes_sql":{"name":"default__get_show_indexes_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.default__get_show_indexes_sql","macro_sql":"{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.170469,"supported_languages":null},"macro.dbt.make_intermediate_relation":{"name":"make_intermediate_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.make_intermediate_relation","macro_sql":"{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__make_intermediate_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.172409,"supported_languages":null},"macro.dbt.default__make_intermediate_relation":{"name":"default__make_intermediate_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.default__make_intermediate_relation","macro_sql":"{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__make_temp_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.172627,"supported_languages":null},"macro.dbt.make_temp_relation":{"name":"make_temp_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.make_temp_relation","macro_sql":"{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__make_temp_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.172837,"supported_languages":null},"macro.dbt.default__make_temp_relation":{"name":"default__make_temp_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.default__make_temp_relation","macro_sql":"{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.173113,"supported_languages":null},"macro.dbt.make_backup_relation":{"name":"make_backup_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.make_backup_relation","macro_sql":"{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__make_backup_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.173341,"supported_languages":null},"macro.dbt.default__make_backup_relation":{"name":"default__make_backup_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.default__make_backup_relation","macro_sql":"{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.173644,"supported_languages":null},"macro.dbt.truncate_relation":{"name":"truncate_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.truncate_relation","macro_sql":"{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__truncate_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1738172,"supported_languages":null},"macro.dbt.default__truncate_relation":{"name":"default__truncate_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.default__truncate_relation","macro_sql":"{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1739678,"supported_languages":null},"macro.dbt.get_or_create_relation":{"name":"get_or_create_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.get_or_create_relation","macro_sql":"{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_or_create_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1742,"supported_languages":null},"macro.dbt.default__get_or_create_relation":{"name":"default__get_or_create_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.default__get_or_create_relation","macro_sql":"{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.17472,"supported_languages":null},"macro.dbt.load_cached_relation":{"name":"load_cached_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.load_cached_relation","macro_sql":"{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.174937,"supported_languages":null},"macro.dbt.load_relation":{"name":"load_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.load_relation","macro_sql":"{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.load_cached_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.175072,"supported_languages":null},"macro.dbt.collect_freshness":{"name":"collect_freshness","resource_type":"macro","package_name":"dbt","path":"macros/adapters/freshness.sql","original_file_path":"macros/adapters/freshness.sql","unique_id":"macro.dbt.collect_freshness","macro_sql":"{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__collect_freshness"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1754618,"supported_languages":null},"macro.dbt.default__collect_freshness":{"name":"default__collect_freshness","resource_type":"macro","package_name":"dbt","path":"macros/adapters/freshness.sql","original_file_path":"macros/adapters/freshness.sql","unique_id":"macro.dbt.default__collect_freshness","macro_sql":"{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.current_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.175842,"supported_languages":null},"macro.dbt.validate_sql":{"name":"validate_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/validate_sql.sql","original_file_path":"macros/adapters/validate_sql.sql","unique_id":"macro.dbt.validate_sql","macro_sql":"{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__validate_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.176106,"supported_languages":null},"macro.dbt.default__validate_sql":{"name":"default__validate_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/validate_sql.sql","original_file_path":"macros/adapters/validate_sql.sql","unique_id":"macro.dbt.default__validate_sql","macro_sql":"{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.176318,"supported_languages":null},"macro.dbt.copy_grants":{"name":"copy_grants","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.copy_grants","macro_sql":"{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__copy_grants"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.177954,"supported_languages":null},"macro.dbt.default__copy_grants":{"name":"default__copy_grants","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__copy_grants","macro_sql":"{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.178066,"supported_languages":null},"macro.dbt.support_multiple_grantees_per_dcl_statement":{"name":"support_multiple_grantees_per_dcl_statement","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.support_multiple_grantees_per_dcl_statement","macro_sql":"{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.178221,"supported_languages":null},"macro.dbt.default__support_multiple_grantees_per_dcl_statement":{"name":"default__support_multiple_grantees_per_dcl_statement","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__support_multiple_grantees_per_dcl_statement","macro_sql":"\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.178327,"supported_languages":null},"macro.dbt.should_revoke":{"name":"should_revoke","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.should_revoke","macro_sql":"{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.copy_grants"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.178707,"supported_languages":null},"macro.dbt.get_show_grant_sql":{"name":"get_show_grant_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.get_show_grant_sql","macro_sql":"{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_show_grant_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.178884,"supported_languages":null},"macro.dbt.default__get_show_grant_sql":{"name":"default__get_show_grant_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__get_show_grant_sql","macro_sql":"{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.178981,"supported_languages":null},"macro.dbt.get_grant_sql":{"name":"get_grant_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.get_grant_sql","macro_sql":"{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_grant_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1791942,"supported_languages":null},"macro.dbt.default__get_grant_sql":{"name":"default__get_grant_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__get_grant_sql","macro_sql":"\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.179372,"supported_languages":null},"macro.dbt.get_revoke_sql":{"name":"get_revoke_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.get_revoke_sql","macro_sql":"{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_revoke_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1795998,"supported_languages":null},"macro.dbt.default__get_revoke_sql":{"name":"default__get_revoke_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__get_revoke_sql","macro_sql":"\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.179779,"supported_languages":null},"macro.dbt.get_dcl_statement_list":{"name":"get_dcl_statement_list","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.get_dcl_statement_list","macro_sql":"{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_dcl_statement_list"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.179998,"supported_languages":null},"macro.dbt.default__get_dcl_statement_list":{"name":"default__get_dcl_statement_list","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__get_dcl_statement_list","macro_sql":"\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.support_multiple_grantees_per_dcl_statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.180634,"supported_languages":null},"macro.dbt.call_dcl_statements":{"name":"call_dcl_statements","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.call_dcl_statements","macro_sql":"{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__call_dcl_statements"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.180816,"supported_languages":null},"macro.dbt.default__call_dcl_statements":{"name":"default__call_dcl_statements","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__call_dcl_statements","macro_sql":"{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1810482,"supported_languages":null},"macro.dbt.apply_grants":{"name":"apply_grants","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.apply_grants","macro_sql":"{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__apply_grants"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.181264,"supported_languages":null},"macro.dbt.default__apply_grants":{"name":"default__apply_grants","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__apply_grants","macro_sql":"{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query","macro.dbt.get_show_grant_sql","macro.dbt.get_dcl_statement_list","macro.dbt.call_dcl_statements"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1823308,"supported_languages":null},"macro.dbt.get_show_sql":{"name":"get_show_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/show.sql","original_file_path":"macros/adapters/show.sql","unique_id":"macro.dbt.get_show_sql","macro_sql":"{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_limit_subquery_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.18283,"supported_languages":null},"macro.dbt.get_limit_subquery_sql":{"name":"get_limit_subquery_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/show.sql","original_file_path":"macros/adapters/show.sql","unique_id":"macro.dbt.get_limit_subquery_sql","macro_sql":"{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_limit_subquery_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.183009,"supported_languages":null},"macro.dbt.default__get_limit_subquery_sql":{"name":"default__get_limit_subquery_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/show.sql","original_file_path":"macros/adapters/show.sql","unique_id":"macro.dbt.default__get_limit_subquery_sql","macro_sql":"{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.183135,"supported_languages":null},"macro.dbt.alter_column_comment":{"name":"alter_column_comment","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.alter_column_comment","macro_sql":"{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__alter_column_comment"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1837661,"supported_languages":null},"macro.dbt.default__alter_column_comment":{"name":"default__alter_column_comment","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.default__alter_column_comment","macro_sql":"{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.183926,"supported_languages":null},"macro.dbt.alter_relation_comment":{"name":"alter_relation_comment","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.alter_relation_comment","macro_sql":"{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__alter_relation_comment"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.184115,"supported_languages":null},"macro.dbt.default__alter_relation_comment":{"name":"default__alter_relation_comment","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.default__alter_relation_comment","macro_sql":"{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.184271,"supported_languages":null},"macro.dbt.persist_docs":{"name":"persist_docs","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.persist_docs","macro_sql":"{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.184522,"supported_languages":null},"macro.dbt.default__persist_docs":{"name":"default__persist_docs","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.default__persist_docs","macro_sql":"{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query","macro.dbt.alter_relation_comment","macro.dbt.alter_column_comment"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1850429,"supported_languages":null},"macro.dbt.get_catalog_relations":{"name":"get_catalog_relations","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.get_catalog_relations","macro_sql":"{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_catalog_relations"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.187736,"supported_languages":null},"macro.dbt.default__get_catalog_relations":{"name":"default__get_catalog_relations","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__get_catalog_relations","macro_sql":"{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.187994,"supported_languages":null},"macro.dbt.get_catalog":{"name":"get_catalog","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.get_catalog","macro_sql":"{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_catalog"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.188183,"supported_languages":null},"macro.dbt.default__get_catalog":{"name":"default__get_catalog","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__get_catalog","macro_sql":"{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.188421,"supported_languages":null},"macro.dbt.information_schema_name":{"name":"information_schema_name","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.information_schema_name","macro_sql":"{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__information_schema_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.188596,"supported_languages":null},"macro.dbt.default__information_schema_name":{"name":"default__information_schema_name","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__information_schema_name","macro_sql":"{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1887412,"supported_languages":null},"macro.dbt.list_schemas":{"name":"list_schemas","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.list_schemas","macro_sql":"{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__list_schemas"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.188908,"supported_languages":null},"macro.dbt.default__list_schemas":{"name":"default__list_schemas","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__list_schemas","macro_sql":"{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.information_schema_name","macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.189137,"supported_languages":null},"macro.dbt.check_schema_exists":{"name":"check_schema_exists","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.check_schema_exists","macro_sql":"{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__check_schema_exists"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.189327,"supported_languages":null},"macro.dbt.default__check_schema_exists":{"name":"default__check_schema_exists","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__check_schema_exists","macro_sql":"{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.replace","macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.189606,"supported_languages":null},"macro.dbt.list_relations_without_caching":{"name":"list_relations_without_caching","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.list_relations_without_caching","macro_sql":"{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__list_relations_without_caching"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.189781,"supported_languages":null},"macro.dbt.default__list_relations_without_caching":{"name":"default__list_relations_without_caching","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__list_relations_without_caching","macro_sql":"{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1899369,"supported_languages":null},"macro.dbt.get_relations":{"name":"get_relations","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.get_relations","macro_sql":"{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_relations"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.190092,"supported_languages":null},"macro.dbt.default__get_relations":{"name":"default__get_relations","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__get_relations","macro_sql":"{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1902452,"supported_languages":null},"macro.dbt.get_relation_last_modified":{"name":"get_relation_last_modified","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.get_relation_last_modified","macro_sql":"{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_relation_last_modified"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1904378,"supported_languages":null},"macro.dbt.default__get_relation_last_modified":{"name":"default__get_relation_last_modified","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__get_relation_last_modified","macro_sql":"{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.190597,"supported_languages":null},"macro.dbt.get_columns_in_relation":{"name":"get_columns_in_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.get_columns_in_relation","macro_sql":"{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_columns_in_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.192725,"supported_languages":null},"macro.dbt.default__get_columns_in_relation":{"name":"default__get_columns_in_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__get_columns_in_relation","macro_sql":"{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.192928,"supported_languages":null},"macro.dbt.sql_convert_columns_in_relation":{"name":"sql_convert_columns_in_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.sql_convert_columns_in_relation","macro_sql":"{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.193217,"supported_languages":null},"macro.dbt.get_empty_subquery_sql":{"name":"get_empty_subquery_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.get_empty_subquery_sql","macro_sql":"{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_empty_subquery_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.193422,"supported_languages":null},"macro.dbt.default__get_empty_subquery_sql":{"name":"default__get_empty_subquery_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__get_empty_subquery_sql","macro_sql":"{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.193619,"supported_languages":null},"macro.dbt.get_empty_schema_sql":{"name":"get_empty_schema_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.get_empty_schema_sql","macro_sql":"{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_empty_schema_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.1937861,"supported_languages":null},"macro.dbt.default__get_empty_schema_sql":{"name":"default__get_empty_schema_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__get_empty_schema_sql","macro_sql":"{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.194895,"supported_languages":null},"macro.dbt.get_column_schema_from_query":{"name":"get_column_schema_from_query","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.get_column_schema_from_query","macro_sql":"{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_empty_subquery_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.195232,"supported_languages":null},"macro.dbt.get_columns_in_query":{"name":"get_columns_in_query","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.get_columns_in_query","macro_sql":"{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_columns_in_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.195412,"supported_languages":null},"macro.dbt.default__get_columns_in_query":{"name":"default__get_columns_in_query","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__get_columns_in_query","macro_sql":"{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.get_empty_subquery_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.195744,"supported_languages":null},"macro.dbt.alter_column_type":{"name":"alter_column_type","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.alter_column_type","macro_sql":"{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__alter_column_type"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.195959,"supported_languages":null},"macro.dbt.default__alter_column_type":{"name":"default__alter_column_type","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__alter_column_type","macro_sql":"{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.196521,"supported_languages":null},"macro.dbt.alter_relation_add_remove_columns":{"name":"alter_relation_add_remove_columns","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.alter_relation_add_remove_columns","macro_sql":"{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.196765,"supported_languages":null},"macro.dbt.default__alter_relation_add_remove_columns":{"name":"default__alter_relation_add_remove_columns","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__alter_relation_add_remove_columns","macro_sql":"{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.197488,"supported_languages":null},"macro.dbt.get_fixture_sql":{"name":"get_fixture_sql","resource_type":"macro","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","original_file_path":"macros/unit_test_sql/get_fixture_sql.sql","unique_id":"macro.dbt.get_fixture_sql","macro_sql":"{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.load_relation","macro.dbt.safe_cast","macro.dbt.validate_fixture_rows","macro.dbt.format_row"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.200751,"supported_languages":null},"macro.dbt.get_expected_sql":{"name":"get_expected_sql","resource_type":"macro","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","original_file_path":"macros/unit_test_sql/get_fixture_sql.sql","unique_id":"macro.dbt.get_expected_sql","macro_sql":"{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.format_row"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.201269,"supported_languages":null},"macro.dbt.format_row":{"name":"format_row","resource_type":"macro","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","original_file_path":"macros/unit_test_sql/get_fixture_sql.sql","unique_id":"macro.dbt.format_row","macro_sql":"\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.string_literal","macro.dbt.escape_single_quotes","macro.dbt.safe_cast"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.202325,"supported_languages":null},"macro.dbt.validate_fixture_rows":{"name":"validate_fixture_rows","resource_type":"macro","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","original_file_path":"macros/unit_test_sql/get_fixture_sql.sql","unique_id":"macro.dbt.validate_fixture_rows","macro_sql":"{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__validate_fixture_rows"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.202525,"supported_languages":null},"macro.dbt.default__validate_fixture_rows":{"name":"default__validate_fixture_rows","resource_type":"macro","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","original_file_path":"macros/unit_test_sql/get_fixture_sql.sql","unique_id":"macro.dbt.default__validate_fixture_rows","macro_sql":"{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2026129,"supported_languages":null},"macro.dbt.resolve_model_name":{"name":"resolve_model_name","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.resolve_model_name","macro_sql":"{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__resolve_model_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2041678,"supported_languages":null},"macro.dbt.default__resolve_model_name":{"name":"default__resolve_model_name","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.default__resolve_model_name","macro_sql":"\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.204312,"supported_languages":null},"macro.dbt.build_ref_function":{"name":"build_ref_function","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.build_ref_function","macro_sql":"{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.resolve_model_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2050922,"supported_languages":null},"macro.dbt.build_source_function":{"name":"build_source_function","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.build_source_function","macro_sql":"{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.resolve_model_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2054698,"supported_languages":null},"macro.dbt.build_config_dict":{"name":"build_config_dict","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.build_config_dict","macro_sql":"{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.206008,"supported_languages":null},"macro.dbt.py_script_postfix":{"name":"py_script_postfix","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.py_script_postfix","macro_sql":"{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.build_ref_function","macro.dbt.build_source_function","macro.dbt.build_config_dict","macro.dbt.resolve_model_name","macro.dbt.is_incremental","macro.dbt.py_script_comment"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.206456,"supported_languages":null},"macro.dbt.py_script_comment":{"name":"py_script_comment","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.py_script_comment","macro_sql":"{%macro py_script_comment()%}\n{%endmacro%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2065248,"supported_languages":null},"macro.dbt.test_unique":{"name":"test_unique","resource_type":"macro","package_name":"dbt","path":"tests/generic/builtin.sql","original_file_path":"tests/generic/builtin.sql","unique_id":"macro.dbt.test_unique","macro_sql":"{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt.default__test_unique"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2070029,"supported_languages":null},"macro.dbt.test_not_null":{"name":"test_not_null","resource_type":"macro","package_name":"dbt","path":"tests/generic/builtin.sql","original_file_path":"tests/generic/builtin.sql","unique_id":"macro.dbt.test_not_null","macro_sql":"{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt.default__test_not_null"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.207218,"supported_languages":null},"macro.dbt.test_accepted_values":{"name":"test_accepted_values","resource_type":"macro","package_name":"dbt","path":"tests/generic/builtin.sql","original_file_path":"tests/generic/builtin.sql","unique_id":"macro.dbt.test_accepted_values","macro_sql":"{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt.default__test_accepted_values"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2074912,"supported_languages":null},"macro.dbt.test_relationships":{"name":"test_relationships","resource_type":"macro","package_name":"dbt","path":"tests/generic/builtin.sql","original_file_path":"tests/generic/builtin.sql","unique_id":"macro.dbt.test_relationships","macro_sql":"{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt.default__test_relationships"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.207752,"supported_languages":null},"macro.dbt_utils.get_url_host":{"name":"get_url_host","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_host.sql","original_file_path":"macros/web/get_url_host.sql","unique_id":"macro.dbt_utils.get_url_host","macro_sql":"{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_url_host"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.208114,"supported_languages":null},"macro.dbt_utils.default__get_url_host":{"name":"default__get_url_host","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_host.sql","original_file_path":"macros/web/get_url_host.sql","unique_id":"macro.dbt_utils.default__get_url_host","macro_sql":"{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.split_part","macro.dbt.replace","macro.dbt.safe_cast","macro.dbt.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.208578,"supported_languages":null},"macro.dbt_utils.get_url_path":{"name":"get_url_path","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_path.sql","original_file_path":"macros/web/get_url_path.sql","unique_id":"macro.dbt_utils.get_url_path","macro_sql":"{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_url_path"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2090418,"supported_languages":null},"macro.dbt_utils.default__get_url_path":{"name":"default__get_url_path","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_path.sql","original_file_path":"macros/web/get_url_path.sql","unique_id":"macro.dbt_utils.default__get_url_path","macro_sql":"{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.replace","macro.dbt.position","macro.dbt.split_part","macro.dbt.right","macro.dbt.length","macro.dbt.safe_cast","macro.dbt.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.209656,"supported_languages":null},"macro.dbt_utils.get_url_parameter":{"name":"get_url_parameter","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_parameter.sql","original_file_path":"macros/web/get_url_parameter.sql","unique_id":"macro.dbt_utils.get_url_parameter","macro_sql":"{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_url_parameter"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.20995,"supported_languages":null},"macro.dbt_utils.default__get_url_parameter":{"name":"default__get_url_parameter","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_parameter.sql","original_file_path":"macros/web/get_url_parameter.sql","unique_id":"macro.dbt_utils.default__get_url_parameter","macro_sql":"{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.split_part"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.210252,"supported_languages":null},"macro.dbt_utils.test_fewer_rows_than":{"name":"test_fewer_rows_than","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/fewer_rows_than.sql","original_file_path":"macros/generic_tests/fewer_rows_than.sql","unique_id":"macro.dbt_utils.test_fewer_rows_than","macro_sql":"{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_fewer_rows_than"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.211301,"supported_languages":null},"macro.dbt_utils.default__test_fewer_rows_than":{"name":"default__test_fewer_rows_than","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/fewer_rows_than.sql","original_file_path":"macros/generic_tests/fewer_rows_than.sql","unique_id":"macro.dbt_utils.default__test_fewer_rows_than","macro_sql":"{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.212342,"supported_languages":null},"macro.dbt_utils.test_equal_rowcount":{"name":"test_equal_rowcount","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/equal_rowcount.sql","original_file_path":"macros/generic_tests/equal_rowcount.sql","unique_id":"macro.dbt_utils.test_equal_rowcount","macro_sql":"{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_equal_rowcount"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.21316,"supported_languages":null},"macro.dbt_utils.default__test_equal_rowcount":{"name":"default__test_equal_rowcount","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/equal_rowcount.sql","original_file_path":"macros/generic_tests/equal_rowcount.sql","unique_id":"macro.dbt_utils.default__test_equal_rowcount","macro_sql":"{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.214168,"supported_languages":null},"macro.dbt_utils.test_relationships_where":{"name":"test_relationships_where","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/relationships_where.sql","original_file_path":"macros/generic_tests/relationships_where.sql","unique_id":"macro.dbt_utils.test_relationships_where","macro_sql":"{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_relationships_where"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.214785,"supported_languages":null},"macro.dbt_utils.default__test_relationships_where":{"name":"default__test_relationships_where","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/relationships_where.sql","original_file_path":"macros/generic_tests/relationships_where.sql","unique_id":"macro.dbt_utils.default__test_relationships_where","macro_sql":"{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.215104,"supported_languages":null},"macro.dbt_utils.test_recency":{"name":"test_recency","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/recency.sql","original_file_path":"macros/generic_tests/recency.sql","unique_id":"macro.dbt_utils.test_recency","macro_sql":"{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_recency"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.215793,"supported_languages":null},"macro.dbt_utils.default__test_recency":{"name":"default__test_recency","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/recency.sql","original_file_path":"macros/generic_tests/recency.sql","unique_id":"macro.dbt_utils.default__test_recency","macro_sql":"{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.dateadd","macro.dbt.current_timestamp","macro.dbt.type_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.216576,"supported_languages":null},"macro.dbt_utils.test_not_constant":{"name":"test_not_constant","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_constant.sql","original_file_path":"macros/generic_tests/not_constant.sql","unique_id":"macro.dbt_utils.test_not_constant","macro_sql":"{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_not_constant"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.217452,"supported_languages":null},"macro.dbt_utils.default__test_not_constant":{"name":"default__test_not_constant","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_constant.sql","original_file_path":"macros/generic_tests/not_constant.sql","unique_id":"macro.dbt_utils.default__test_not_constant","macro_sql":"{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.217925,"supported_languages":null},"macro.dbt_utils.test_accepted_range":{"name":"test_accepted_range","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/accepted_range.sql","original_file_path":"macros/generic_tests/accepted_range.sql","unique_id":"macro.dbt_utils.test_accepted_range","macro_sql":"{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_accepted_range"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2185202,"supported_languages":null},"macro.dbt_utils.default__test_accepted_range":{"name":"default__test_accepted_range","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/accepted_range.sql","original_file_path":"macros/generic_tests/accepted_range.sql","unique_id":"macro.dbt_utils.default__test_accepted_range","macro_sql":"{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2189708,"supported_languages":null},"macro.dbt_utils.test_not_accepted_values":{"name":"test_not_accepted_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_accepted_values.sql","original_file_path":"macros/generic_tests/not_accepted_values.sql","unique_id":"macro.dbt_utils.test_not_accepted_values","macro_sql":"{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_not_accepted_values"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.219502,"supported_languages":null},"macro.dbt_utils.default__test_not_accepted_values":{"name":"default__test_not_accepted_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_accepted_values.sql","original_file_path":"macros/generic_tests/not_accepted_values.sql","unique_id":"macro.dbt_utils.default__test_not_accepted_values","macro_sql":"{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.219862,"supported_languages":null},"macro.dbt_utils.test_at_least_one":{"name":"test_at_least_one","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/at_least_one.sql","original_file_path":"macros/generic_tests/at_least_one.sql","unique_id":"macro.dbt_utils.test_at_least_one","macro_sql":"{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_at_least_one"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2204852,"supported_languages":null},"macro.dbt_utils.default__test_at_least_one":{"name":"default__test_at_least_one","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/at_least_one.sql","original_file_path":"macros/generic_tests/at_least_one.sql","unique_id":"macro.dbt_utils.default__test_at_least_one","macro_sql":"{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2212322,"supported_languages":null},"macro.dbt_utils.test_unique_combination_of_columns":{"name":"test_unique_combination_of_columns","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/unique_combination_of_columns.sql","original_file_path":"macros/generic_tests/unique_combination_of_columns.sql","unique_id":"macro.dbt_utils.test_unique_combination_of_columns","macro_sql":"{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_unique_combination_of_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.221858,"supported_languages":null},"macro.dbt_utils.default__test_unique_combination_of_columns":{"name":"default__test_unique_combination_of_columns","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/unique_combination_of_columns.sql","original_file_path":"macros/generic_tests/unique_combination_of_columns.sql","unique_id":"macro.dbt_utils.default__test_unique_combination_of_columns","macro_sql":"{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.222528,"supported_languages":null},"macro.dbt_utils.test_cardinality_equality":{"name":"test_cardinality_equality","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/cardinality_equality.sql","original_file_path":"macros/generic_tests/cardinality_equality.sql","unique_id":"macro.dbt_utils.test_cardinality_equality","macro_sql":"{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_cardinality_equality"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2230458,"supported_languages":null},"macro.dbt_utils.default__test_cardinality_equality":{"name":"default__test_cardinality_equality","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/cardinality_equality.sql","original_file_path":"macros/generic_tests/cardinality_equality.sql","unique_id":"macro.dbt_utils.default__test_cardinality_equality","macro_sql":"{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.except"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.223372,"supported_languages":null},"macro.dbt_utils.test_expression_is_true":{"name":"test_expression_is_true","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/expression_is_true.sql","original_file_path":"macros/generic_tests/expression_is_true.sql","unique_id":"macro.dbt_utils.test_expression_is_true","macro_sql":"{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_expression_is_true"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.223746,"supported_languages":null},"macro.dbt_utils.default__test_expression_is_true":{"name":"default__test_expression_is_true","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/expression_is_true.sql","original_file_path":"macros/generic_tests/expression_is_true.sql","unique_id":"macro.dbt_utils.default__test_expression_is_true","macro_sql":"{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.should_store_failures"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.224084,"supported_languages":null},"macro.dbt_utils.test_not_null_proportion":{"name":"test_not_null_proportion","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_null_proportion.sql","original_file_path":"macros/generic_tests/not_null_proportion.sql","unique_id":"macro.dbt_utils.test_not_null_proportion","macro_sql":"{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__test_not_null_proportion"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.224688,"supported_languages":null},"macro.dbt_utils.default__test_not_null_proportion":{"name":"default__test_not_null_proportion","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_null_proportion.sql","original_file_path":"macros/generic_tests/not_null_proportion.sql","unique_id":"macro.dbt_utils.default__test_not_null_proportion","macro_sql":"{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.225458,"supported_languages":null},"macro.dbt_utils.test_sequential_values":{"name":"test_sequential_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/sequential_values.sql","original_file_path":"macros/generic_tests/sequential_values.sql","unique_id":"macro.dbt_utils.test_sequential_values","macro_sql":"{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_sequential_values"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.226315,"supported_languages":null},"macro.dbt_utils.default__test_sequential_values":{"name":"default__test_sequential_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/sequential_values.sql","original_file_path":"macros/generic_tests/sequential_values.sql","unique_id":"macro.dbt_utils.default__test_sequential_values","macro_sql":"{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.slugify","macro.dbt.type_timestamp","macro.dbt.dateadd"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.22718,"supported_languages":null},"macro.dbt_utils.test_equality":{"name":"test_equality","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/equality.sql","original_file_path":"macros/generic_tests/equality.sql","unique_id":"macro.dbt_utils.test_equality","macro_sql":"{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_equality"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2278662,"supported_languages":null},"macro.dbt_utils.default__test_equality":{"name":"default__test_equality","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/equality.sql","original_file_path":"macros/generic_tests/equality.sql","unique_id":"macro.dbt_utils.default__test_equality","macro_sql":"{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema — this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral","macro.dbt.except"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.228699,"supported_languages":null},"macro.dbt_utils.test_not_empty_string":{"name":"test_not_empty_string","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_empty_string.sql","original_file_path":"macros/generic_tests/not_empty_string.sql","unique_id":"macro.dbt_utils.test_not_empty_string","macro_sql":"{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_not_empty_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.229192,"supported_languages":null},"macro.dbt_utils.default__test_not_empty_string":{"name":"default__test_not_empty_string","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_empty_string.sql","original_file_path":"macros/generic_tests/not_empty_string.sql","unique_id":"macro.dbt_utils.default__test_not_empty_string","macro_sql":"{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.229473,"supported_languages":null},"macro.dbt_utils.test_mutually_exclusive_ranges":{"name":"test_mutually_exclusive_ranges","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/mutually_exclusive_ranges.sql","original_file_path":"macros/generic_tests/mutually_exclusive_ranges.sql","unique_id":"macro.dbt_utils.test_mutually_exclusive_ranges","macro_sql":"{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_mutually_exclusive_ranges"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.232857,"supported_languages":null},"macro.dbt_utils.default__test_mutually_exclusive_ranges":{"name":"default__test_mutually_exclusive_ranges","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/mutually_exclusive_ranges.sql","original_file_path":"macros/generic_tests/mutually_exclusive_ranges.sql","unique_id":"macro.dbt_utils.default__test_mutually_exclusive_ranges","macro_sql":"{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.234356,"supported_languages":null},"macro.dbt_utils.pretty_log_format":{"name":"pretty_log_format","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/pretty_log_format.sql","original_file_path":"macros/jinja_helpers/pretty_log_format.sql","unique_id":"macro.dbt_utils.pretty_log_format","macro_sql":"{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__pretty_log_format"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2346199,"supported_languages":null},"macro.dbt_utils.default__pretty_log_format":{"name":"default__pretty_log_format","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/pretty_log_format.sql","original_file_path":"macros/jinja_helpers/pretty_log_format.sql","unique_id":"macro.dbt_utils.default__pretty_log_format","macro_sql":"{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.pretty_time"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.234777,"supported_languages":null},"macro.dbt_utils._is_relation":{"name":"_is_relation","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/_is_relation.sql","original_file_path":"macros/jinja_helpers/_is_relation.sql","unique_id":"macro.dbt_utils._is_relation","macro_sql":"{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.235198,"supported_languages":null},"macro.dbt_utils.pretty_time":{"name":"pretty_time","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/pretty_time.sql","original_file_path":"macros/jinja_helpers/pretty_time.sql","unique_id":"macro.dbt_utils.pretty_time","macro_sql":"{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__pretty_time"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.235456,"supported_languages":null},"macro.dbt_utils.default__pretty_time":{"name":"default__pretty_time","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/pretty_time.sql","original_file_path":"macros/jinja_helpers/pretty_time.sql","unique_id":"macro.dbt_utils.default__pretty_time","macro_sql":"{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.235639,"supported_languages":null},"macro.dbt_utils.log_info":{"name":"log_info","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/log_info.sql","original_file_path":"macros/jinja_helpers/log_info.sql","unique_id":"macro.dbt_utils.log_info","macro_sql":"{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__log_info"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.235877,"supported_languages":null},"macro.dbt_utils.default__log_info":{"name":"default__log_info","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/log_info.sql","original_file_path":"macros/jinja_helpers/log_info.sql","unique_id":"macro.dbt_utils.default__log_info","macro_sql":"{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.pretty_log_format"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.236041,"supported_languages":null},"macro.dbt_utils.slugify":{"name":"slugify","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/slugify.sql","original_file_path":"macros/jinja_helpers/slugify.sql","unique_id":"macro.dbt_utils.slugify","macro_sql":"{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2366168,"supported_languages":null},"macro.dbt_utils._is_ephemeral":{"name":"_is_ephemeral","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/_is_ephemeral.sql","original_file_path":"macros/jinja_helpers/_is_ephemeral.sql","unique_id":"macro.dbt_utils._is_ephemeral","macro_sql":"{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2374,"supported_languages":null},"macro.dbt_utils.get_intervals_between":{"name":"get_intervals_between","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/date_spine.sql","original_file_path":"macros/sql/date_spine.sql","unique_id":"macro.dbt_utils.get_intervals_between","macro_sql":"{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_intervals_between"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.23809,"supported_languages":null},"macro.dbt_utils.default__get_intervals_between":{"name":"default__get_intervals_between","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/date_spine.sql","original_file_path":"macros/sql/date_spine.sql","unique_id":"macro.dbt_utils.default__get_intervals_between","macro_sql":"{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.datediff"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2386408,"supported_languages":null},"macro.dbt_utils.date_spine":{"name":"date_spine","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/date_spine.sql","original_file_path":"macros/sql/date_spine.sql","unique_id":"macro.dbt_utils.date_spine","macro_sql":"{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__date_spine"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.238858,"supported_languages":null},"macro.dbt_utils.default__date_spine":{"name":"default__date_spine","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/date_spine.sql","original_file_path":"macros/sql/date_spine.sql","unique_id":"macro.dbt_utils.default__date_spine","macro_sql":"{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.generate_series","macro.dbt_utils.get_intervals_between","macro.dbt.dateadd"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2392142,"supported_languages":null},"macro.dbt_utils.safe_subtract":{"name":"safe_subtract","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_subtract.sql","original_file_path":"macros/sql/safe_subtract.sql","unique_id":"macro.dbt_utils.safe_subtract","macro_sql":"{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__safe_subtract"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.239594,"supported_languages":null},"macro.dbt_utils.default__safe_subtract":{"name":"default__safe_subtract","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_subtract.sql","original_file_path":"macros/sql/safe_subtract.sql","unique_id":"macro.dbt_utils.default__safe_subtract","macro_sql":"\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2401059,"supported_languages":null},"macro.dbt_utils.nullcheck_table":{"name":"nullcheck_table","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/nullcheck_table.sql","original_file_path":"macros/sql/nullcheck_table.sql","unique_id":"macro.dbt_utils.nullcheck_table","macro_sql":"{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__nullcheck_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2404008,"supported_languages":null},"macro.dbt_utils.default__nullcheck_table":{"name":"default__nullcheck_table","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/nullcheck_table.sql","original_file_path":"macros/sql/nullcheck_table.sql","unique_id":"macro.dbt_utils.default__nullcheck_table","macro_sql":"{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral","macro.dbt_utils.nullcheck"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.240725,"supported_languages":null},"macro.dbt_utils.get_relations_by_pattern":{"name":"get_relations_by_pattern","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_relations_by_pattern.sql","original_file_path":"macros/sql/get_relations_by_pattern.sql","unique_id":"macro.dbt_utils.get_relations_by_pattern","macro_sql":"{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_relations_by_pattern"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.241386,"supported_languages":null},"macro.dbt_utils.default__get_relations_by_pattern":{"name":"default__get_relations_by_pattern","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_relations_by_pattern.sql","original_file_path":"macros/sql/get_relations_by_pattern.sql","unique_id":"macro.dbt_utils.default__get_relations_by_pattern","macro_sql":"{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt_utils.get_tables_by_pattern_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.242244,"supported_languages":null},"macro.dbt_utils.get_powers_of_two":{"name":"get_powers_of_two","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_series.sql","original_file_path":"macros/sql/generate_series.sql","unique_id":"macro.dbt_utils.get_powers_of_two","macro_sql":"{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_powers_of_two"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.243038,"supported_languages":null},"macro.dbt_utils.default__get_powers_of_two":{"name":"default__get_powers_of_two","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_series.sql","original_file_path":"macros/sql/generate_series.sql","unique_id":"macro.dbt_utils.default__get_powers_of_two","macro_sql":"{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.243428,"supported_languages":null},"macro.dbt_utils.generate_series":{"name":"generate_series","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_series.sql","original_file_path":"macros/sql/generate_series.sql","unique_id":"macro.dbt_utils.generate_series","macro_sql":"{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__generate_series"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.243607,"supported_languages":null},"macro.dbt_utils.default__generate_series":{"name":"default__generate_series","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_series.sql","original_file_path":"macros/sql/generate_series.sql","unique_id":"macro.dbt_utils.default__generate_series","macro_sql":"{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.get_powers_of_two"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.244095,"supported_languages":null},"macro.dbt_utils.get_relations_by_prefix":{"name":"get_relations_by_prefix","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_relations_by_prefix.sql","original_file_path":"macros/sql/get_relations_by_prefix.sql","unique_id":"macro.dbt_utils.get_relations_by_prefix","macro_sql":"{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_relations_by_prefix"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.244759,"supported_languages":null},"macro.dbt_utils.default__get_relations_by_prefix":{"name":"default__get_relations_by_prefix","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_relations_by_prefix.sql","original_file_path":"macros/sql/get_relations_by_prefix.sql","unique_id":"macro.dbt_utils.default__get_relations_by_prefix","macro_sql":"{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt_utils.get_tables_by_prefix_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.245566,"supported_languages":null},"macro.dbt_utils.get_tables_by_prefix_sql":{"name":"get_tables_by_prefix_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_prefix_sql.sql","original_file_path":"macros/sql/get_tables_by_prefix_sql.sql","unique_id":"macro.dbt_utils.get_tables_by_prefix_sql","macro_sql":"{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_tables_by_prefix_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2459462,"supported_languages":null},"macro.dbt_utils.default__get_tables_by_prefix_sql":{"name":"default__get_tables_by_prefix_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_prefix_sql.sql","original_file_path":"macros/sql/get_tables_by_prefix_sql.sql","unique_id":"macro.dbt_utils.default__get_tables_by_prefix_sql","macro_sql":"{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.get_tables_by_pattern_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2462132,"supported_languages":null},"macro.dbt_utils.star":{"name":"star","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/star.sql","original_file_path":"macros/sql/star.sql","unique_id":"macro.dbt_utils.star","macro_sql":"{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__star"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.247442,"supported_languages":null},"macro.dbt_utils.default__star":{"name":"default__star","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/star.sql","original_file_path":"macros/sql/star.sql","unique_id":"macro.dbt_utils.default__star","macro_sql":"{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral","macro.dbt_utils.get_filtered_columns_in_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.248821,"supported_languages":null},"macro.dbt_utils.unpivot":{"name":"unpivot","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/unpivot.sql","original_file_path":"macros/sql/unpivot.sql","unique_id":"macro.dbt_utils.unpivot","macro_sql":"{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__unpivot"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.250261,"supported_languages":null},"macro.dbt_utils.default__unpivot":{"name":"default__unpivot","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/unpivot.sql","original_file_path":"macros/sql/unpivot.sql","unique_id":"macro.dbt_utils.default__unpivot","macro_sql":"{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral","macro.dbt.type_string","macro.dbt.cast_bool_to_text"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.252167,"supported_languages":null},"macro.dbt_utils.safe_divide":{"name":"safe_divide","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_divide.sql","original_file_path":"macros/sql/safe_divide.sql","unique_id":"macro.dbt_utils.safe_divide","macro_sql":"{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__safe_divide"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.252456,"supported_languages":null},"macro.dbt_utils.default__safe_divide":{"name":"default__safe_divide","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_divide.sql","original_file_path":"macros/sql/safe_divide.sql","unique_id":"macro.dbt_utils.default__safe_divide","macro_sql":"{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.252584,"supported_languages":null},"macro.dbt_utils.union_relations":{"name":"union_relations","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/union.sql","original_file_path":"macros/sql/union.sql","unique_id":"macro.dbt_utils.union_relations","macro_sql":"{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__union_relations"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.25585,"supported_languages":null},"macro.dbt_utils.default__union_relations":{"name":"default__union_relations","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/union.sql","original_file_path":"macros/sql/union.sql","unique_id":"macro.dbt_utils.default__union_relations","macro_sql":"\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral","macro.dbt.string_literal","macro.dbt.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.259307,"supported_languages":null},"macro.dbt_utils.group_by":{"name":"group_by","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/groupby.sql","original_file_path":"macros/sql/groupby.sql","unique_id":"macro.dbt_utils.group_by","macro_sql":"{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__group_by"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.259598,"supported_languages":null},"macro.dbt_utils.default__group_by":{"name":"default__group_by","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/groupby.sql","original_file_path":"macros/sql/groupby.sql","unique_id":"macro.dbt_utils.default__group_by","macro_sql":"\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.259831,"supported_languages":null},"macro.dbt_utils.deduplicate":{"name":"deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.deduplicate","macro_sql":"{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__deduplicate"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.260551,"supported_languages":null},"macro.dbt_utils.default__deduplicate":{"name":"default__deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.default__deduplicate","macro_sql":"\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.260761,"supported_languages":null},"macro.dbt_utils.redshift__deduplicate":{"name":"redshift__deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.redshift__deduplicate","macro_sql":"{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__deduplicate"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.260957,"supported_languages":null},"macro.dbt_utils.postgres__deduplicate":{"name":"postgres__deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.postgres__deduplicate","macro_sql":"\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.261135,"supported_languages":null},"macro.dbt_utils.snowflake__deduplicate":{"name":"snowflake__deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.snowflake__deduplicate","macro_sql":"\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.261291,"supported_languages":null},"macro.dbt_utils.bigquery__deduplicate":{"name":"bigquery__deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.bigquery__deduplicate","macro_sql":"\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.261452,"supported_languages":null},"macro.dbt_utils.surrogate_key":{"name":"surrogate_key","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/surrogate_key.sql","original_file_path":"macros/sql/surrogate_key.sql","unique_id":"macro.dbt_utils.surrogate_key","macro_sql":"{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__surrogate_key"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.261822,"supported_languages":null},"macro.dbt_utils.default__surrogate_key":{"name":"default__surrogate_key","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/surrogate_key.sql","original_file_path":"macros/sql/surrogate_key.sql","unique_id":"macro.dbt_utils.default__surrogate_key","macro_sql":"\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2620459,"supported_languages":null},"macro.dbt_utils.safe_add":{"name":"safe_add","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_add.sql","original_file_path":"macros/sql/safe_add.sql","unique_id":"macro.dbt_utils.safe_add","macro_sql":"{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__safe_add"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.262403,"supported_languages":null},"macro.dbt_utils.default__safe_add":{"name":"default__safe_add","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_add.sql","original_file_path":"macros/sql/safe_add.sql","unique_id":"macro.dbt_utils.default__safe_add","macro_sql":"\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.262912,"supported_languages":null},"macro.dbt_utils.nullcheck":{"name":"nullcheck","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/nullcheck.sql","original_file_path":"macros/sql/nullcheck.sql","unique_id":"macro.dbt_utils.nullcheck","macro_sql":"{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__nullcheck"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.263242,"supported_languages":null},"macro.dbt_utils.default__nullcheck":{"name":"default__nullcheck","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/nullcheck.sql","original_file_path":"macros/sql/nullcheck.sql","unique_id":"macro.dbt_utils.default__nullcheck","macro_sql":"{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.263554,"supported_languages":null},"macro.dbt_utils.get_tables_by_pattern_sql":{"name":"get_tables_by_pattern_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_pattern_sql.sql","original_file_path":"macros/sql/get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils.get_tables_by_pattern_sql","macro_sql":"{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_tables_by_pattern_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.265235,"supported_languages":null},"macro.dbt_utils.default__get_tables_by_pattern_sql":{"name":"default__get_tables_by_pattern_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_pattern_sql.sql","original_file_path":"macros/sql/get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils.default__get_tables_by_pattern_sql","macro_sql":"{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.get_table_types_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.26558,"supported_languages":null},"macro.dbt_utils.bigquery__get_tables_by_pattern_sql":{"name":"bigquery__get_tables_by_pattern_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_pattern_sql.sql","original_file_path":"macros/sql/get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils.bigquery__get_tables_by_pattern_sql","macro_sql":"{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils._bigquery__get_matching_schemata","macro.dbt_utils.get_table_types_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.266339,"supported_languages":null},"macro.dbt_utils._bigquery__get_matching_schemata":{"name":"_bigquery__get_matching_schemata","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_pattern_sql.sql","original_file_path":"macros/sql/get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils._bigquery__get_matching_schemata","macro_sql":"{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2668202,"supported_languages":null},"macro.dbt_utils.get_column_values":{"name":"get_column_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_column_values.sql","original_file_path":"macros/sql/get_column_values.sql","unique_id":"macro.dbt_utils.get_column_values","macro_sql":"{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_column_values"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.267922,"supported_languages":null},"macro.dbt_utils.default__get_column_values":{"name":"default__get_column_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_column_values.sql","original_file_path":"macros/sql/get_column_values.sql","unique_id":"macro.dbt_utils.default__get_column_values","macro_sql":"{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_ephemeral","macro.dbt.load_relation","macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2693682,"supported_languages":null},"macro.dbt_utils.pivot":{"name":"pivot","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/pivot.sql","original_file_path":"macros/sql/pivot.sql","unique_id":"macro.dbt_utils.pivot","macro_sql":"{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__pivot"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.270396,"supported_languages":null},"macro.dbt_utils.default__pivot":{"name":"default__pivot","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/pivot.sql","original_file_path":"macros/sql/pivot.sql","unique_id":"macro.dbt_utils.default__pivot","macro_sql":"{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.escape_single_quotes","macro.dbt_utils.slugify"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2712011,"supported_languages":null},"macro.dbt_utils.get_filtered_columns_in_relation":{"name":"get_filtered_columns_in_relation","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_filtered_columns_in_relation.sql","original_file_path":"macros/sql/get_filtered_columns_in_relation.sql","unique_id":"macro.dbt_utils.get_filtered_columns_in_relation","macro_sql":"{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_filtered_columns_in_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.271662,"supported_languages":null},"macro.dbt_utils.default__get_filtered_columns_in_relation":{"name":"default__get_filtered_columns_in_relation","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_filtered_columns_in_relation.sql","original_file_path":"macros/sql/get_filtered_columns_in_relation.sql","unique_id":"macro.dbt_utils.default__get_filtered_columns_in_relation","macro_sql":"{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.272347,"supported_languages":null},"macro.dbt_utils.width_bucket":{"name":"width_bucket","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/width_bucket.sql","original_file_path":"macros/sql/width_bucket.sql","unique_id":"macro.dbt_utils.width_bucket","macro_sql":"{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__width_bucket"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.273098,"supported_languages":null},"macro.dbt_utils.default__width_bucket":{"name":"default__width_bucket","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/width_bucket.sql","original_file_path":"macros/sql/width_bucket.sql","unique_id":"macro.dbt_utils.default__width_bucket","macro_sql":"{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.safe_cast","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.273538,"supported_languages":null},"macro.dbt_utils.snowflake__width_bucket":{"name":"snowflake__width_bucket","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/width_bucket.sql","original_file_path":"macros/sql/width_bucket.sql","unique_id":"macro.dbt_utils.snowflake__width_bucket","macro_sql":"{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.27372,"supported_languages":null},"macro.dbt_utils.get_query_results_as_dict":{"name":"get_query_results_as_dict","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_query_results_as_dict.sql","original_file_path":"macros/sql/get_query_results_as_dict.sql","unique_id":"macro.dbt_utils.get_query_results_as_dict","macro_sql":"{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_query_results_as_dict"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.274086,"supported_languages":null},"macro.dbt_utils.default__get_query_results_as_dict":{"name":"default__get_query_results_as_dict","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_query_results_as_dict.sql","original_file_path":"macros/sql/get_query_results_as_dict.sql","unique_id":"macro.dbt_utils.default__get_query_results_as_dict","macro_sql":"{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.274645,"supported_languages":null},"macro.dbt_utils.generate_surrogate_key":{"name":"generate_surrogate_key","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_surrogate_key.sql","original_file_path":"macros/sql/generate_surrogate_key.sql","unique_id":"macro.dbt_utils.generate_surrogate_key","macro_sql":"{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__generate_surrogate_key"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.275085,"supported_languages":null},"macro.dbt_utils.default__generate_surrogate_key":{"name":"default__generate_surrogate_key","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_surrogate_key.sql","original_file_path":"macros/sql/generate_surrogate_key.sql","unique_id":"macro.dbt_utils.default__generate_surrogate_key","macro_sql":"\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.type_string","macro.dbt.hash","macro.dbt.concat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.275705,"supported_languages":null},"macro.dbt_utils.get_table_types_sql":{"name":"get_table_types_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_table_types_sql.sql","original_file_path":"macros/sql/get_table_types_sql.sql","unique_id":"macro.dbt_utils.get_table_types_sql","macro_sql":"{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_utils.default__get_table_types_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.276236,"supported_languages":null},"macro.dbt_utils.default__get_table_types_sql":{"name":"default__get_table_types_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_table_types_sql.sql","original_file_path":"macros/sql/get_table_types_sql.sql","unique_id":"macro.dbt_utils.default__get_table_types_sql","macro_sql":"{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2763689,"supported_languages":null},"macro.dbt_utils.postgres__get_table_types_sql":{"name":"postgres__get_table_types_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_table_types_sql.sql","original_file_path":"macros/sql/get_table_types_sql.sql","unique_id":"macro.dbt_utils.postgres__get_table_types_sql","macro_sql":"{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.276503,"supported_languages":null},"macro.dbt_utils.databricks__get_table_types_sql":{"name":"databricks__get_table_types_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_table_types_sql.sql","original_file_path":"macros/sql/get_table_types_sql.sql","unique_id":"macro.dbt_utils.databricks__get_table_types_sql","macro_sql":"{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.27664,"supported_languages":null},"macro.dbt_utils.get_single_value":{"name":"get_single_value","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_single_value.sql","original_file_path":"macros/sql/get_single_value.sql","unique_id":"macro.dbt_utils.get_single_value","macro_sql":"{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_single_value"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.277141,"supported_languages":null},"macro.dbt_utils.default__get_single_value":{"name":"default__get_single_value","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_single_value.sql","original_file_path":"macros/sql/get_single_value.sql","unique_id":"macro.dbt_utils.default__get_single_value","macro_sql":"{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.277916,"supported_languages":null},"macro.dbt_utils.degrees_to_radians":{"name":"degrees_to_radians","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/haversine_distance.sql","original_file_path":"macros/sql/haversine_distance.sql","unique_id":"macro.dbt_utils.degrees_to_radians","macro_sql":"{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.278934,"supported_languages":null},"macro.dbt_utils.haversine_distance":{"name":"haversine_distance","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/haversine_distance.sql","original_file_path":"macros/sql/haversine_distance.sql","unique_id":"macro.dbt_utils.haversine_distance","macro_sql":"{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__haversine_distance"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.279199,"supported_languages":null},"macro.dbt_utils.default__haversine_distance":{"name":"default__haversine_distance","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/haversine_distance.sql","original_file_path":"macros/sql/haversine_distance.sql","unique_id":"macro.dbt_utils.default__haversine_distance","macro_sql":"{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.279733,"supported_languages":null},"macro.dbt_utils.bigquery__haversine_distance":{"name":"bigquery__haversine_distance","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/haversine_distance.sql","original_file_path":"macros/sql/haversine_distance.sql","unique_id":"macro.dbt_utils.bigquery__haversine_distance","macro_sql":"{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils.degrees_to_radians"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.280498,"supported_languages":null},"macro.audit_helper.compare_row_counts":{"name":"compare_row_counts","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_row_counts.sql","original_file_path":"macros/compare_row_counts.sql","unique_id":"macro.audit_helper.compare_row_counts","macro_sql":"{% macro compare_row_counts(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_row_counts', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.audit_helper.default__compare_row_counts"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.280863,"supported_languages":null},"macro.audit_helper.default__compare_row_counts":{"name":"default__compare_row_counts","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_row_counts.sql","original_file_path":"macros/compare_row_counts.sql","unique_id":"macro.audit_helper.default__compare_row_counts","macro_sql":"{% macro default__compare_row_counts(a_relation, b_relation) %}\n\n        select\n            '{{ a_relation }}' as relation_name,\n            count(*) as total_records\n        from {{ a_relation }}\n\n        union all\n\n        select\n            '{{ b_relation }}' as relation_name,\n            count(*) as total_records\n        from {{ b_relation }}\n  \n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.281045,"supported_languages":null},"macro.audit_helper.compare_relations":{"name":"compare_relations","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relations.sql","original_file_path":"macros/compare_relations.sql","unique_id":"macro.audit_helper.compare_relations","macro_sql":"{% macro compare_relations(a_relation, b_relation, exclude_columns=[], primary_key=None, summarize=true, limit=None) %}\n\n{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n{% set column_selection %}\n\n  {% for column_name in column_names %} \n    {{ adapter.quote(column_name) }} \n    {% if not loop.last %}\n      , \n    {% endif %} \n  {% endfor %}\n\n{% endset %}\n\n{% set a_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ a_relation }}\n{% endset %}\n\n{% set b_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ b_relation }}\n{% endset %}\n\n{{ audit_helper.compare_queries(a_query, b_query, primary_key, summarize, limit) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.get_filtered_columns_in_relation","macro.audit_helper.compare_queries"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.281981,"supported_languages":null},"macro.audit_helper.compare_all_columns":{"name":"compare_all_columns","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_all_columns.sql","original_file_path":"macros/compare_all_columns.sql","unique_id":"macro.audit_helper.compare_all_columns","macro_sql":"{% macro compare_all_columns( a_relation, b_relation, primary_key,  exclude_columns=[],summarize=true ) -%}\n  {{ return(adapter.dispatch('compare_all_columns', 'audit_helper')( a_relation, b_relation, primary_key, exclude_columns, summarize )) }}\n{%- endmacro %}","depends_on":{"macros":["macro.audit_helper.default__compare_all_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.283486,"supported_languages":null},"macro.audit_helper.default__compare_all_columns":{"name":"default__compare_all_columns","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_all_columns.sql","original_file_path":"macros/compare_all_columns.sql","unique_id":"macro.audit_helper.default__compare_all_columns","macro_sql":"{% macro default__compare_all_columns( a_relation, b_relation, primary_key, exclude_columns=[], summarize=true ) -%}\n\n  {% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n  {# We explictly select the primary_key and rename to support any sql as the primary_key -\n  a column or concatenated columns. this assumes that a_relation and b_relation do not already \n  have a field named dbt_audit_helper_pk #}\n\n  {% set a_query %}      \n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ a_relation }}\n  {% endset %}\n\n  {% set b_query %}\n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ b_relation }}\n  {% endset %}\n\n  {% for column_name in column_names %}\n\n    {% set audit_query = audit_helper.compare_column_values_verbose(\n      a_query=a_query,\n      b_query=b_query,\n      primary_key=\"dbt_audit_helper_pk\",\n      column_to_compare=column_name\n    ) %}\n\n    /*  Create a query combining results from all columns so that the user, or the \n    test suite, can examine all at once.\n    */\n    \n    {% if loop.first %}\n\n    /*  Create a CTE that wraps all the unioned subqueries that are created\n        in this for loop\n    */\n      with main as ( \n\n    {% endif %}\n\n    /*  There will be one audit_query subquery for each column\n    */\n    ( {{ audit_query }} )\n\n    {% if not loop.last %}\n\n      union all\n\n    {% else %}\n\n    ), \n    \n      {%- if summarize %}\n\n        final as (\n          select\n            upper(column_name) as column_name,\n            sum(case when perfect_match then 1 else 0 end) as perfect_match,\n            sum(case when null_in_a then 1 else 0 end) as null_in_a,\n            sum(case when null_in_b then 1 else 0 end) as null_in_b,\n            sum(case when missing_from_a then 1 else 0 end) as missing_from_a,\n            sum(case when missing_from_b then 1 else 0 end) as missing_from_b,\n            sum(case when conflicting_values then 1 else 0 end) as conflicting_values\n          from main\n          group by 1\n          order by column_name\n        )\n\n      {%- else %}\n\n        final as (\n          select\n            primary_key,           \n            upper(column_name) as column_name,\n            perfect_match,\n            null_in_a,\n            null_in_b,\n            missing_from_a,\n            missing_from_b,\n            conflicting_values\n          from main    \n          order by primary_key\n        )\n\n      {%- endif %}\n\n      select * from final\n    \n    {% endif %}\n\n  {% endfor %}\n    \n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.get_filtered_columns_in_relation","macro.audit_helper.compare_column_values_verbose"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.284405,"supported_languages":null},"macro.audit_helper.compare_which_columns_differ":{"name":"compare_which_columns_differ","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_which_columns_differ.sql","original_file_path":"macros/compare_which_columns_differ.sql","unique_id":"macro.audit_helper.compare_which_columns_differ","macro_sql":"{% macro compare_which_columns_differ(a_relation, b_relation, primary_key, exclude_columns=[]) %}\n    {{ return(adapter.dispatch('compare_which_columns_differ', 'audit_helper')(a_relation, b_relation, primary_key, exclude_columns)) }}\n{% endmacro %}","depends_on":{"macros":["macro.audit_helper.default__compare_which_columns_differ"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2856672,"supported_languages":null},"macro.audit_helper.default__compare_which_columns_differ":{"name":"default__compare_which_columns_differ","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_which_columns_differ.sql","original_file_path":"macros/compare_which_columns_differ.sql","unique_id":"macro.audit_helper.default__compare_which_columns_differ","macro_sql":"{% macro default__compare_which_columns_differ(a_relation, b_relation, primary_key, exclude_columns=[]) %}  \n\n{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\nwith bool_or as (\n\n    select \n        true as anchor\n        {% for column in column_names %}\n            {% set column_name = adapter.quote(column) %}\n            {% set compare_statement %}\n                ((a.{{ column_name }} != b.{{ column_name }})\n                or (a.{{ column_name }} is null and b.{{ column_name }} is not null)\n                or (a.{{ column_name }} is not null and b.{{ column_name }} is null))\n            {% endset %}\n        \n        , {{ dbt.bool_or(compare_statement) }} as {{ column | lower }}_has_difference\n    \n        {% endfor %}\n    from {{ a_relation }} as a\n    inner join {{ b_relation }} as b\n        on a.{{ primary_key }} = b.{{ primary_key }}\n\n)\n\n{% for column in column_names %}\n    \n    select \n        '{{ column }}' as column_name, \n        {{ column | lower }}_has_difference as has_difference\n    \n    from bool_or\n\n    {% if not loop.last %}\n        \n    union all \n\n    {% endif %}\n\n{% endfor %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.get_filtered_columns_in_relation","macro.dbt.bool_or"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.286478,"supported_languages":null},"macro.audit_helper.compare_column_values_verbose":{"name":"compare_column_values_verbose","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_column_values_verbose.sql","original_file_path":"macros/compare_column_values_verbose.sql","unique_id":"macro.audit_helper.compare_column_values_verbose","macro_sql":"{% macro compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values_verbose', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.audit_helper.default__compare_column_values_verbose"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.288744,"supported_languages":null},"macro.audit_helper.default__compare_column_values_verbose":{"name":"default__compare_column_values_verbose","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_column_values_verbose.sql","original_file_path":"macros/compare_column_values_verbose.sql","unique_id":"macro.audit_helper.default__compare_column_values_verbose","macro_sql":"{% macro default__compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n)\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as primary_key,\n\n        {% if target.name == 'postgres' or target.name == 'redshift' %}\n            '{{ column_to_compare }}'::text as column_name,\n        {% else %}\n            '{{ column_to_compare }}' as column_name,\n        {% endif %}\n\n        coalesce(\n            a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} and \n                a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null,\n            (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null),\n            false\n        ) as perfect_match,\n        a_query.{{ column_to_compare }} is null and a_query.{{ primary_key }} is not null as null_in_a,\n        b_query.{{ column_to_compare }} is null and b_query.{{ primary_key }} is not null as null_in_b,\n        a_query.{{ primary_key }} is null as missing_from_a,\n        b_query.{{ primary_key }} is null as missing_from_b,\n        coalesce(\n            a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null and \n            -- ensure that neither value is missing before considering it a conflict\n            (\n                a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} or -- two not-null values that do not match\n                (a_query.{{ column_to_compare }} is not null and b_query.{{ column_to_compare }} is null) or -- null in b and not null in a\n                (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is not null) -- null in a and not null in b\n            ), \n            false\n        ) as conflicting_values\n        -- considered a conflict if the values do not match AND at least one of the values is not null.\n\n    from a_query\n\n    full outer join b_query on (a_query.{{ primary_key }} = b_query.{{ primary_key }})\n\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.28953,"supported_languages":null},"macro.audit_helper.compare_column_values":{"name":"compare_column_values","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_column_values.sql","original_file_path":"macros/compare_column_values.sql","unique_id":"macro.audit_helper.compare_column_values","macro_sql":"{% macro compare_column_values(a_query, b_query, primary_key, column_to_compare, emojis=True, a_relation_name='a', b_relation_name='b') -%}\n  {{ return(adapter.dispatch('compare_column_values', 'audit_helper')(a_query, b_query, primary_key, column_to_compare, emojis, a_relation_name, b_relation_name)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.audit_helper.default__compare_column_values"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.292555,"supported_languages":null},"macro.audit_helper.default__compare_column_values":{"name":"default__compare_column_values","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_column_values.sql","original_file_path":"macros/compare_column_values.sql","unique_id":"macro.audit_helper.default__compare_column_values","macro_sql":"{% macro default__compare_column_values(a_query, b_query, primary_key, column_to_compare, emojis, a_relation_name, b_relation_name) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n),\n\njoined as (\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as {{ primary_key }},\n        a_query.{{ column_to_compare }} as a_query_value,\n        b_query.{{ column_to_compare }} as b_query_value,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then '{% if emojis %}✅: {% endif %}perfect match'\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then '{% if emojis %}✅: {% endif %}both are null'\n            when a_query.{{ primary_key }} is null then '{% if emojis %}🤷: {% endif %}missing from {{ a_relation_name }}'\n            when b_query.{{ primary_key }} is null then '{% if emojis %}🤷: {% endif %}missing from {{ b_relation_name }}'\n            when a_query.{{ column_to_compare }} is null then '{% if emojis %}🤷: {% endif %}value is null in {{ a_relation_name }} only'\n            when b_query.{{ column_to_compare }} is null then '{% if emojis %}🤷: {% endif %}value is null in {{ b_relation_name }} only'\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then '{% if emojis %}❌: {% endif %}‍values do not match'\n            else 'unknown' -- this should never happen\n        end as match_status,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then 0\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then 1\n            when a_query.{{ primary_key }} is null then 2\n            when b_query.{{ primary_key }} is null then 3\n            when a_query.{{ column_to_compare }} is null then 4\n            when b_query.{{ column_to_compare }} is null then 5\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then 6\n            else 7 -- this should never happen\n        end as match_order\n\n    from a_query\n\n    full outer join b_query on a_query.{{ primary_key }} = b_query.{{ primary_key }}\n),\n\naggregated as (\n    select\n        '{{ column_to_compare }}' as column_name,\n        match_status,\n        match_order,\n        count(*) as count_records\n    from joined\n\n    group by column_name, match_status, match_order\n)\n\nselect\n    column_name,\n    match_status,\n    count_records,\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\n\nfrom aggregated\n\norder by match_order\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2937758,"supported_languages":null},"macro.audit_helper.compare_queries":{"name":"compare_queries","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_queries.sql","original_file_path":"macros/compare_queries.sql","unique_id":"macro.audit_helper.compare_queries","macro_sql":"{% macro compare_queries(a_query, b_query, primary_key=None, summarize=true, limit=None) -%}\n  {{ return(adapter.dispatch('compare_queries', 'audit_helper')(a_query, b_query, primary_key, summarize, limit)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.audit_helper.default__compare_queries"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.294639,"supported_languages":null},"macro.audit_helper.default__compare_queries":{"name":"default__compare_queries","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_queries.sql","original_file_path":"macros/compare_queries.sql","unique_id":"macro.audit_helper.default__compare_queries","macro_sql":"{% macro default__compare_queries(a_query, b_query, primary_key=None, summarize=true, limit=None) %}\n\nwith a as (\n\n    {{ a_query }}\n\n),\n\nb as (\n\n    {{ b_query }}\n\n),\n\na_intersect_b as (\n\n    select * from a\n    {{ dbt.intersect() }}\n    select * from b\n\n),\n\na_except_b as (\n\n    select * from a\n    {{ dbt.except() }}\n    select * from b\n\n),\n\nb_except_a as (\n\n    select * from b\n    {{ dbt.except() }}\n    select * from a\n\n),\n\nall_records as (\n\n    select\n        *,\n        true as in_a,\n        true as in_b\n    from a_intersect_b\n\n    union all\n\n    select\n        *,\n        true as in_a,\n        false as in_b\n    from a_except_b\n\n    union all\n\n    select\n        *,\n        false as in_a,\n        true as in_b\n    from b_except_a\n\n),\n\n{%- if summarize %}\n\nsummary_stats as (\n\n    select\n\n        in_a,\n        in_b,\n        count(*) as count\n\n    from all_records\n    group by 1, 2\n\n),\n\nfinal as (\n\n    select\n\n        *,\n        round(100.0 * count / sum(count) over (), 2) as percent_of_total\n\n    from summary_stats\n    order by in_a desc, in_b desc\n\n)\n\n{%- else %}\n\nfinal as (\n    \n    select * from all_records\n    where not (in_a and in_b)\n    order by {{ primary_key ~ \", \" if primary_key is not none }} in_a desc, in_b desc\n\n)\n\n{%- endif %}\n\nselect * from final\n{%- if limit and not summarize %}\nlimit {{ limit }}\n{%- endif %}\n\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.intersect","macro.dbt.except"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.295219,"supported_languages":null},"macro.audit_helper.compare_relation_columns":{"name":"compare_relation_columns","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.compare_relation_columns","macro_sql":"{% macro compare_relation_columns(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_relation_columns', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.audit_helper.default__compare_relation_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.296253,"supported_languages":null},"macro.audit_helper.default__compare_relation_columns":{"name":"default__compare_relation_columns","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.default__compare_relation_columns","macro_sql":"{% macro default__compare_relation_columns(a_relation, b_relation) %}\n\nwith a_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(a_relation) }}\n),\n\nb_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(b_relation) }}\n)\n\nselect\n    column_name,\n    a_cols.ordinal_position as a_ordinal_position,\n    b_cols.ordinal_position as b_ordinal_position,\n    a_cols.data_type as a_data_type,\n    b_cols.data_type as b_data_type,\n    coalesce(a_cols.ordinal_position = b_cols.ordinal_position, false) as has_ordinal_position_match,\n    coalesce(a_cols.data_type = b_cols.data_type, false) as has_data_type_match,\n    a_cols.data_type is not null and b_cols.data_type is null as in_a_only,\n    b_cols.data_type is not null and a_cols.data_type is null as in_b_only,\n    b_cols.data_type is not null and a_cols.data_type is not null as in_both\nfrom a_cols\nfull outer join b_cols using (column_name)\norder by coalesce(a_cols.ordinal_position, b_cols.ordinal_position)\n\n{% endmacro %}","depends_on":{"macros":["macro.audit_helper.get_columns_in_relation_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.296478,"supported_languages":null},"macro.audit_helper.get_columns_in_relation_sql":{"name":"get_columns_in_relation_sql","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.get_columns_in_relation_sql","macro_sql":"{% macro get_columns_in_relation_sql(relation) %}\n\n{{ adapter.dispatch('get_columns_in_relation_sql', 'audit_helper')(relation) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.audit_helper.default__get_columns_in_relation_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.296635,"supported_languages":null},"macro.audit_helper.default__get_columns_in_relation_sql":{"name":"default__get_columns_in_relation_sql","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.default__get_columns_in_relation_sql","macro_sql":"{% macro default__get_columns_in_relation_sql(relation) %}\n    \n  {% set columns = adapter.get_columns_in_relation(relation) %}\n  {% for column in columns %}\n    select \n      {{ dbt.string_literal(column.name) }} as column_name, \n      {{ loop.index }} as ordinal_position,\n      {{ dbt.string_literal(column.data_type) }} as data_type\n\n  {% if not loop.last -%}\n    union all \n  {%- endif %}\n  {% endfor %}\n\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.string_literal"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.297023,"supported_languages":null},"macro.audit_helper.redshift__get_columns_in_relation_sql":{"name":"redshift__get_columns_in_relation_sql","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.redshift__get_columns_in_relation_sql","macro_sql":"{% macro redshift__get_columns_in_relation_sql(relation) %}\n  {# You can't store the results of an info schema query to a table/view in Redshift, because the data only lives on the leader node #}\n  {{ return (audit_helper.default__get_columns_in_relation_sql(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.audit_helper.default__get_columns_in_relation_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.297177,"supported_languages":null},"macro.audit_helper.snowflake__get_columns_in_relation_sql":{"name":"snowflake__get_columns_in_relation_sql","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.snowflake__get_columns_in_relation_sql","macro_sql":"{% macro snowflake__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/dev/louisa-may-alcott/plugins/snowflake/dbt/include/snowflake/macros/adapters.sql#L48\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from\n  {{ relation.information_schema('columns') }}\n\n  where table_name ilike '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema ilike '{{ relation.schema }}'\n    {% endif %}\n    {% if relation.database %}\n    and table_catalog ilike '{{ relation.database }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.information_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.297502,"supported_languages":null},"macro.audit_helper.postgres__get_columns_in_relation_sql":{"name":"postgres__get_columns_in_relation_sql","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.postgres__get_columns_in_relation_sql","macro_sql":"{% macro postgres__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/postgres/dbt/include/postgres/macros/adapters.sql#L32\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from {{ relation.information_schema('columns') }}\n  where table_name = '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema = '{{ relation.schema }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.information_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.297753,"supported_languages":null},"macro.audit_helper.bigquery__get_columns_in_relation_sql":{"name":"bigquery__get_columns_in_relation_sql","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.bigquery__get_columns_in_relation_sql","macro_sql":"{% macro bigquery__get_columns_in_relation_sql(relation) %}\n\n  select\n      ordinal_position,\n      column_name,\n      data_type\n\n  from `{{ relation.database }}`.`{{ relation.schema }}`.INFORMATION_SCHEMA.COLUMNS\n  where table_name = '{{ relation.identifier }}'\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.297921,"supported_languages":null},"macro.dbt_profiler.type_string":{"name":"type_string","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.type_string","macro_sql":"\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch(\"type_string\", macro_namespace=\"dbt_profiler\")()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.298959,"supported_languages":null},"macro.dbt_profiler.default__type_string":{"name":"default__type_string","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.default__type_string","macro_sql":"{%- macro default__type_string() -%}\n  varchar\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.299034,"supported_languages":null},"macro.dbt_profiler.bigquery__type_string":{"name":"bigquery__type_string","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.bigquery__type_string","macro_sql":"{%- macro bigquery__type_string() -%}\n  string\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2991009,"supported_languages":null},"macro.dbt_profiler.databricks__type_string":{"name":"databricks__type_string","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.databricks__type_string","macro_sql":"{%- macro databricks__type_string() -%}\n  string\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.29917,"supported_languages":null},"macro.dbt_profiler.is_numeric_dtype":{"name":"is_numeric_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.is_numeric_dtype","macro_sql":"\n\n{%- macro is_numeric_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_numeric_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__is_numeric_dtype"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.2993438,"supported_languages":null},"macro.dbt_profiler.default__is_numeric_dtype":{"name":"default__is_numeric_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.default__is_numeric_dtype","macro_sql":"{%- macro default__is_numeric_dtype(dtype) -%}\n  {% set is_numeric = dtype.startswith(\"int\") or dtype.startswith(\"float\") or \"numeric\" in dtype or \"number\" in dtype or \"double\" in dtype or \"bigint\" in dtype %}\n  {% do return(is_numeric) %}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.299737,"supported_languages":null},"macro.dbt_profiler.sqlserver__is_numeric_dtype":{"name":"sqlserver__is_numeric_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.sqlserver__is_numeric_dtype","macro_sql":"{%- macro sqlserver__is_numeric_dtype(dtype) -%}\n  {% set is_numeric = dtype in [\"decimal\", \"numeric\", \"bigint\" \"numeric\", \"smallint\", \"decimal\", \"int\", \"tinyint\", \"money\", \"float\", \"real\"]  %}\n  {% do return(is_numeric) %}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.300035,"supported_languages":null},"macro.dbt_profiler.is_logical_dtype":{"name":"is_logical_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.is_logical_dtype","macro_sql":"\n\n{%- macro is_logical_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_logical_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__is_logical_dtype"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.300221,"supported_languages":null},"macro.dbt_profiler.default__is_logical_dtype":{"name":"default__is_logical_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.default__is_logical_dtype","macro_sql":"{%- macro default__is_logical_dtype(dtype) -%}\n  {% set is_bool = dtype.startswith(\"bool\") %}\n  {% do return(is_bool) %}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.300807,"supported_languages":null},"macro.dbt_profiler.is_date_or_time_dtype":{"name":"is_date_or_time_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.is_date_or_time_dtype","macro_sql":"\n\n{%- macro is_date_or_time_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_date_or_time_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__is_date_or_time_dtype"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.301016,"supported_languages":null},"macro.dbt_profiler.default__is_date_or_time_dtype":{"name":"default__is_date_or_time_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.default__is_date_or_time_dtype","macro_sql":"{%- macro default__is_date_or_time_dtype(dtype) -%}\n  {% set is_date_or_time = dtype.startswith(\"timestamp\") or dtype.startswith(\"date\") %}\n  {% do return(is_date_or_time) %}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.301247,"supported_languages":null},"macro.dbt_profiler.is_struct_dtype":{"name":"is_struct_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.is_struct_dtype","macro_sql":"\n\n{%- macro is_struct_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_struct_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__is_struct_dtype"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.301439,"supported_languages":null},"macro.dbt_profiler.default__is_struct_dtype":{"name":"default__is_struct_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.default__is_struct_dtype","macro_sql":"{%- macro default__is_struct_dtype(dtype) -%}\n  {% do return((dtype | lower).startswith('struct')) %}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.301611,"supported_languages":null},"macro.dbt_profiler.information_schema":{"name":"information_schema","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.information_schema","macro_sql":"\n\n{%- macro information_schema(relation) -%}\n  {{ return(adapter.dispatch(\"information_schema\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__information_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.3017879,"supported_languages":null},"macro.dbt_profiler.default__information_schema":{"name":"default__information_schema","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.default__information_schema","macro_sql":"{%- macro default__information_schema(relation) -%}\n  {{ relation.information_schema() }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.information_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.301897,"supported_languages":null},"macro.dbt_profiler.bigquery__information_schema":{"name":"bigquery__information_schema","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.bigquery__information_schema","macro_sql":"{%- macro bigquery__information_schema(relation) -%}\n  {{ adapter.quote(relation.database) }}.{{ adapter.quote(relation.schema) }}.INFORMATION_SCHEMA\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.3020742,"supported_languages":null},"macro.dbt_profiler.select_from_information_schema_columns":{"name":"select_from_information_schema_columns","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.select_from_information_schema_columns","macro_sql":"\n\n{%- macro select_from_information_schema_columns(relation) -%}\n  {{ return(adapter.dispatch(\"select_from_information_schema_columns\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__select_from_information_schema_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.302254,"supported_languages":null},"macro.dbt_profiler.default__select_from_information_schema_columns":{"name":"default__select_from_information_schema_columns","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.default__select_from_information_schema_columns","macro_sql":"{%- macro default__select_from_information_schema_columns(relation) -%}\n  select\n    *\n  from {{ dbt_profiler.information_schema(relation) }}.COLUMNS\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n  order by ordinal_position asc\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.information_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.302439,"supported_languages":null},"macro.dbt_profiler.redshift__select_from_information_schema_columns":{"name":"redshift__select_from_information_schema_columns","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.redshift__select_from_information_schema_columns","macro_sql":"{%- macro redshift__select_from_information_schema_columns(relation) -%}\n  select\n    attr.attname::varchar as column_name,\n    type.typname::varchar as data_type,\n    class.relname::varchar as table_name,\n    namespace.nspname::varchar as table_schema\n  from pg_catalog.pg_attribute as attr\n  join pg_catalog.pg_type as type on (attr.atttypid = type.oid)\n  join pg_catalog.pg_class as class on (attr.attrelid = class.oid)\n  join pg_catalog.pg_namespace as namespace on (class.relnamespace = namespace.oid)\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n    and attr.attnum > 0\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.302603,"supported_languages":null},"macro.dbt_profiler.get_relation":{"name":"get_relation","resource_type":"macro","package_name":"dbt_profiler","path":"macros/relation.sql","original_file_path":"macros/relation.sql","unique_id":"macro.dbt_profiler.get_relation","macro_sql":"{% macro get_relation(relation=none, relation_name=none, schema=none, database=none) %}\n\n{% if relation is none and relation_name is none %}\n  {{ exceptions.raise_compiler_error(\"Either relation or relation_name must be specified.\") }}\n{% endif %}\n\n{% if relation is none %}\n  {% if schema is none %}\n    {% set schema = target.schema %}\n  {% endif %}\n\n  {% if database is none %}\n    {% set database = target.database %}\n  {% endif %}\n\n  {{ log(\"Get relation %s (database=%s, schema=%s)\" | format(adapter.quote(relation_name), adapter.quote(database), adapter.quote(schema)), info=False) }}\n\n  {%- \n  set relation = adapter.get_relation(\n    database=database,\n    schema=schema,\n    identifier=relation_name\n  ) \n  -%}\n  {% if relation is none %}\n    {{ exceptions.raise_compiler_error(\"Relation \" ~ adapter.quote(relation_name) ~ \" does not exist or not authorized.\") }}\n  {% endif %}\n{% endif %}\n\n{% do return(relation) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.304182,"supported_languages":null},"macro.dbt_profiler.assert_relation_exists":{"name":"assert_relation_exists","resource_type":"macro","package_name":"dbt_profiler","path":"macros/relation.sql","original_file_path":"macros/relation.sql","unique_id":"macro.dbt_profiler.assert_relation_exists","macro_sql":"\n\n{%- macro assert_relation_exists(relation) -%}\n  {{ return(adapter.dispatch(\"assert_relation_exists\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__assert_relation_exists"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.3043709,"supported_languages":null},"macro.dbt_profiler.default__assert_relation_exists":{"name":"default__assert_relation_exists","resource_type":"macro","package_name":"dbt_profiler","path":"macros/relation.sql","original_file_path":"macros/relation.sql","unique_id":"macro.dbt_profiler.default__assert_relation_exists","macro_sql":"{% macro default__assert_relation_exists(relation) %}\n\n{% do run_query(\"select * from \" ~ relation ~ \" limit 0\") %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.30452,"supported_languages":null},"macro.dbt_profiler.sqlserver__assert_relation_exists":{"name":"sqlserver__assert_relation_exists","resource_type":"macro","package_name":"dbt_profiler","path":"macros/relation.sql","original_file_path":"macros/relation.sql","unique_id":"macro.dbt_profiler.sqlserver__assert_relation_exists","macro_sql":"{% macro sqlserver__assert_relation_exists(relation) %}\n\n{% do run_query(\"select top(0) * from \" ~ relation ~ \"\") %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.304681,"supported_languages":null},"macro.dbt_profiler.print_profile":{"name":"print_profile","resource_type":"macro","package_name":"dbt_profiler","path":"macros/print_profile.sql","original_file_path":"macros/print_profile.sql","unique_id":"macro.dbt_profiler.print_profile","macro_sql":"{% macro print_profile(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none, where_clause=none) %}\n\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n\n{% if execute %}\n  {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n{% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.get_profile_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.305425,"supported_languages":null},"macro.dbt_profiler.print_profile_docs":{"name":"print_profile_docs","resource_type":"macro","package_name":"dbt_profiler","path":"macros/print_profile_docs.sql","original_file_path":"macros/print_profile_docs.sql","unique_id":"macro.dbt_profiler.print_profile_docs","macro_sql":"{% macro print_profile_docs(relation=none, relation_name=none, docs_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none, where_clause=none) %}\n\n{% if execute %}\n\n    {%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n    \n    {% if docs_name is none %}\n        {% set docs_name = 'dbt_profiler__' + relation_name %}\n    {% endif %}\n    \n    {%- set startdocs = '{% docs ' ~ docs_name ~ '  %}' -%}\n    {%- set enddocs = '{% enddocs %}' -%}\n    \n    {# Check if macro is called in dbt Cloud? #}\n    {%- if flags.WHICH == 'rpc' -%}\n        {%- set is_dbt_cloud = true -%}\n    {%- else -%}\n        {%- set is_dbt_cloud = false -%}\n    {%- endif -%}\n    \n    {% if not is_dbt_cloud %}\n    \n        {{ print(startdocs) }}\n        {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n        {{ print(enddocs) }}\n    \n    {% else %}\n    \n        {%- set profile_docs=[] -%}\n        {% do profile_docs.append(startdocs) -%}\n        {% do profile_docs.append('') %}\n    \n        {# Get header from column names #}\n        {%- set headers = results.column_names -%}\n        {%- set header = [] -%}\n        {%- set horizontal_line = [] -%}\n    \n        {% for i in range(0,headers|length) %}\n            {% do header.append(headers[i]) %}\n            {% do horizontal_line.append('---') %}\n        {% endfor %}\n        {% do profile_docs.append('| ' ~ header|join(' | ') ~ ' |') %}\n        {% do profile_docs.append('| ' ~ horizontal_line|join(' | ') ~ ' |') %}\n    \n        {# Get row values #}\n        {% for row in results.rows %}\n            {%- set list_row = [''] -%}\n            {% for val in row.values() %}\n                {% do list_row.append(val) %}\n            {% endfor %}\n            {% do profile_docs.append(list_row|join(' | ') ~ ' |') %}\n        {% endfor %}\n        {% do profile_docs.append('') %}\n        {% do profile_docs.append(enddocs) %}\n    \n        {# Join profile docs #}\n        {%- set joined = profile_docs | join ('\\n') -%}\n        {{ log(joined, info=True) }}\n        {% do return(joined) %}\n    \n    {% endif %}\n    \n{% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.get_profile_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.308576,"supported_languages":null},"macro.dbt_profiler.get_profile":{"name":"get_profile","resource_type":"macro","package_name":"dbt_profiler","path":"macros/get_profile.sql","original_file_path":"macros/get_profile.sql","unique_id":"macro.dbt_profiler.get_profile","macro_sql":"{% macro get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n  {{ return(adapter.dispatch(\"get_profile\", macro_namespace=\"dbt_profiler\")(relation, exclude_measures, include_columns, exclude_columns, where_clause, group_by)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.default__get_profile"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.329663,"supported_languages":null},"macro.dbt_profiler.default__get_profile":{"name":"default__get_profile","resource_type":"macro","package_name":"dbt_profiler","path":"macros/get_profile.sql","original_file_path":"macros/get_profile.sql","unique_id":"macro.dbt_profiler.default__get_profile","macro_sql":"{% macro default__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {% set information_schema_columns = run_query(dbt_profiler.select_from_information_schema_columns(relation)) %}\n  {% set information_schema_columns = information_schema_columns.rename(information_schema_columns.column_names | map('lower')) %}\n  {% set information_schema_data_types = information_schema_columns.columns['data_type'].values() | map('lower') | list %}\n  {% set information_schema_column_names = information_schema_columns.columns['column_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in information_schema_column_names %}\n    {% do data_type_map.update({column_name: information_schema_data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select\n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.assert_relation_exists","macro.dbt.run_query","macro.dbt_profiler.select_from_information_schema_columns","macro.dbt_profiler.measure_row_count","macro.dbt_profiler.measure_not_null_proportion","macro.dbt_profiler.measure_distinct_proportion","macro.dbt_profiler.measure_distinct_count","macro.dbt_profiler.measure_is_unique","macro.dbt_profiler.measure_min","macro.dbt_profiler.measure_max","macro.dbt_profiler.measure_avg","macro.dbt_profiler.measure_median","macro.dbt_profiler.measure_std_dev_population","macro.dbt_profiler.measure_std_dev_sample","macro.dbt_profiler.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.333938,"supported_languages":null},"macro.dbt_profiler.databricks__get_profile":{"name":"databricks__get_profile","resource_type":"macro","package_name":"dbt_profiler","path":"macros/get_profile.sql","original_file_path":"macros/get_profile.sql","unique_id":"macro.dbt_profiler.databricks__get_profile","macro_sql":"{% macro databricks__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=True) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {# Get column metadata. #}\n  {% call statement('table_metadata', fetch_result=True) -%}\n    describe table extended {{ relation.schema }}.{{ relation.identifier }}\n  {% endcall %}\n  {% set columns_metadata = load_result('table_metadata').table %}\n  {% set columns_metadata = columns_metadata.rename(columns_metadata.column_names | map('lower')) %}\n  \n  {% set data_types = columns_metadata.columns['data_type'].values() | map('lower') | list %}\n  {% set column_names = columns_metadata.columns['col_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in column_names %}\n    {% do data_type_map.update({column_name: data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {# {{ print(profile_sql) }} #}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.assert_relation_exists","macro.dbt.statement","macro.dbt_profiler.measure_row_count","macro.dbt_profiler.measure_not_null_proportion","macro.dbt_profiler.measure_distinct_proportion","macro.dbt_profiler.measure_distinct_count","macro.dbt_profiler.measure_is_unique","macro.dbt_profiler.measure_min","macro.dbt_profiler.measure_max","macro.dbt_profiler.measure_avg","macro.dbt_profiler.measure_median","macro.dbt_profiler.measure_std_dev_population","macro.dbt_profiler.measure_std_dev_sample","macro.dbt_profiler.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.3384168,"supported_languages":null},"macro.dbt_profiler.sqlserver__get_profile":{"name":"sqlserver__get_profile","resource_type":"macro","package_name":"dbt_profiler","path":"macros/get_profile.sql","original_file_path":"macros/get_profile.sql","unique_id":"macro.dbt_profiler.sqlserver__get_profile","macro_sql":"{% macro sqlserver__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {% set information_schema_columns = run_query(dbt_profiler.select_from_information_schema_columns(relation)) %}\n  {% set information_schema_columns = information_schema_columns.rename(information_schema_columns.column_names | map('lower')) %}\n  {% set information_schema_data_types = information_schema_columns.columns['data_type'].values() | map('lower') | list %}\n  {% set information_schema_column_names = information_schema_columns.columns['column_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in information_schema_column_names %}\n    {% do data_type_map.update({column_name: information_schema_data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select top 100 percent\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.assert_relation_exists","macro.dbt.run_query","macro.dbt_profiler.select_from_information_schema_columns","macro.dbt_profiler.measure_row_count","macro.dbt_profiler.measure_not_null_proportion","macro.dbt_profiler.measure_distinct_proportion","macro.dbt_profiler.measure_distinct_count","macro.dbt_profiler.measure_is_unique","macro.dbt_profiler.measure_min","macro.dbt_profiler.measure_max","macro.dbt_profiler.measure_avg","macro.dbt_profiler.measure_median","macro.dbt_profiler.measure_std_dev_population","macro.dbt_profiler.measure_std_dev_sample","macro.dbt_profiler.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.342728,"supported_languages":null},"macro.dbt_profiler.get_profile_table":{"name":"get_profile_table","resource_type":"macro","package_name":"dbt_profiler","path":"macros/get_profile_table.sql","original_file_path":"macros/get_profile_table.sql","unique_id":"macro.dbt_profiler.get_profile_table","macro_sql":"{% macro get_profile_table(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none) %}\n\n{%- set relation = dbt_profiler.get_relation(\n  relation=relation,\n  relation_name=relation_name,\n  schema=schema,\n  database=database\n) -%}\n{%- set profile_sql = dbt_profiler.get_profile(relation=relation, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n{{ log(profile_sql, info=False) }}\n{% set results = run_query(profile_sql) %}\n{% set results = results.rename(results.column_names | map('lower')) %}\n{% do return(results) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.get_relation","macro.dbt_profiler.get_profile","macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.34361,"supported_languages":null},"macro.dbt_profiler.print_profile_schema":{"name":"print_profile_schema","resource_type":"macro","package_name":"dbt_profiler","path":"macros/print_profile_schema.sql","original_file_path":"macros/print_profile_schema.sql","unique_id":"macro.dbt_profiler.print_profile_schema","macro_sql":"{% macro print_profile_schema(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], model_description=\"\", column_description=\"\", where_clause=none) %}\n\n{%- set column_dicts = [] -%}\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n\n{% if execute %}\n  {% for row in results.rows %}\n\n    {% set row_dict = row.dict() %}\n    {% set column_name = row_dict.pop(\"column_name\") %}\n\n    {% set meta_dict = {} %}\n    {% for key, value in row_dict.items() %}\n      {% set column = results.columns.get(key) %}\n      {% do meta_dict.update({key: column.data_type.jsonify(value)}) %}\n    {% endfor %}\n\n    {% set column_dict = {\"name\": column_name, \"description\": column_description, \"meta\": meta_dict} %}\n    {% do column_dicts.append(column_dict) %}\n  {% endfor %}\n\n  {% set schema_dict = {\n    \"version\": 2,\n    \"models\": [\n      {\n        \"name\": relation_name,\n        \"description\": model_description,\n        \"columns\": column_dicts\n      }\n    ]\n  } %}\n  {% set schema_yaml = toyaml(schema_dict) %}\n\n  {{ log(schema_yaml, info=True) }}\n  {% do return(schema_dict) %}\n{% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.get_profile_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.34556,"supported_languages":null},"macro.dbt_profiler.measure_row_count":{"name":"measure_row_count","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_row_count","macro_sql":"\n\n{%- macro measure_row_count(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_row_count\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_row_count"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.3479612,"supported_languages":null},"macro.dbt_profiler.default__measure_row_count":{"name":"default__measure_row_count","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_row_count","macro_sql":"{%- macro default__measure_row_count(column_name, data_type) -%}\ncast(count(*) as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.348091,"supported_languages":null},"macro.dbt_profiler.measure_not_null_proportion":{"name":"measure_not_null_proportion","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_not_null_proportion","macro_sql":"\n\n{%- macro measure_not_null_proportion(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_not_null_proportion\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_not_null_proportion"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.348289,"supported_languages":null},"macro.dbt_profiler.default__measure_not_null_proportion":{"name":"default__measure_not_null_proportion","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_not_null_proportion","macro_sql":"{%- macro default__measure_not_null_proportion(column_name, data_type) -%}\nsum(case when {{ adapter.quote(column_name) }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.348462,"supported_languages":null},"macro.dbt_profiler.measure_distinct_proportion":{"name":"measure_distinct_proportion","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_distinct_proportion","macro_sql":"\n\n{%- macro measure_distinct_proportion(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_distinct_proportion\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_distinct_proportion"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.3486578,"supported_languages":null},"macro.dbt_profiler.default__measure_distinct_proportion":{"name":"default__measure_distinct_proportion","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_distinct_proportion","macro_sql":"{%- macro default__measure_distinct_proportion(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }}) / cast(count(*) as {{ dbt.type_numeric() }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.348945,"supported_languages":null},"macro.dbt_profiler.measure_distinct_count":{"name":"measure_distinct_count","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_distinct_count","macro_sql":"\n\n{%- macro measure_distinct_count(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_distinct_count\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_distinct_count"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.3491468,"supported_languages":null},"macro.dbt_profiler.default__measure_distinct_count":{"name":"default__measure_distinct_count","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_distinct_count","macro_sql":"{%- macro default__measure_distinct_count(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.349403,"supported_languages":null},"macro.dbt_profiler.measure_is_unique":{"name":"measure_is_unique","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_is_unique","macro_sql":"\n\n{%- macro measure_is_unique(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_is_unique\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_is_unique"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.3496,"supported_languages":null},"macro.dbt_profiler.default__measure_is_unique":{"name":"default__measure_is_unique","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_is_unique","macro_sql":"{%- macro default__measure_is_unique(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }}) = count(*)\n{%- else -%}\n    null\n{%- endif -%}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_struct_dtype"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.349816,"supported_languages":null},"macro.dbt_profiler.sqlserver__measure_is_unique":{"name":"sqlserver__measure_is_unique","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.sqlserver__measure_is_unique","macro_sql":"{%- macro sqlserver__measure_is_unique(column_name, data_type) -%}\ncase when count(distinct {{ adapter.quote(column_name) }}) = count(*) then 1 else 0 end\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.3499541,"supported_languages":null},"macro.dbt_profiler.measure_min":{"name":"measure_min","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_min","macro_sql":"\n\n{%- macro measure_min(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_min\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_min"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.350152,"supported_languages":null},"macro.dbt_profiler.default__measure_min":{"name":"default__measure_min","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_min","macro_sql":"{%- macro default__measure_min(column_name, data_type) -%}\n{%- if (dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type)) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    cast(min({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }})\n{%- else -%}\n    cast(null as {{ dbt_profiler.type_string() }})\n{%- endif -%}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_date_or_time_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt_profiler.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.3505259,"supported_languages":null},"macro.dbt_profiler.measure_max":{"name":"measure_max","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_max","macro_sql":"\n\n{%- macro measure_max(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_max\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_max"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.350785,"supported_languages":null},"macro.dbt_profiler.default__measure_max":{"name":"default__measure_max","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_max","macro_sql":"{%- macro default__measure_max(column_name, data_type) -%}\n{%- if (dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type)) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    cast(max({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }})\n{%- else -%}\n    cast(null as {{ dbt_profiler.type_string() }})\n{%- endif -%}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_date_or_time_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt_profiler.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.351157,"supported_languages":null},"macro.dbt_profiler.measure_avg":{"name":"measure_avg","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_avg","macro_sql":"\n\n{%- macro measure_avg(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_avg\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_avg"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.351358,"supported_languages":null},"macro.dbt_profiler.default__measure_avg":{"name":"default__measure_avg","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_avg","macro_sql":"{%- macro default__measure_avg(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    avg({{ adapter.quote(column_name) }})\n{%- elif dbt_profiler.is_logical_dtype(data_type) -%}\n    avg(case when {{ adapter.quote(column_name) }} then 1 else 0 end)\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt_profiler.is_logical_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.3517408,"supported_languages":null},"macro.dbt_profiler.redshift__measure_avg":{"name":"redshift__measure_avg","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.redshift__measure_avg","macro_sql":"{%- macro redshift__measure_avg(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    avg({{ adapter.quote(column_name) }}::float)\n{%- elif dbt_profiler.is_logical_dtype(data_type) -%}\n    avg(case when {{ adapter.quote(column_name) }} then 1.0 else 0.0 end)\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt_profiler.is_logical_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.352125,"supported_languages":null},"macro.dbt_profiler.measure_median":{"name":"measure_median","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_median","macro_sql":"\n\n{%- macro measure_median(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_median\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_median"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.352326,"supported_languages":null},"macro.dbt_profiler.default__measure_median":{"name":"default__measure_median","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_median","macro_sql":"{%- macro default__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    median({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.352614,"supported_languages":null},"macro.dbt_profiler.bigquery__measure_median":{"name":"bigquery__measure_median","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.bigquery__measure_median","macro_sql":"{%- macro bigquery__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    APPROX_QUANTILES({{ adapter.quote(column_name) }}, 100)[OFFSET(50)]\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.3529,"supported_languages":null},"macro.dbt_profiler.postgres__measure_median":{"name":"postgres__measure_median","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.postgres__measure_median","macro_sql":"{%- macro postgres__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    percentile_cont(0.5) within group (order by {{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.353188,"supported_languages":null},"macro.dbt_profiler.sql_server__measure_median":{"name":"sql_server__measure_median","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.sql_server__measure_median","macro_sql":"{%- macro sql_server__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    percentile_cont({{ adapter.quote(column_name) }}, 0.5) over ()\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.353479,"supported_languages":null},"macro.dbt_profiler.measure_std_dev_population":{"name":"measure_std_dev_population","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_std_dev_population","macro_sql":"\n\n{%- macro measure_std_dev_population(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_std_dev_population\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_std_dev_population"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.3536792,"supported_languages":null},"macro.dbt_profiler.default__measure_std_dev_population":{"name":"default__measure_std_dev_population","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_std_dev_population","macro_sql":"{%- macro default__measure_std_dev_population(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    stddev_pop({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.353966,"supported_languages":null},"macro.dbt_profiler.sqlserver__measure_std_dev_population":{"name":"sqlserver__measure_std_dev_population","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.sqlserver__measure_std_dev_population","macro_sql":"{%- macro sqlserver__measure_std_dev_population(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) -%}\n    stdevp({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.354209,"supported_languages":null},"macro.dbt_profiler.measure_std_dev_sample":{"name":"measure_std_dev_sample","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_std_dev_sample","macro_sql":"\n\n{%- macro measure_std_dev_sample(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_std_dev_sample\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_std_dev_sample"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.354408,"supported_languages":null},"macro.dbt_profiler.default__measure_std_dev_sample":{"name":"default__measure_std_dev_sample","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_std_dev_sample","macro_sql":"{%- macro default__measure_std_dev_sample(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    stddev_samp({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.354712,"supported_languages":null},"macro.dbt_profiler.sqlserver__measure_std_dev_sample":{"name":"sqlserver__measure_std_dev_sample","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.sqlserver__measure_std_dev_sample","macro_sql":"{%- macro sqlserver__measure_std_dev_sample(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) -%}\n    stdev({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854360.354953,"supported_languages":null}},"docs":{"doc.jaffle_shop.__overview__":{"name":"__overview__","resource_type":"doc","package_name":"jaffle_shop","path":"overview.md","original_file_path":"models/overview.md","unique_id":"doc.jaffle_shop.__overview__","block_contents":"## Data Documentation for Jaffle Shop\n\n`jaffle_shop` is a fictional ecommerce store.\n\nThis [dbt](https://www.getdbt.com/) project is for testing out code.\n\nThe source code can be found [here](https://github.com/clrcrl/jaffle_shop)."},"doc.jaffle_shop.orders_status":{"name":"orders_status","resource_type":"doc","package_name":"jaffle_shop","path":"docs.md","original_file_path":"models/docs.md","unique_id":"doc.jaffle_shop.orders_status","block_contents":"Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |"},"doc.dbt.__overview__":{"name":"__overview__","resource_type":"doc","package_name":"dbt","path":"overview.md","original_file_path":"docs/overview.md","unique_id":"doc.dbt.__overview__","block_contents":"### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}},"exposures":{},"metrics":{},"groups":{},"selectors":{},"disabled":{},"parent_map":{"model.jaffle_shop.customers":["model.jaffle_shop.stg_customers","model.jaffle_shop.stg_orders","model.jaffle_shop.stg_payments"],"model.jaffle_shop.orders":["model.jaffle_shop.stg_orders","model.jaffle_shop.stg_payments"],"model.jaffle_shop.customer_segments":["model.jaffle_shop.customers"],"model.jaffle_shop.customer_order_pattern":["model.jaffle_shop.customers"],"model.jaffle_shop.stg_customers":["source.jaffle_shop.jaffle-shop-data.raw_customers"],"model.jaffle_shop.stg_payments":["source.jaffle_shop.jaffle-shop-data.raw_payments"],"model.jaffle_shop.stg_orders":["source.jaffle_shop.jaffle-shop-data.raw_orders"],"test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1":["model.jaffle_shop.customers"],"test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d":["model.jaffle_shop.customers"],"test.jaffle_shop.unique_customer_segments_customer_id.f3a5b61998":["model.jaffle_shop.customer_segments"],"test.jaffle_shop.not_null_customer_segments_customer_id.bcd345d84b":["model.jaffle_shop.customer_segments"],"test.jaffle_shop.accepted_values_customer_segments_value_segment__High_Value__Medium_Value__Low_Value.089ad1c243":["model.jaffle_shop.customer_segments"],"test.jaffle_shop.unique_customer_order_pattern_customer_id.99ad852c54":["model.jaffle_shop.customer_order_pattern"],"test.jaffle_shop.not_null_customer_order_pattern_customer_id.3f8f4d52ea":["model.jaffle_shop.customer_order_pattern"],"test.jaffle_shop.unique_orders_order_id.fed79b3a6e":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_order_id.cf6c17daed":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_customer_id.c5f02694af":["model.jaffle_shop.orders"],"test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2":["model.jaffle_shop.customers","model.jaffle_shop.orders"],"test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_amount.106140f9fd":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a":["model.jaffle_shop.orders"],"test.jaffle_shop.unique_stg_customers_customer_id.c7614daada":["model.jaffle_shop.stg_customers"],"test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa":["model.jaffle_shop.stg_customers"],"test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a":["model.jaffle_shop.stg_orders"],"test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64":["model.jaffle_shop.stg_orders"],"test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad":["model.jaffle_shop.stg_orders"],"test.jaffle_shop.unique_stg_payments_payment_id.3744510712":["model.jaffle_shop.stg_payments"],"test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075":["model.jaffle_shop.stg_payments"],"test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278":["model.jaffle_shop.stg_payments"],"source.jaffle_shop.jaffle-shop-data.raw_customers":[],"source.jaffle_shop.jaffle-shop-data.raw_orders":[],"source.jaffle_shop.jaffle-shop-data.raw_payments":[]},"child_map":{"model.jaffle_shop.customers":["model.jaffle_shop.customer_order_pattern","model.jaffle_shop.customer_segments","test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d","test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2","test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1"],"model.jaffle_shop.orders":["test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3","test.jaffle_shop.not_null_orders_amount.106140f9fd","test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49","test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625","test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59","test.jaffle_shop.not_null_orders_customer_id.c5f02694af","test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a","test.jaffle_shop.not_null_orders_order_id.cf6c17daed","test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2","test.jaffle_shop.unique_orders_order_id.fed79b3a6e"],"model.jaffle_shop.customer_segments":["test.jaffle_shop.accepted_values_customer_segments_value_segment__High_Value__Medium_Value__Low_Value.089ad1c243","test.jaffle_shop.not_null_customer_segments_customer_id.bcd345d84b","test.jaffle_shop.unique_customer_segments_customer_id.f3a5b61998"],"model.jaffle_shop.customer_order_pattern":["test.jaffle_shop.not_null_customer_order_pattern_customer_id.3f8f4d52ea","test.jaffle_shop.unique_customer_order_pattern_customer_id.99ad852c54"],"model.jaffle_shop.stg_customers":["model.jaffle_shop.customers","test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa","test.jaffle_shop.unique_stg_customers_customer_id.c7614daada"],"model.jaffle_shop.stg_payments":["model.jaffle_shop.customers","model.jaffle_shop.orders","test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278","test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075","test.jaffle_shop.unique_stg_payments_payment_id.3744510712"],"model.jaffle_shop.stg_orders":["model.jaffle_shop.customers","model.jaffle_shop.orders","test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad","test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64","test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a"],"test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1":[],"test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d":[],"test.jaffle_shop.unique_customer_segments_customer_id.f3a5b61998":[],"test.jaffle_shop.not_null_customer_segments_customer_id.bcd345d84b":[],"test.jaffle_shop.accepted_values_customer_segments_value_segment__High_Value__Medium_Value__Low_Value.089ad1c243":[],"test.jaffle_shop.unique_customer_order_pattern_customer_id.99ad852c54":[],"test.jaffle_shop.not_null_customer_order_pattern_customer_id.3f8f4d52ea":[],"test.jaffle_shop.unique_orders_order_id.fed79b3a6e":[],"test.jaffle_shop.not_null_orders_order_id.cf6c17daed":[],"test.jaffle_shop.not_null_orders_customer_id.c5f02694af":[],"test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2":[],"test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3":[],"test.jaffle_shop.not_null_orders_amount.106140f9fd":[],"test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59":[],"test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625":[],"test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49":[],"test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a":[],"test.jaffle_shop.unique_stg_customers_customer_id.c7614daada":[],"test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa":[],"test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a":[],"test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64":[],"test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad":[],"test.jaffle_shop.unique_stg_payments_payment_id.3744510712":[],"test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075":[],"test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278":[],"source.jaffle_shop.jaffle-shop-data.raw_customers":["model.jaffle_shop.stg_customers"],"source.jaffle_shop.jaffle-shop-data.raw_orders":["model.jaffle_shop.stg_orders"],"source.jaffle_shop.jaffle-shop-data.raw_payments":["model.jaffle_shop.stg_payments"]},"group_map":{},"saved_queries":{},"semantic_models":{},"unit_tests":{}},"catalog":{"metadata":{"dbt_schema_version":"https://schemas.getdbt.com/dbt/catalog/v1.json","dbt_version":"1.7.18","generated_at":"2024-11-06T00:52:41.193453Z","invocation_id":"945013d5-8f98-4ea7-a481-08c41c697c99","env":{}},"nodes":{"model.jaffle_shop.customer_order_pattern":{"metadata":{"type":"BASE TABLE","schema":"prod","name":"customer_order_pattern","database":"jaffle_shop","comment":null,"owner":null},"columns":{"customer_id":{"type":"BIGINT","index":1,"name":"customer_id","comment":null},"first_order":{"type":"DATE","index":2,"name":"first_order","comment":null},"most_recent_order":{"type":"DATE","index":3,"name":"most_recent_order","comment":null},"number_of_orders":{"type":"BIGINT","index":4,"name":"number_of_orders","comment":null},"days_active":{"type":"BIGINT","index":5,"name":"days_active","comment":null},"avg_days_between_orders":{"type":"DOUBLE","index":6,"name":"avg_days_between_orders","comment":null}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.jaffle_shop.customer_order_pattern"},"model.jaffle_shop.customer_segments":{"metadata":{"type":"BASE TABLE","schema":"prod","name":"customer_segments","database":"jaffle_shop","comment":null,"owner":null},"columns":{"customer_id":{"type":"BIGINT","index":1,"name":"customer_id","comment":null},"number_of_orders":{"type":"BIGINT","index":2,"name":"number_of_orders","comment":null},"customer_lifetime_value":{"type":"BIGINT","index":3,"name":"customer_lifetime_value","comment":null},"order_frequency_segment":{"type":"VARCHAR","index":4,"name":"order_frequency_segment","comment":null},"value_segment":{"type":"VARCHAR","index":5,"name":"value_segment","comment":null}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.jaffle_shop.customer_segments"},"model.jaffle_shop.customers":{"metadata":{"type":"BASE TABLE","schema":"prod","name":"customers","database":"jaffle_shop","comment":null,"owner":null},"columns":{"customer_id":{"type":"BIGINT","index":1,"name":"customer_id","comment":null},"first_name":{"type":"VARCHAR","index":2,"name":"first_name","comment":null},"last_name":{"type":"VARCHAR","index":3,"name":"last_name","comment":null},"first_order":{"type":"DATE","index":4,"name":"first_order","comment":null},"most_recent_order":{"type":"DATE","index":5,"name":"most_recent_order","comment":null},"number_of_orders":{"type":"BIGINT","index":6,"name":"number_of_orders","comment":null},"customer_lifetime_value":{"type":"BIGINT","index":7,"name":"customer_lifetime_value","comment":null}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.jaffle_shop.customers"},"model.jaffle_shop.orders":{"metadata":{"type":"BASE TABLE","schema":"prod","name":"orders","database":"jaffle_shop","comment":null,"owner":null},"columns":{"order_id":{"type":"BIGINT","index":1,"name":"order_id","comment":null},"customer_id":{"type":"BIGINT","index":2,"name":"customer_id","comment":null},"order_date":{"type":"DATE","index":3,"name":"order_date","comment":null},"status":{"type":"VARCHAR","index":4,"name":"status","comment":null},"credit_card_amount":{"type":"DOUBLE","index":5,"name":"credit_card_amount","comment":null},"coupon_amount":{"type":"DOUBLE","index":6,"name":"coupon_amount","comment":null},"bank_transfer_amount":{"type":"DOUBLE","index":7,"name":"bank_transfer_amount","comment":null},"gift_card_amount":{"type":"DOUBLE","index":8,"name":"gift_card_amount","comment":null},"amount":{"type":"DOUBLE","index":9,"name":"amount","comment":null}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.jaffle_shop.orders"},"model.jaffle_shop.stg_customers":{"metadata":{"type":"VIEW","schema":"prod","name":"stg_customers","database":"jaffle_shop","comment":null,"owner":null},"columns":{"customer_id":{"type":"BIGINT","index":1,"name":"customer_id","comment":null},"first_name":{"type":"VARCHAR","index":2,"name":"first_name","comment":null},"last_name":{"type":"VARCHAR","index":3,"name":"last_name","comment":null}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.jaffle_shop.stg_customers"},"model.jaffle_shop.stg_orders":{"metadata":{"type":"VIEW","schema":"prod","name":"stg_orders","database":"jaffle_shop","comment":null,"owner":null},"columns":{"order_id":{"type":"BIGINT","index":1,"name":"order_id","comment":null},"customer_id":{"type":"BIGINT","index":2,"name":"customer_id","comment":null},"order_date":{"type":"DATE","index":3,"name":"order_date","comment":null},"status":{"type":"VARCHAR","index":4,"name":"status","comment":null}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.jaffle_shop.stg_orders"},"model.jaffle_shop.stg_payments":{"metadata":{"type":"VIEW","schema":"prod","name":"stg_payments","database":"jaffle_shop","comment":null,"owner":null},"columns":{"payment_id":{"type":"BIGINT","index":1,"name":"payment_id","comment":null},"order_id":{"type":"BIGINT","index":2,"name":"order_id","comment":null},"payment_method":{"type":"VARCHAR","index":3,"name":"payment_method","comment":null},"amount":{"type":"DOUBLE","index":4,"name":"amount","comment":null}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.jaffle_shop.stg_payments"}},"sources":{},"errors":null}},"current":{"manifest":{"metadata":{"dbt_schema_version":"https://schemas.getdbt.com/dbt/manifest/v11.json","dbt_version":"1.7.18","generated_at":"2024-11-06T00:53:03.071472Z","invocation_id":"7c9072ea-c83a-48e7-9cbd-37ea100ed37f","env":{},"project_name":"jaffle_shop","project_id":"06e5b98c2db46f8a72cc4f66410e9b3b","user_id":"5b9a71cb-42a3-47c7-b444-f4b2d48829b3","send_anonymous_usage_stats":true,"adapter_type":"duckdb"},"nodes":{"model.jaffle_shop.customers":{"database":"jaffle_shop","schema":"dev","name":"customers","resource_type":"model","package_name":"jaffle_shop","path":"customers.sql","original_file_path":"models/customers.sql","unique_id":"model.jaffle_shop.customers","fqn":["jaffle_shop","customers"],"alias":"customers","checksum":{"name":"sha256","checksum":"50baffe728f6620abdf0a97f5e0f4c24db8008e2598c1bf914ffc74b673e8bb8"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"This table has basic information about a customer, as well as some derived facts based on a customer's orders","columns":{"customer_id":{"name":"customer_id","description":"This is a unique identifier for a customer","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"first_name":{"name":"first_name","description":"Customer's first name. PII.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"last_name":{"name":"last_name","description":"Customer's last name. PII.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"first_order":{"name":"first_order","description":"Date (UTC) of a customer's first order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"most_recent_order":{"name":"most_recent_order","description":"Date (UTC) of a customer's most recent order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"number_of_orders":{"name":"number_of_orders","description":"Count of the number of orders a customer has placed","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"total_order_amount":{"name":"total_order_amount","description":"Total value (AUD) of a customer's orders","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":"jaffle_shop://models/schema.yml","build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730854371.081231,"config_call_dict":{},"relation_name":"\"jaffle_shop\".\"dev\".\"customers\"","raw_code":"with customers as (\n\n    select * from {{ ref('stg_customers') }}\n\n),\n\norders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount)::bigint as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    where orders.status = 'completed'\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["model.jaffle_shop.stg_customers","model.jaffle_shop.stg_orders","model.jaffle_shop.stg_payments"]},"compiled_path":"target/compiled/jaffle_shop/models/customers.sql","compiled":true,"compiled_code":"with customers as (\n\n    select * from \"jaffle_shop\".\"dev\".\"stg_customers\"\n\n),\n\norders as (\n\n    select * from \"jaffle_shop\".\"dev\".\"stg_orders\"\n\n),\n\npayments as (\n\n    select * from \"jaffle_shop\".\"dev\".\"stg_payments\"\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount)::bigint as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    where orders.status = 'completed'\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null,"defer_relation":null},"model.jaffle_shop.orders":{"database":"jaffle_shop","schema":"dev","name":"orders","resource_type":"model","package_name":"jaffle_shop","path":"orders.sql","original_file_path":"models/orders.sql","unique_id":"model.jaffle_shop.orders","fqn":["jaffle_shop","orders"],"alias":"orders","checksum":{"name":"sha256","checksum":"27f8c79aad1cfd8411ab9c3d2ce8da1d787f7f05c58bbee1d247510dc426be0f"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"This table has basic information about orders, as well as some derived facts based on payments","columns":{"order_id":{"name":"order_id","description":"This is a unique identifier for an order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"customer_id":{"name":"customer_id","description":"Foreign key to the customers table","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"order_date":{"name":"order_date","description":"Date (UTC) that the order was placed","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"status":{"name":"status","description":"Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"amount":{"name":"amount","description":"Total amount (AUD) of the order","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"credit_card_amount":{"name":"credit_card_amount","description":"Amount of the order (AUD) paid for by credit card","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"coupon_amount":{"name":"coupon_amount","description":"Amount of the order (AUD) paid for by coupon","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"bank_transfer_amount":{"name":"bank_transfer_amount","description":"Amount of the order (AUD) paid for by bank transfer","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"gift_card_amount":{"name":"gift_card_amount","description":"Amount of the order (AUD) paid for by gift card","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":"jaffle_shop://models/schema.yml","build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730854371.084503,"config_call_dict":{},"relation_name":"\"jaffle_shop\".\"dev\".\"orders\"","raw_code":"{% set payment_methods = ['credit_card', 'coupon', 'bank_transfer', 'gift_card'] %}\n\nwith orders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        {% for payment_method in payment_methods -%}\n        sum(case when payment_method = '{{ payment_method }}' then amount else 0 end) as {{ payment_method }}_amount,\n        {% endfor -%}\n\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        {% for payment_method in payment_methods -%}\n\n        order_payments.{{ payment_method }}_amount,\n\n        {% endfor -%}\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["model.jaffle_shop.stg_orders","model.jaffle_shop.stg_payments"]},"compiled_path":"target/compiled/jaffle_shop/models/orders.sql","compiled":true,"compiled_code":"\n\nwith orders as (\n\n    select * from \"jaffle_shop\".\"dev\".\"stg_orders\"\n\n),\n\npayments as (\n\n    select * from \"jaffle_shop\".\"dev\".\"stg_payments\"\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        order_payments.credit_card_amount,\n\n        order_payments.coupon_amount,\n\n        order_payments.bank_transfer_amount,\n\n        order_payments.gift_card_amount,\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null,"defer_relation":null},"model.jaffle_shop.customer_segments":{"database":"jaffle_shop","schema":"dev","name":"customer_segments","resource_type":"model","package_name":"jaffle_shop","path":"customer_segments.sql","original_file_path":"models/customer_segments.sql","unique_id":"model.jaffle_shop.customer_segments","fqn":["jaffle_shop","customer_segments"],"alias":"customer_segments","checksum":{"name":"sha256","checksum":"087cd6709d57d09f41add0c201dab69c1c47314fab08aa020eb28bced18ebd05"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"This table categorizes customers based on their ordering behavior and value to the company, using derived metrics from their order history.","columns":{"customer_id":{"name":"customer_id","description":"This is a unique identifier for a customer.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"number_of_orders":{"name":"number_of_orders","description":"Count of the number of orders a customer has placed.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"customer_lifetime_value":{"name":"customer_lifetime_value","description":"Total value (in currency) of all orders placed by a customer over their lifetime.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"order_frequency_segment":{"name":"order_frequency_segment","description":"Categorization of customers based on how frequently they place orders.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"value_segment":{"name":"value_segment","description":"Categorization of customers based on the monetary value they bring to the company.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":"jaffle_shop://models/schema.yml","build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730854371.082124,"config_call_dict":{},"relation_name":"\"jaffle_shop\".\"dev\".\"customer_segments\"","raw_code":"-- Customer Segmentation based on number of orders and lifetime value\nSELECT\n    customer_id,\n    number_of_orders,\n    customer_lifetime_value,\n    CASE \n        WHEN number_of_orders > 10 THEN 'Frequent Buyer'\n        WHEN number_of_orders BETWEEN 5 AND 10 THEN 'Occasional Buyer'\n        ELSE 'Rare Buyer'\n    END AS order_frequency_segment,\n    CASE \n        WHEN customer_lifetime_value > 4000 THEN 'High Value'\n        WHEN customer_lifetime_value BETWEEN 1500 AND 4000 THEN 'Medium Value'\n        ELSE 'Low Value'\n    END AS value_segment\nFROM {{ ref('customers') }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["model.jaffle_shop.customers"]},"compiled_path":"target/compiled/jaffle_shop/models/customer_segments.sql","compiled":true,"compiled_code":"-- Customer Segmentation based on number of orders and lifetime value\nSELECT\n    customer_id,\n    number_of_orders,\n    customer_lifetime_value,\n    CASE \n        WHEN number_of_orders > 10 THEN 'Frequent Buyer'\n        WHEN number_of_orders BETWEEN 5 AND 10 THEN 'Occasional Buyer'\n        ELSE 'Rare Buyer'\n    END AS order_frequency_segment,\n    CASE \n        WHEN customer_lifetime_value > 4000 THEN 'High Value'\n        WHEN customer_lifetime_value BETWEEN 1500 AND 4000 THEN 'Medium Value'\n        ELSE 'Low Value'\n    END AS value_segment\nFROM \"jaffle_shop\".\"dev\".\"customers\"","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null,"defer_relation":null},"model.jaffle_shop.customer_order_pattern":{"database":"jaffle_shop","schema":"dev","name":"customer_order_pattern","resource_type":"model","package_name":"jaffle_shop","path":"customer_order_pattern.sql","original_file_path":"models/customer_order_pattern.sql","unique_id":"model.jaffle_shop.customer_order_pattern","fqn":["jaffle_shop","customer_order_pattern"],"alias":"customer_order_pattern","checksum":{"name":"sha256","checksum":"5c35486768f205de8f347e0cad50c380f7ede6215e881221fbb165024c7b8b54"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"This table provides detailed insights into the ordering patterns of customers, including the frequency and recency of their orders.","columns":{"customer_id":{"name":"customer_id","description":"This is a unique identifier for a customer.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"first_order":{"name":"first_order","description":"Date (UTC) of a customer's first order.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"most_recent_order":{"name":"most_recent_order","description":"Date (UTC) of a customer's most recent order.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"number_of_orders":{"name":"number_of_orders","description":"Count of the number of orders a customer has placed.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"days_active":{"name":"days_active","description":"The total number of days between a customer's first and most recent orders.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"avg_days_between_orders":{"name":"avg_days_between_orders","description":"Average number of days between consecutive orders for a customer.","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":"jaffle_shop://models/schema.yml","build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730854371.0828748,"config_call_dict":{},"relation_name":"\"jaffle_shop\".\"dev\".\"customer_order_pattern\"","raw_code":"-- Analyzing Order Patterns\nSELECT\n    customer_id,\n    first_order,\n    most_recent_order,\n    number_of_orders,\n    DATEDIFF('day', first_order, most_recent_order) AS days_active,\n    DATEDIFF('day', first_order, most_recent_order) / NULLIF(number_of_orders - 1, 0) AS avg_days_between_orders\nFROM {{ ref('customers') }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["model.jaffle_shop.customers"]},"compiled_path":"target/compiled/jaffle_shop/models/customer_order_pattern.sql","compiled":true,"compiled_code":"-- Analyzing Order Patterns\nSELECT\n    customer_id,\n    first_order,\n    most_recent_order,\n    number_of_orders,\n    DATEDIFF('day', first_order, most_recent_order) AS days_active,\n    DATEDIFF('day', first_order, most_recent_order) / NULLIF(number_of_orders - 1, 0) AS avg_days_between_orders\nFROM \"jaffle_shop\".\"dev\".\"customers\"","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null,"defer_relation":null},"model.jaffle_shop.stg_customers":{"database":"jaffle_shop","schema":"dev","name":"stg_customers","resource_type":"model","package_name":"jaffle_shop","path":"staging/stg_customers.sql","original_file_path":"models/staging/stg_customers.sql","unique_id":"model.jaffle_shop.stg_customers","fqn":["jaffle_shop","staging","stg_customers"],"alias":"stg_customers","checksum":{"name":"sha256","checksum":"9d05ea3a433ea87c3b3e638120213b52b44904f86a9b47c8d0e131259dd4a58a"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"view","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"silver"},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"","columns":{"customer_id":{"name":"customer_id","description":"","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":"silver"},"patch_path":"jaffle_shop://models/staging/schema.yml","build_path":null,"unrendered_config":{"materialized":"view","docs":{"node_color":"silver"}},"created_at":1730854371.157428,"config_call_dict":{},"relation_name":"\"jaffle_shop\".\"dev\".\"stg_customers\"","raw_code":"with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ source('jaffle-shop-data', 'raw_customers') }}\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed","language":"sql","refs":[],"sources":[["jaffle-shop-data","raw_customers"]],"metrics":[],"depends_on":{"macros":[],"nodes":["source.jaffle_shop.jaffle-shop-data.raw_customers"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/stg_customers.sql","compiled":true,"compiled_code":"with source as (\n    select * from read_csv('jaffle-shop-data/raw_customers.csv', header = true, auto_detect = true)\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null,"defer_relation":null},"model.jaffle_shop.stg_payments":{"database":"jaffle_shop","schema":"dev","name":"stg_payments","resource_type":"model","package_name":"jaffle_shop","path":"staging/stg_payments.sql","original_file_path":"models/staging/stg_payments.sql","unique_id":"model.jaffle_shop.stg_payments","fqn":["jaffle_shop","staging","stg_payments"],"alias":"stg_payments","checksum":{"name":"sha256","checksum":"d3f3dbee2304a6e607827c605a513959def50b215bca27ba3970634ab9624c98"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"view","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"silver"},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"","columns":{"payment_id":{"name":"payment_id","description":"","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"payment_method":{"name":"payment_method","description":"","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":"silver"},"patch_path":"jaffle_shop://models/staging/schema.yml","build_path":null,"unrendered_config":{"materialized":"view","docs":{"node_color":"silver"}},"created_at":1730854371.1583529,"config_call_dict":{},"relation_name":"\"jaffle_shop\".\"dev\".\"stg_payments\"","raw_code":"with source as (\n    \n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ source('jaffle-shop-data', 'raw_payments') }}\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed","language":"sql","refs":[],"sources":[["jaffle-shop-data","raw_payments"]],"metrics":[],"depends_on":{"macros":[],"nodes":["source.jaffle_shop.jaffle-shop-data.raw_payments"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/stg_payments.sql","compiled":true,"compiled_code":"with source as (\n    select * from read_csv('jaffle-shop-data/raw_payments.csv', header = true, auto_detect = true)\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null,"defer_relation":null},"model.jaffle_shop.stg_orders":{"database":"jaffle_shop","schema":"dev","name":"stg_orders","resource_type":"model","package_name":"jaffle_shop","path":"staging/stg_orders.sql","original_file_path":"models/staging/stg_orders.sql","unique_id":"model.jaffle_shop.stg_orders","fqn":["jaffle_shop","staging","stg_orders"],"alias":"stg_orders","checksum":{"name":"sha256","checksum":"193b40dff284a3b9c31908a3b88d4ed4a0acdace36eae14a64911a21b52c3f33"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"view","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"silver"},"contract":{"enforced":false,"alias_types":true},"access":"protected"},"tags":[],"description":"","columns":{"order_id":{"name":"order_id","description":"","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]},"status":{"name":"status","description":"","meta":{},"data_type":null,"constraints":[],"quote":null,"tags":[]}},"meta":{},"group":null,"docs":{"show":true,"node_color":"silver"},"patch_path":"jaffle_shop://models/staging/schema.yml","build_path":null,"unrendered_config":{"materialized":"view","docs":{"node_color":"silver"}},"created_at":1730854371.157753,"config_call_dict":{},"relation_name":"\"jaffle_shop\".\"dev\".\"stg_orders\"","raw_code":"with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ source('jaffle-shop-data', 'raw_orders') }}\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed","language":"sql","refs":[],"sources":[["jaffle-shop-data","raw_orders"]],"metrics":[],"depends_on":{"macros":[],"nodes":["source.jaffle_shop.jaffle-shop-data.raw_orders"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/stg_orders.sql","compiled":true,"compiled_code":"with source as (\n    select * from read_csv('jaffle-shop-data/raw_orders.csv', header = true, auto_detect = true)\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null},"access":"protected","constraints":[],"version":null,"latest_version":null,"deprecation_date":null,"defer_relation":null},"test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"unique_customers_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_customers_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1","fqn":["jaffle_shop","unique_customers_customer_id"],"alias":"unique_customers_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.126747,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customers"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/unique_customers_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"dev\".\"customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"not_null_customers_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_customers_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d","fqn":["jaffle_shop","not_null_customers_customer_id"],"alias":"not_null_customers_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.12801,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customers"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_customers_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"dev\".\"customers\"\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.unique_customer_segments_customer_id.f3a5b61998":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"unique_customer_segments_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_customer_segments_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.unique_customer_segments_customer_id.f3a5b61998","fqn":["jaffle_shop","unique_customer_segments_customer_id"],"alias":"unique_customer_segments_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.129174,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customer_segments"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/unique_customer_segments_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"dev\".\"customer_segments\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_customer_segments_customer_id.bcd345d84b":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"not_null_customer_segments_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_customer_segments_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_customer_segments_customer_id.bcd345d84b","fqn":["jaffle_shop","not_null_customer_segments_customer_id"],"alias":"not_null_customer_segments_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.1302552,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customer_segments"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_customer_segments_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"dev\".\"customer_segments\"\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.accepted_values_customer_segments_value_segment__High_Value__Medium_Value__Low_Value.089ad1c243":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"accepted_values_customer_segments_value_segment__High_Value__Medium_Value__Low_Value","resource_type":"test","package_name":"jaffle_shop","path":"accepted_values_customer_segme_9953bfc5b6269ad09e8130675fed4ab0.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.accepted_values_customer_segments_value_segment__High_Value__Medium_Value__Low_Value.089ad1c243","fqn":["jaffle_shop","accepted_values_customer_segments_value_segment__High_Value__Medium_Value__Low_Value"],"alias":"accepted_values_customer_segme_9953bfc5b6269ad09e8130675fed4ab0","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":"accepted_values_customer_segme_9953bfc5b6269ad09e8130675fed4ab0","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{"alias":"accepted_values_customer_segme_9953bfc5b6269ad09e8130675fed4ab0"},"created_at":1730854371.131339,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_customer_segme_9953bfc5b6269ad09e8130675fed4ab0\") }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customer_segments"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/accepted_values_customer_segme_9953bfc5b6269ad09e8130675fed4ab0.sql","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        value_segment as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"dev\".\"customer_segments\"\n    group by value_segment\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'High Value','Medium Value','Low Value'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.unique_customer_order_pattern_customer_id.99ad852c54":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"unique_customer_order_pattern_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_customer_order_pattern_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.unique_customer_order_pattern_customer_id.99ad852c54","fqn":["jaffle_shop","unique_customer_order_pattern_customer_id"],"alias":"unique_customer_order_pattern_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.138668,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customer_order_pattern"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/unique_customer_order_pattern_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"dev\".\"customer_order_pattern\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_customer_order_pattern_customer_id.3f8f4d52ea":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"not_null_customer_order_pattern_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_customer_order_pattern_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_customer_order_pattern_customer_id.3f8f4d52ea","fqn":["jaffle_shop","not_null_customer_order_pattern_customer_id"],"alias":"not_null_customer_order_pattern_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.139744,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customer_order_pattern"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_customer_order_pattern_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"dev\".\"customer_order_pattern\"\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.unique_orders_order_id.fed79b3a6e":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"unique_orders_order_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_orders_order_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.unique_orders_order_id.fed79b3a6e","fqn":["jaffle_shop","unique_orders_order_id"],"alias":"unique_orders_order_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.1408179,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/unique_orders_order_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"dev\".\"orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_orders_order_id.cf6c17daed":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"not_null_orders_order_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_order_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_orders_order_id.cf6c17daed","fqn":["jaffle_shop","not_null_orders_order_id"],"alias":"not_null_orders_order_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.141888,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_orders_order_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_shop\".\"dev\".\"orders\"\nwhere order_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_orders_customer_id.c5f02694af":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"not_null_orders_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_customer_id.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_orders_customer_id.c5f02694af","fqn":["jaffle_shop","not_null_orders_customer_id"],"alias":"not_null_orders_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.143123,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_orders_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"dev\".\"orders\"\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"relationships_orders_customer_id__customer_id__ref_customers_","resource_type":"test","package_name":"jaffle_shop","path":"relationships_orders_customer_id__customer_id__ref_customers_.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2","fqn":["jaffle_shop","relationships_orders_customer_id__customer_id__ref_customers_"],"alias":"relationships_orders_customer_id__customer_id__ref_customers_","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.144191,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_relationships(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_relationships","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.customers","model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/relationships_orders_customer_id__customer_id__ref_customers_.sql","compiled":true,"compiled_code":"\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"jaffle_shop\".\"dev\".\"orders\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"jaffle_shop\".\"dev\".\"customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"accepted_values_orders_status__placed__shipped__completed__return_pending__returned","resource_type":"test","package_name":"jaffle_shop","path":"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3","fqn":["jaffle_shop","accepted_values_orders_status__placed__shipped__completed__return_pending__returned"],"alias":"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{"alias":"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758"},"created_at":1730854371.148344,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758\") }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758.sql","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"dev\".\"orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_orders_amount.106140f9fd":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"not_null_orders_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_amount.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_orders_amount.106140f9fd","fqn":["jaffle_shop","not_null_orders_amount"],"alias":"not_null_orders_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.151686,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_orders_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect amount\nfrom \"jaffle_shop\".\"dev\".\"orders\"\nwhere amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"not_null_orders_credit_card_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_credit_card_amount.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59","fqn":["jaffle_shop","not_null_orders_credit_card_amount"],"alias":"not_null_orders_credit_card_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.1527581,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_orders_credit_card_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect credit_card_amount\nfrom \"jaffle_shop\".\"dev\".\"orders\"\nwhere credit_card_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"not_null_orders_coupon_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_coupon_amount.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625","fqn":["jaffle_shop","not_null_orders_coupon_amount"],"alias":"not_null_orders_coupon_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.154021,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_orders_coupon_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect coupon_amount\nfrom \"jaffle_shop\".\"dev\".\"orders\"\nwhere coupon_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"not_null_orders_bank_transfer_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_bank_transfer_amount.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49","fqn":["jaffle_shop","not_null_orders_bank_transfer_amount"],"alias":"not_null_orders_bank_transfer_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.155096,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_orders_bank_transfer_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect bank_transfer_amount\nfrom \"jaffle_shop\".\"dev\".\"orders\"\nwhere bank_transfer_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"not_null_orders_gift_card_amount","resource_type":"test","package_name":"jaffle_shop","path":"not_null_orders_gift_card_amount.sql","original_file_path":"models/schema.yml","unique_id":"test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a","fqn":["jaffle_shop","not_null_orders_gift_card_amount"],"alias":"not_null_orders_gift_card_amount","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.156346,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.orders"]},"compiled_path":"target/compiled/jaffle_shop/models/schema.yml/not_null_orders_gift_card_amount.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect gift_card_amount\nfrom \"jaffle_shop\".\"dev\".\"orders\"\nwhere gift_card_amount is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.unique_stg_customers_customer_id.c7614daada":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"unique_stg_customers_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_stg_customers_customer_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.unique_stg_customers_customer_id.c7614daada","fqn":["jaffle_shop","staging","unique_stg_customers_customer_id"],"alias":"unique_stg_customers_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.1587598,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_customers"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_customers_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"dev\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"not_null_stg_customers_customer_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_stg_customers_customer_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa","fqn":["jaffle_shop","staging","not_null_stg_customers_customer_id"],"alias":"not_null_stg_customers_customer_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.159861,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_customers"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_customers_customer_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_shop\".\"dev\".\"stg_customers\"\nwhere customer_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"unique_stg_orders_order_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_stg_orders_order_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a","fqn":["jaffle_shop","staging","unique_stg_orders_order_id"],"alias":"unique_stg_orders_order_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.160932,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_orders"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_orders_order_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"dev\".\"stg_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"not_null_stg_orders_order_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_stg_orders_order_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64","fqn":["jaffle_shop","staging","not_null_stg_orders_order_id"],"alias":"not_null_stg_orders_order_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.162205,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_orders"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_orders_order_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_shop\".\"dev\".\"stg_orders\"\nwhere order_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned","resource_type":"test","package_name":"jaffle_shop","path":"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad","fqn":["jaffle_shop","staging","accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned"],"alias":"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{"alias":"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58"},"created_at":1730854371.163306,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58\") }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_orders"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"dev\".\"stg_orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.unique_stg_payments_payment_id.3744510712":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"unique_stg_payments_payment_id","resource_type":"test","package_name":"jaffle_shop","path":"unique_stg_payments_payment_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.unique_stg_payments_payment_id.3744510712","fqn":["jaffle_shop","staging","unique_stg_payments_payment_id"],"alias":"unique_stg_payments_payment_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.1659389,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_unique(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_unique","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_payments"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_payments_payment_id.sql","compiled":true,"compiled_code":"\n    \n    \n\nselect\n    payment_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"dev\".\"stg_payments\"\nwhere payment_id is not null\ngroup by payment_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"not_null_stg_payments_payment_id","resource_type":"test","package_name":"jaffle_shop","path":"not_null_stg_payments_payment_id.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075","fqn":["jaffle_shop","staging","not_null_stg_payments_payment_id"],"alias":"not_null_stg_payments_payment_id","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{},"created_at":1730854371.167017,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_not_null","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_payments"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_payments_payment_id.sql","compiled":true,"compiled_code":"\n    \n    \n\n\n\nselect payment_id\nfrom \"jaffle_shop\".\"dev\".\"stg_payments\"\nwhere payment_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278":{"database":"jaffle_shop","schema":"dev_dbt_test__audit","name":"accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card","resource_type":"test","package_name":"jaffle_shop","path":"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql","original_file_path":"models/staging/schema.yml","unique_id":"test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278","fqn":["jaffle_shop","staging","accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card"],"alias":"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef","checksum":{"name":"none","checksum":""},"config":{"enabled":true,"alias":"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"group":null,"materialized":"test","severity":"ERROR","store_failures":null,"store_failures_as":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":null},"patch_path":null,"build_path":null,"unrendered_config":{"alias":"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef"},"created_at":1730854371.168694,"config_call_dict":{},"relation_name":null,"raw_code":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef\") }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery"],"nodes":["model.jaffle_shop.stg_payments"]},"compiled_path":"target/compiled/jaffle_shop/models/staging/schema.yml/accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql","compiled":true,"compiled_code":"\n    \n    \n\nwith all_values as (\n\n    select\n        payment_method as value_field,\n        count(*) as n_records\n\n    from \"jaffle_shop\".\"dev\".\"stg_payments\"\n    group by payment_method\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'credit_card','coupon','bank_transfer','gift_card'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"sql_operation.jaffle_shop.generated_a973bafefbf6432fa3073d9878fda04f":{"database":"jaffle_shop","schema":"dev","name":"generated_a973bafefbf6432fa3073d9878fda04f","resource_type":"sql_operation","package_name":"jaffle_shop","path":"sql/generated_a973bafefbf6432fa3073d9878fda04f","original_file_path":"from remote system.sql","unique_id":"sql_operation.jaffle_shop.generated_a973bafefbf6432fa3073d9878fda04f","fqn":["jaffle_shop","sql","generated_a973bafefbf6432fa3073d9878fda04f"],"alias":"generated_a973bafefbf6432fa3073d9878fda04f","checksum":{"name":"sha256","checksum":"e58c0497cecb8258821780b3f54c566555db188d194aa73060531d32b50b6925"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true}},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":null,"build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730855403.191257,"config_call_dict":{},"relation_name":null,"raw_code":"select count(*) from {{ relation }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":[]},"compiled_path":"target/compiled/jaffle_shop/from remote system.sql/sql/generated_a973bafefbf6432fa3073d9878fda04f","compiled":true,"compiled_code":"select count(*) from \"jaffle_shop\".\"prod\".\"customers\"","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"sql_operation.jaffle_shop.generated_4da7565773ba49b2b9be92b73406492e":{"database":"jaffle_shop","schema":"dev","name":"generated_4da7565773ba49b2b9be92b73406492e","resource_type":"sql_operation","package_name":"jaffle_shop","path":"sql/generated_4da7565773ba49b2b9be92b73406492e","original_file_path":"from remote system.sql","unique_id":"sql_operation.jaffle_shop.generated_4da7565773ba49b2b9be92b73406492e","fqn":["jaffle_shop","sql","generated_4da7565773ba49b2b9be92b73406492e"],"alias":"generated_4da7565773ba49b2b9be92b73406492e","checksum":{"name":"sha256","checksum":"e58c0497cecb8258821780b3f54c566555db188d194aa73060531d32b50b6925"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true}},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":null,"build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730855403.2224,"config_call_dict":{},"relation_name":null,"raw_code":"select count(*) from {{ relation }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":[]},"compiled_path":"target/compiled/jaffle_shop/from remote system.sql/sql/generated_4da7565773ba49b2b9be92b73406492e","compiled":true,"compiled_code":"select count(*) from \"jaffle_shop\".\"dev\".\"customers\"","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"sql_operation.jaffle_shop.generated_711cf01004af42c09394a4a8784d0351":{"database":"jaffle_shop","schema":"dev","name":"generated_711cf01004af42c09394a4a8784d0351","resource_type":"sql_operation","package_name":"jaffle_shop","path":"sql/generated_711cf01004af42c09394a4a8784d0351","original_file_path":"from remote system.sql","unique_id":"sql_operation.jaffle_shop.generated_711cf01004af42c09394a4a8784d0351","fqn":["jaffle_shop","sql","generated_711cf01004af42c09394a4a8784d0351"],"alias":"generated_711cf01004af42c09394a4a8784d0351","checksum":{"name":"sha256","checksum":"e58c0497cecb8258821780b3f54c566555db188d194aa73060531d32b50b6925"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true}},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":null,"build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730855403.2312498,"config_call_dict":{},"relation_name":null,"raw_code":"select count(*) from {{ relation }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":[]},"compiled_path":"target/compiled/jaffle_shop/from remote system.sql/sql/generated_711cf01004af42c09394a4a8784d0351","compiled":true,"compiled_code":"select count(*) from \"jaffle_shop\".\"prod\".\"orders\"","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"sql_operation.jaffle_shop.generated_ac7646a1449f48bb835623a08a1118ff":{"database":"jaffle_shop","schema":"dev","name":"generated_ac7646a1449f48bb835623a08a1118ff","resource_type":"sql_operation","package_name":"jaffle_shop","path":"sql/generated_ac7646a1449f48bb835623a08a1118ff","original_file_path":"from remote system.sql","unique_id":"sql_operation.jaffle_shop.generated_ac7646a1449f48bb835623a08a1118ff","fqn":["jaffle_shop","sql","generated_ac7646a1449f48bb835623a08a1118ff"],"alias":"generated_ac7646a1449f48bb835623a08a1118ff","checksum":{"name":"sha256","checksum":"e58c0497cecb8258821780b3f54c566555db188d194aa73060531d32b50b6925"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true}},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":null,"build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730855403.239396,"config_call_dict":{},"relation_name":null,"raw_code":"select count(*) from {{ relation }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":[]},"compiled_path":"target/compiled/jaffle_shop/from remote system.sql/sql/generated_ac7646a1449f48bb835623a08a1118ff","compiled":true,"compiled_code":"select count(*) from \"jaffle_shop\".\"dev\".\"orders\"","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"sql_operation.jaffle_shop.generated_af21a467a67d401a85c9794278e16a6a":{"database":"jaffle_shop","schema":"dev","name":"generated_af21a467a67d401a85c9794278e16a6a","resource_type":"sql_operation","package_name":"jaffle_shop","path":"sql/generated_af21a467a67d401a85c9794278e16a6a","original_file_path":"from remote system.sql","unique_id":"sql_operation.jaffle_shop.generated_af21a467a67d401a85c9794278e16a6a","fqn":["jaffle_shop","sql","generated_af21a467a67d401a85c9794278e16a6a"],"alias":"generated_af21a467a67d401a85c9794278e16a6a","checksum":{"name":"sha256","checksum":"f8ff2fe83eb5a056d98abaa11fef6ebd36b1cc895bba915d0eb1d486eaed8d8f"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true}},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":null,"build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730855403.2493691,"config_call_dict":{},"relation_name":null,"raw_code":"{{ adapter.dispatch('test_unique', 'dbt')(relation, primary_key) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.default__test_unique"],"nodes":[]},"compiled_path":"target/compiled/jaffle_shop/from remote system.sql/sql/generated_af21a467a67d401a85c9794278e16a6a","compiled":true,"compiled_code":"\n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"prod\".\"customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"sql_operation.jaffle_shop.generated_d9063d148a8c4e8dbcbbc6de6fbbd4ef":{"database":"jaffle_shop","schema":"dev","name":"generated_d9063d148a8c4e8dbcbbc6de6fbbd4ef","resource_type":"sql_operation","package_name":"jaffle_shop","path":"sql/generated_d9063d148a8c4e8dbcbbc6de6fbbd4ef","original_file_path":"from remote system.sql","unique_id":"sql_operation.jaffle_shop.generated_d9063d148a8c4e8dbcbbc6de6fbbd4ef","fqn":["jaffle_shop","sql","generated_d9063d148a8c4e8dbcbbc6de6fbbd4ef"],"alias":"generated_d9063d148a8c4e8dbcbbc6de6fbbd4ef","checksum":{"name":"sha256","checksum":"f8ff2fe83eb5a056d98abaa11fef6ebd36b1cc895bba915d0eb1d486eaed8d8f"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true}},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":null,"build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730855403.2648058,"config_call_dict":{},"relation_name":null,"raw_code":"{{ adapter.dispatch('test_unique', 'dbt')(relation, primary_key) }}","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.dbt.default__test_unique"],"nodes":[]},"compiled_path":"target/compiled/jaffle_shop/from remote system.sql/sql/generated_d9063d148a8c4e8dbcbbc6de6fbbd4ef","compiled":true,"compiled_code":"\n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_shop\".\"dev\".\"customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"sql_operation.jaffle_shop.generated_8961572aec5140699d57d5bdd44bc576":{"database":"jaffle_shop","schema":"dev","name":"generated_8961572aec5140699d57d5bdd44bc576","resource_type":"sql_operation","package_name":"jaffle_shop","path":"sql/generated_8961572aec5140699d57d5bdd44bc576","original_file_path":"from remote system.sql","unique_id":"sql_operation.jaffle_shop.generated_8961572aec5140699d57d5bdd44bc576","fqn":["jaffle_shop","sql","generated_8961572aec5140699d57d5bdd44bc576"],"alias":"generated_8961572aec5140699d57d5bdd44bc576","checksum":{"name":"sha256","checksum":"bae3b5358ac651f3a8a0ae15296560d0eac623d103b622ae9f3dfca266a3c011"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true}},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":null,"build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730855403.3175502,"config_call_dict":{},"relation_name":null,"raw_code":"\n        {% set a_query %}\n            select {{ primary_key }} as _pk, * from {{ base_relation }}\n        {% endset %}\n\n        {% set b_query %}\n            select {{ primary_key }} as _pk, * from {{ curr_relation }}\n        {% endset %}\n\n        {{ audit_helper.compare_column_values(\n            a_query=a_query,\n            b_query=b_query,\n            primary_key=\"_pk\",\n            column_to_compare=column_to_compare\n        ) }}\n        ","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.audit_helper.compare_column_values"],"nodes":[]},"compiled_path":"target/compiled/jaffle_shop/from remote system.sql/sql/generated_8961572aec5140699d57d5bdd44bc576","compiled":true,"compiled_code":"\n        \n\n        \n\n        with a_query as (\n    \n            select customer_id as _pk, * from \"jaffle_shop\".\"prod\".\"customers\"\n        \n),\n\nb_query as (\n    \n            select customer_id as _pk, * from \"jaffle_shop\".\"dev\".\"customers\"\n        \n),\n\njoined as (\n    select\n        coalesce(a_query._pk, b_query._pk) as _pk,\n        a_query.customer_id as a_query_value,\n        b_query.customer_id as b_query_value,\n        case\n            when a_query.customer_id = b_query.customer_id then '✅: perfect match'\n            when a_query.customer_id is null and b_query.customer_id is null then '✅: both are null'\n            when a_query._pk is null then '🤷: missing from a'\n            when b_query._pk is null then '🤷: missing from b'\n            when a_query.customer_id is null then '🤷: value is null in a only'\n            when b_query.customer_id is null then '🤷: value is null in b only'\n            when a_query.customer_id != b_query.customer_id then '❌: ‍values do not match'\n            else 'unknown' -- this should never happen\n        end as match_status,\n        case\n            when a_query.customer_id = b_query.customer_id then 0\n            when a_query.customer_id is null and b_query.customer_id is null then 1\n            when a_query._pk is null then 2\n            when b_query._pk is null then 3\n            when a_query.customer_id is null then 4\n            when b_query.customer_id is null then 5\n            when a_query.customer_id != b_query.customer_id then 6\n            else 7 -- this should never happen\n        end as match_order\n\n    from a_query\n\n    full outer join b_query on a_query._pk = b_query._pk\n),\n\naggregated as (\n    select\n        'customer_id' as column_name,\n        match_status,\n        match_order,\n        count(*) as count_records\n    from joined\n\n    group by column_name, match_status, match_order\n)\n\nselect\n    column_name,\n    match_status,\n    count_records,\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\n\nfrom aggregated\n\norder by match_order\n\n\n        ","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"sql_operation.jaffle_shop.generated_2c1ad492a91f4f4b9196f29b5f913e7a":{"database":"jaffle_shop","schema":"dev","name":"generated_2c1ad492a91f4f4b9196f29b5f913e7a","resource_type":"sql_operation","package_name":"jaffle_shop","path":"sql/generated_2c1ad492a91f4f4b9196f29b5f913e7a","original_file_path":"from remote system.sql","unique_id":"sql_operation.jaffle_shop.generated_2c1ad492a91f4f4b9196f29b5f913e7a","fqn":["jaffle_shop","sql","generated_2c1ad492a91f4f4b9196f29b5f913e7a"],"alias":"generated_2c1ad492a91f4f4b9196f29b5f913e7a","checksum":{"name":"sha256","checksum":"bae3b5358ac651f3a8a0ae15296560d0eac623d103b622ae9f3dfca266a3c011"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true}},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":null,"build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730855403.338161,"config_call_dict":{},"relation_name":null,"raw_code":"\n        {% set a_query %}\n            select {{ primary_key }} as _pk, * from {{ base_relation }}\n        {% endset %}\n\n        {% set b_query %}\n            select {{ primary_key }} as _pk, * from {{ curr_relation }}\n        {% endset %}\n\n        {{ audit_helper.compare_column_values(\n            a_query=a_query,\n            b_query=b_query,\n            primary_key=\"_pk\",\n            column_to_compare=column_to_compare\n        ) }}\n        ","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":["macro.audit_helper.compare_column_values"],"nodes":[]},"compiled_path":"target/compiled/jaffle_shop/from remote system.sql/sql/generated_2c1ad492a91f4f4b9196f29b5f913e7a","compiled":true,"compiled_code":"\n        \n\n        \n\n        with a_query as (\n    \n            select customer_id as _pk, * from \"jaffle_shop\".\"prod\".\"customers\"\n        \n),\n\nb_query as (\n    \n            select customer_id as _pk, * from \"jaffle_shop\".\"dev\".\"customers\"\n        \n),\n\njoined as (\n    select\n        coalesce(a_query._pk, b_query._pk) as _pk,\n        a_query.customer_lifetime_value as a_query_value,\n        b_query.customer_lifetime_value as b_query_value,\n        case\n            when a_query.customer_lifetime_value = b_query.customer_lifetime_value then '✅: perfect match'\n            when a_query.customer_lifetime_value is null and b_query.customer_lifetime_value is null then '✅: both are null'\n            when a_query._pk is null then '🤷: missing from a'\n            when b_query._pk is null then '🤷: missing from b'\n            when a_query.customer_lifetime_value is null then '🤷: value is null in a only'\n            when b_query.customer_lifetime_value is null then '🤷: value is null in b only'\n            when a_query.customer_lifetime_value != b_query.customer_lifetime_value then '❌: ‍values do not match'\n            else 'unknown' -- this should never happen\n        end as match_status,\n        case\n            when a_query.customer_lifetime_value = b_query.customer_lifetime_value then 0\n            when a_query.customer_lifetime_value is null and b_query.customer_lifetime_value is null then 1\n            when a_query._pk is null then 2\n            when b_query._pk is null then 3\n            when a_query.customer_lifetime_value is null then 4\n            when b_query.customer_lifetime_value is null then 5\n            when a_query.customer_lifetime_value != b_query.customer_lifetime_value then 6\n            else 7 -- this should never happen\n        end as match_order\n\n    from a_query\n\n    full outer join b_query on a_query._pk = b_query._pk\n),\n\naggregated as (\n    select\n        'customer_lifetime_value' as column_name,\n        match_status,\n        match_order,\n        count(*) as count_records\n    from joined\n\n    group by column_name, match_status, match_order\n)\n\nselect\n    column_name,\n    match_status,\n    count_records,\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\n\nfrom aggregated\n\norder by match_order\n\n\n        ","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}},"sql_operation.jaffle_shop.generated_93c9aa6ec6774d5c942b19f95242b5a0":{"database":"jaffle_shop","schema":"dev","name":"generated_93c9aa6ec6774d5c942b19f95242b5a0","resource_type":"sql_operation","package_name":"jaffle_shop","path":"sql/generated_93c9aa6ec6774d5c942b19f95242b5a0","original_file_path":"from remote system.sql","unique_id":"sql_operation.jaffle_shop.generated_93c9aa6ec6774d5c942b19f95242b5a0","fqn":["jaffle_shop","sql","generated_93c9aa6ec6774d5c942b19f95242b5a0"],"alias":"generated_93c9aa6ec6774d5c942b19f95242b5a0","checksum":{"name":"sha256","checksum":"3415f227d1f4806778fad5ec6a8cf1d32f5e29329002e9c925862506ae17b258"},"config":{"enabled":true,"alias":null,"schema":null,"database":null,"tags":[],"meta":{},"group":null,"materialized":"table","incremental_strategy":null,"persist_docs":{},"post-hook":[],"pre-hook":[],"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","on_configuration_change":"apply","grants":{},"packages":[],"docs":{"show":true,"node_color":"gold"},"contract":{"enforced":false,"alias_types":true}},"tags":[],"description":"","columns":{},"meta":{},"group":null,"docs":{"show":true,"node_color":"gold"},"patch_path":null,"build_path":null,"unrendered_config":{"materialized":"table","docs":{"node_color":"gold"}},"created_at":1730855403.366666,"config_call_dict":{},"relation_name":null,"raw_code":"SELECT\n    DATE_TRUNC('week', first_order) AS first_order_week,\n    AVG(customer_lifetime_value) AS avg_lifetime_value\nFROM\n    {{ ref(\"customers\") }}\nWHERE first_order is not NULL\nGROUP BY\n    first_order_week\nORDER BY\n    first_order_week;","language":"sql","refs":[],"sources":[],"metrics":[],"depends_on":{"macros":[],"nodes":["model.jaffle_shop.customers"]},"compiled_path":"target/compiled/jaffle_shop/from remote system.sql/sql/generated_93c9aa6ec6774d5c942b19f95242b5a0","compiled":true,"compiled_code":"SELECT\n    DATE_TRUNC('week', first_order) AS first_order_week,\n    AVG(customer_lifetime_value) AS avg_lifetime_value\nFROM\n    \"jaffle_shop\".\"dev\".\"customers\"\nWHERE first_order is not NULL\nGROUP BY\n    first_order_week\nORDER BY\n    first_order_week;","extra_ctes_injected":true,"extra_ctes":[],"contract":{"enforced":false,"alias_types":true,"checksum":null}}},"sources":{"source.jaffle_shop.jaffle-shop-data.raw_customers":{"database":"jaffle_shop","schema":"jaffle-shop-data","name":"raw_customers","resource_type":"source","package_name":"jaffle_shop","path":"models/staging/sources.yml","original_file_path":"models/staging/sources.yml","unique_id":"source.jaffle_shop.jaffle-shop-data.raw_customers","fqn":["jaffle_shop","staging","jaffle-shop-data","raw_customers"],"source_name":"jaffle-shop-data","source_description":"","loader":"","identifier":"raw_customers","quoting":{"database":null,"schema":null,"identifier":null,"column":null},"loaded_at_field":null,"freshness":{"warn_after":{"count":null,"period":null},"error_after":{"count":null,"period":null},"filter":null},"external":null,"description":"","columns":{},"meta":{"external_location":"read_csv('jaffle-shop-data/raw_customers.csv', header = true, auto_detect = true)"},"source_meta":{},"tags":[],"config":{"enabled":true},"patch_path":null,"unrendered_config":{},"relation_name":"read_csv('jaffle-shop-data/raw_customers.csv', header = true, auto_detect = true)","created_at":1730854371.2085829},"source.jaffle_shop.jaffle-shop-data.raw_orders":{"database":"jaffle_shop","schema":"jaffle-shop-data","name":"raw_orders","resource_type":"source","package_name":"jaffle_shop","path":"models/staging/sources.yml","original_file_path":"models/staging/sources.yml","unique_id":"source.jaffle_shop.jaffle-shop-data.raw_orders","fqn":["jaffle_shop","staging","jaffle-shop-data","raw_orders"],"source_name":"jaffle-shop-data","source_description":"","loader":"","identifier":"raw_orders","quoting":{"database":null,"schema":null,"identifier":null,"column":null},"loaded_at_field":null,"freshness":{"warn_after":{"count":null,"period":null},"error_after":{"count":null,"period":null},"filter":null},"external":null,"description":"","columns":{},"meta":{"external_location":"read_csv('jaffle-shop-data/raw_orders.csv', header = true, auto_detect = true)"},"source_meta":{},"tags":[],"config":{"enabled":true},"patch_path":null,"unrendered_config":{},"relation_name":"read_csv('jaffle-shop-data/raw_orders.csv', header = true, auto_detect = true)","created_at":1730854371.208686},"source.jaffle_shop.jaffle-shop-data.raw_payments":{"database":"jaffle_shop","schema":"jaffle-shop-data","name":"raw_payments","resource_type":"source","package_name":"jaffle_shop","path":"models/staging/sources.yml","original_file_path":"models/staging/sources.yml","unique_id":"source.jaffle_shop.jaffle-shop-data.raw_payments","fqn":["jaffle_shop","staging","jaffle-shop-data","raw_payments"],"source_name":"jaffle-shop-data","source_description":"","loader":"","identifier":"raw_payments","quoting":{"database":null,"schema":null,"identifier":null,"column":null},"loaded_at_field":null,"freshness":{"warn_after":{"count":null,"period":null},"error_after":{"count":null,"period":null},"filter":null},"external":null,"description":"","columns":{},"meta":{"external_location":"read_csv('jaffle-shop-data/raw_payments.csv', header = true, auto_detect = true)"},"source_meta":{},"tags":[],"config":{"enabled":true},"patch_path":null,"unrendered_config":{},"relation_name":"read_csv('jaffle-shop-data/raw_payments.csv', header = true, auto_detect = true)","created_at":1730854371.208763}},"macros":{"macro.dbt_duckdb.duckdb__get_binding_char":{"name":"duckdb__get_binding_char","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/seed.sql","original_file_path":"macros/seed.sql","unique_id":"macro.dbt_duckdb.duckdb__get_binding_char","macro_sql":"{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.295616,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_batch_size":{"name":"duckdb__get_batch_size","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/seed.sql","original_file_path":"macros/seed.sql","unique_id":"macro.dbt_duckdb.duckdb__get_batch_size","macro_sql":"{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.295755,"supported_languages":null},"macro.dbt_duckdb.duckdb__load_csv_rows":{"name":"duckdb__load_csv_rows","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/seed.sql","original_file_path":"macros/seed.sql","unique_id":"macro.dbt_duckdb.duckdb__load_csv_rows","macro_sql":"{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set delimiter = config.get('delimiter', ',') %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE, DELIMITER '{{ delimiter }}')\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_batch_size","macro.dbt.get_seed_column_quoted_csv","macro.dbt.get_binding_char"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.297632,"supported_languages":null},"macro.dbt_duckdb.duckdb__snapshot_merge_sql":{"name":"duckdb__snapshot_merge_sql","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/snapshot_helper.sql","original_file_path":"macros/snapshot_helper.sql","unique_id":"macro.dbt_duckdb.duckdb__snapshot_merge_sql","macro_sql":"{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = DBT_INTERNAL_TARGET.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and DBT_INTERNAL_TARGET.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.2985659,"supported_languages":null},"macro.dbt_duckdb.build_snapshot_staging_table":{"name":"build_snapshot_staging_table","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/snapshot_helper.sql","original_file_path":"macros/snapshot_helper.sql","unique_id":"macro.dbt_duckdb.build_snapshot_staging_table","macro_sql":"{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.make_temp_relation","macro.dbt.snapshot_staging_table","macro.dbt.statement","macro.dbt.create_table_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.299003,"supported_languages":null},"macro.dbt_duckdb.duckdb__post_snapshot":{"name":"duckdb__post_snapshot","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/snapshot_helper.sql","original_file_path":"macros/snapshot_helper.sql","unique_id":"macro.dbt_duckdb.duckdb__post_snapshot","macro_sql":"{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.drop_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.299157,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_catalog":{"name":"duckdb__get_catalog","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/catalog.sql","original_file_path":"macros/catalog.sql","unique_id":"macro.dbt_duckdb.duckdb__get_catalog","macro_sql":"{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n        '{{ database }}' as table_database,\n        t.table_schema,\n        t.table_name,\n        t.table_type,\n        '' as table_comment,\n        c.column_name,\n        c.ordinal_position as column_index,\n        c.data_type column_type,\n        '' as column_comment,\n        '' as table_owner\n    FROM information_schema.tables t JOIN information_schema.columns c ON t.table_schema = c.table_schema AND t.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(t.table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    AND t.table_type IN ('BASE TABLE', 'VIEW')\n    ORDER BY\n        t.table_schema,\n        t.table_name,\n        c.ordinal_position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.299943,"supported_languages":null},"macro.dbt_duckdb.duckdb__create_schema":{"name":"duckdb__create_schema","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__create_schema","macro_sql":"{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {%- endcall -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.307596,"supported_languages":null},"macro.dbt_duckdb.duckdb__drop_schema":{"name":"duckdb__drop_schema","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__drop_schema","macro_sql":"{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.307779,"supported_languages":null},"macro.dbt_duckdb.duckdb__list_schemas":{"name":"duckdb__list_schemas","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__list_schemas","macro_sql":"{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where catalog_name = '{{ database }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.308067,"supported_languages":null},"macro.dbt_duckdb.duckdb__check_schema_exists":{"name":"duckdb__check_schema_exists","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__check_schema_exists","macro_sql":"{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where schema_name = '{{ schema }}'\n        and catalog_name = '{{ information_schema.database }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3083122,"supported_languages":null},"macro.dbt_duckdb.get_column_names":{"name":"get_column_names","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.get_column_names","macro_sql":"{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.308678,"supported_languages":null},"macro.dbt_duckdb.duckdb__create_table_as":{"name":"duckdb__create_table_as","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__create_table_as","macro_sql":"{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_assert_columns_equivalent","macro.dbt.get_table_columns_and_constraints","macro.dbt_duckdb.get_column_names","macro.dbt.get_select_subquery","macro.dbt_duckdb.py_write_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.309778,"supported_languages":null},"macro.dbt_duckdb.py_write_table":{"name":"py_write_table","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.py_write_table","macro_sql":"{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    con.execute('create table {{ relation }} as select * from df')\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.309943,"supported_languages":null},"macro.dbt_duckdb.duckdb__create_view_as":{"name":"duckdb__create_view_as","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__create_view_as","macro_sql":"{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_assert_columns_equivalent"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.310356,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_columns_in_relation":{"name":"duckdb__get_columns_in_relation","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__get_columns_in_relation","macro_sql":"{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and table_schema = '{{ relation.schema }}'\n      {% endif %}\n      {% if relation.database %}\n      and table_catalog = '{{ relation.database }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.sql_convert_columns_in_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.310853,"supported_languages":null},"macro.dbt_duckdb.duckdb__list_relations_without_caching":{"name":"duckdb__list_relations_without_caching","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__list_relations_without_caching","macro_sql":"{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n    and table_catalog = '{{ schema_relation.database }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3111901,"supported_languages":null},"macro.dbt_duckdb.duckdb__drop_relation":{"name":"duckdb__drop_relation","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__drop_relation","macro_sql":"{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3113961,"supported_languages":null},"macro.dbt_duckdb.duckdb__rename_relation":{"name":"duckdb__rename_relation","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__rename_relation","macro_sql":"{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.311691,"supported_languages":null},"macro.dbt_duckdb.duckdb__make_temp_relation":{"name":"duckdb__make_temp_relation","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__make_temp_relation","macro_sql":"{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.py_current_timestring"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.312024,"supported_languages":null},"macro.dbt_duckdb.duckdb__current_timestamp":{"name":"duckdb__current_timestamp","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__current_timestamp","macro_sql":"{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.312098,"supported_languages":null},"macro.dbt_duckdb.duckdb__snapshot_string_as_time":{"name":"duckdb__snapshot_string_as_time","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__snapshot_string_as_time","macro_sql":"{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.312263,"supported_languages":null},"macro.dbt_duckdb.duckdb__snapshot_get_time":{"name":"duckdb__snapshot_get_time","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__snapshot_get_time","macro_sql":"{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.current_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.312364,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_incremental_default_sql":{"name":"duckdb__get_incremental_default_sql","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.duckdb__get_incremental_default_sql","macro_sql":"{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_incremental_delete_insert_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.312505,"supported_languages":null},"macro.dbt_duckdb.location_exists":{"name":"location_exists","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.location_exists","macro_sql":"{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.312654,"supported_languages":null},"macro.dbt_duckdb.write_to_file":{"name":"write_to_file","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.write_to_file","macro_sql":"{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.312861,"supported_languages":null},"macro.dbt_duckdb.store_relation":{"name":"store_relation","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.store_relation","macro_sql":"{% macro store_relation(plugin, relation, location, format, config) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format, config) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.313144,"supported_languages":null},"macro.dbt_duckdb.render_write_options":{"name":"render_write_options","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/adapters.sql","original_file_path":"macros/adapters.sql","unique_id":"macro.dbt_duckdb.render_write_options","macro_sql":"{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% if options is not mapping %}\n    {% do exceptions.raise_compiler_error(\"The options argument must be a dictionary\") %}\n  {% endif %}\n\n  {% for k in options %}\n    {% set _ = options.update({k: render(options[k])}) %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.314143,"supported_languages":null},"macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql":{"name":"duckdb__get_delete_insert_merge_sql","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/incremental_helper.sql","original_file_path":"macros/incremental_helper.sql","unique_id":"macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql","macro_sql":"{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.get_quoted_csv"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.316231,"supported_languages":null},"macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns":{"name":"duckdb__alter_relation_add_remove_columns","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/columns.sql","original_file_path":"macros/columns.sql","unique_id":"macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns","macro_sql":"{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ column.name }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ column.name }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.31717,"supported_languages":null},"macro.dbt_duckdb.materialization_table_duckdb":{"name":"materialization_table_duckdb","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/materializations/table.sql","original_file_path":"macros/materializations/table.sql","unique_id":"macro.dbt_duckdb.materialization_table_duckdb","macro_sql":"{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks","macro.dbt.statement","macro.dbt.create_table_as","macro.dbt.create_indexes","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.31982,"supported_languages":["sql","python"]},"macro.dbt_duckdb.materialization_external_duckdb":{"name":"materialization_external_duckdb","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/materializations/external.sql","original_file_path":"macros/materializations/external.sql","unique_id":"macro.dbt_duckdb.materialization_external_duckdb","macro_sql":"{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n  {%- set format = config.get('format', 'parquet') -%}\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- write an temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n  -- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    create or replace view {{ intermediate_relation }} as (\n        select * from '{{ read_location }}'\n    );\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format, config) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt_duckdb.external_location","macro.dbt_duckdb.render_write_options","macro.dbt.load_cached_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks","macro.dbt.statement","macro.dbt.create_table_as","macro.dbt_duckdb.write_to_file","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs","macro.dbt_duckdb.store_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.324717,"supported_languages":["sql","python"]},"macro.dbt_duckdb.materialization_incremental_duckdb":{"name":"materialization_incremental_duckdb","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/materializations/incremental.sql","original_file_path":"macros/materializations/incremental.sql","unique_id":"macro.dbt_duckdb.materialization_incremental_duckdb","macro_sql":"{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(True, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_temp_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.should_full_refresh","macro.dbt.incremental_validate_on_schema_change","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks","macro.dbt.create_table_as","macro.dbt.statement","macro.dbt.run_query","macro.dbt.process_schema_changes","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs","macro.dbt.create_indexes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.330102,"supported_languages":["sql","python"]},"macro.dbt_duckdb.duckdb__dateadd":{"name":"duckdb__dateadd","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/dateadd.sql","original_file_path":"macros/utils/dateadd.sql","unique_id":"macro.dbt_duckdb.duckdb__dateadd","macro_sql":"{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3303418,"supported_languages":null},"macro.dbt_duckdb.duckdb__listagg":{"name":"duckdb__listagg","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/listagg.sql","original_file_path":"macros/utils/listagg.sql","unique_id":"macro.dbt_duckdb.duckdb__listagg","macro_sql":"{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3309498,"supported_languages":null},"macro.dbt_duckdb.duckdb__datediff":{"name":"duckdb__datediff","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/datediff.sql","original_file_path":"macros/utils/datediff.sql","unique_id":"macro.dbt_duckdb.duckdb__datediff","macro_sql":"{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.datediff"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.334025,"supported_languages":null},"macro.dbt_duckdb.duckdb__any_value":{"name":"duckdb__any_value","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/any_value.sql","original_file_path":"macros/utils/any_value.sql","unique_id":"macro.dbt_duckdb.duckdb__any_value","macro_sql":"{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.334165,"supported_languages":null},"macro.dbt_duckdb.register_upstream_external_models":{"name":"register_upstream_external_models","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/upstream.sql","original_file_path":"macros/utils/upstream.sql","unique_id":"macro.dbt_duckdb.register_upstream_external_models","macro_sql":"{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt_duckdb.external_location","macro.dbt_duckdb.render_write_options","macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.336534,"supported_languages":null},"macro.dbt_duckdb.duckdb__split_part":{"name":"duckdb__split_part","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/splitpart.sql","original_file_path":"macros/utils/splitpart.sql","unique_id":"macro.dbt_duckdb.duckdb__split_part","macro_sql":"{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3367438,"supported_languages":null},"macro.dbt_duckdb.duckdb__last_day":{"name":"duckdb__last_day","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/lastday.sql","original_file_path":"macros/utils/lastday.sql","unique_id":"macro.dbt_duckdb.duckdb__last_day","macro_sql":"{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.dateadd","macro.dbt.date_trunc","macro.dbt.default_last_day"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.337213,"supported_languages":null},"macro.dbt_duckdb.external_location":{"name":"external_location","resource_type":"macro","package_name":"dbt_duckdb","path":"macros/utils/external_location.sql","original_file_path":"macros/utils/external_location.sql","unique_id":"macro.dbt_duckdb.external_location","macro_sql":"{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.337734,"supported_languages":null},"macro.dbt.run_hooks":{"name":"run_hooks","resource_type":"macro","package_name":"dbt","path":"macros/materializations/hooks.sql","original_file_path":"macros/materializations/hooks.sql","unique_id":"macro.dbt.run_hooks","macro_sql":"{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.338859,"supported_languages":null},"macro.dbt.make_hook_config":{"name":"make_hook_config","resource_type":"macro","package_name":"dbt","path":"macros/materializations/hooks.sql","original_file_path":"macros/materializations/hooks.sql","unique_id":"macro.dbt.make_hook_config","macro_sql":"{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.33911,"supported_languages":null},"macro.dbt.before_begin":{"name":"before_begin","resource_type":"macro","package_name":"dbt","path":"macros/materializations/hooks.sql","original_file_path":"macros/materializations/hooks.sql","unique_id":"macro.dbt.before_begin","macro_sql":"{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.make_hook_config"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3392682,"supported_languages":null},"macro.dbt.in_transaction":{"name":"in_transaction","resource_type":"macro","package_name":"dbt","path":"macros/materializations/hooks.sql","original_file_path":"macros/materializations/hooks.sql","unique_id":"macro.dbt.in_transaction","macro_sql":"{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.make_hook_config"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.339426,"supported_languages":null},"macro.dbt.after_commit":{"name":"after_commit","resource_type":"macro","package_name":"dbt","path":"macros/materializations/hooks.sql","original_file_path":"macros/materializations/hooks.sql","unique_id":"macro.dbt.after_commit","macro_sql":"{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.make_hook_config"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.339605,"supported_languages":null},"macro.dbt.set_sql_header":{"name":"set_sql_header","resource_type":"macro","package_name":"dbt","path":"macros/materializations/configs.sql","original_file_path":"macros/materializations/configs.sql","unique_id":"macro.dbt.set_sql_header","macro_sql":"{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3399758,"supported_languages":null},"macro.dbt.should_full_refresh":{"name":"should_full_refresh","resource_type":"macro","package_name":"dbt","path":"macros/materializations/configs.sql","original_file_path":"macros/materializations/configs.sql","unique_id":"macro.dbt.should_full_refresh","macro_sql":"{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3402822,"supported_languages":null},"macro.dbt.should_store_failures":{"name":"should_store_failures","resource_type":"macro","package_name":"dbt","path":"macros/materializations/configs.sql","original_file_path":"macros/materializations/configs.sql","unique_id":"macro.dbt.should_store_failures","macro_sql":"{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.340575,"supported_languages":null},"macro.dbt.snapshot_merge_sql":{"name":"snapshot_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/snapshot_merge.sql","original_file_path":"macros/materializations/snapshots/snapshot_merge.sql","unique_id":"macro.dbt.snapshot_merge_sql","macro_sql":"{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.341002,"supported_languages":null},"macro.dbt.default__snapshot_merge_sql":{"name":"default__snapshot_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/snapshot_merge.sql","original_file_path":"macros/materializations/snapshots/snapshot_merge.sql","unique_id":"macro.dbt.default__snapshot_merge_sql","macro_sql":"{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.341265,"supported_languages":null},"macro.dbt.strategy_dispatch":{"name":"strategy_dispatch","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.strategy_dispatch","macro_sql":"{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.344948,"supported_languages":null},"macro.dbt.snapshot_hash_arguments":{"name":"snapshot_hash_arguments","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.snapshot_hash_arguments","macro_sql":"{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__snapshot_hash_arguments"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.345152,"supported_languages":null},"macro.dbt.default__snapshot_hash_arguments":{"name":"default__snapshot_hash_arguments","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.default__snapshot_hash_arguments","macro_sql":"{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3454561,"supported_languages":null},"macro.dbt.snapshot_timestamp_strategy":{"name":"snapshot_timestamp_strategy","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.snapshot_timestamp_strategy","macro_sql":"{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.snapshot_hash_arguments"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3462322,"supported_languages":null},"macro.dbt.snapshot_string_as_time":{"name":"snapshot_string_as_time","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.snapshot_string_as_time","macro_sql":"{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.34641,"supported_languages":null},"macro.dbt.default__snapshot_string_as_time":{"name":"default__snapshot_string_as_time","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.default__snapshot_string_as_time","macro_sql":"{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3465862,"supported_languages":null},"macro.dbt.snapshot_check_all_get_existing_columns":{"name":"snapshot_check_all_get_existing_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.snapshot_check_all_get_existing_columns","macro_sql":"{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.get_columns_in_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.347954,"supported_languages":null},"macro.dbt.snapshot_check_strategy":{"name":"snapshot_check_strategy","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","original_file_path":"macros/materializations/snapshots/strategies.sql","unique_id":"macro.dbt.snapshot_check_strategy","macro_sql":"{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.snapshot_get_time","macro.dbt.snapshot_check_all_get_existing_columns","macro.dbt.get_true_sql","macro.dbt.snapshot_hash_arguments"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.349264,"supported_languages":null},"macro.dbt.create_columns":{"name":"create_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.create_columns","macro_sql":"{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__create_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.353987,"supported_languages":null},"macro.dbt.default__create_columns":{"name":"default__create_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.default__create_columns","macro_sql":"{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.354265,"supported_languages":null},"macro.dbt.post_snapshot":{"name":"post_snapshot","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.post_snapshot","macro_sql":"{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__post_snapshot"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.354424,"supported_languages":null},"macro.dbt.default__post_snapshot":{"name":"default__post_snapshot","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.default__post_snapshot","macro_sql":"{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.354513,"supported_languages":null},"macro.dbt.get_true_sql":{"name":"get_true_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.get_true_sql","macro_sql":"{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_true_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.354652,"supported_languages":null},"macro.dbt.default__get_true_sql":{"name":"default__get_true_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.default__get_true_sql","macro_sql":"{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.354781,"supported_languages":null},"macro.dbt.snapshot_staging_table":{"name":"snapshot_staging_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.snapshot_staging_table","macro_sql":"{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__snapshot_staging_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3549829,"supported_languages":null},"macro.dbt.default__snapshot_staging_table":{"name":"default__snapshot_staging_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.default__snapshot_staging_table","macro_sql":"{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.snapshot_get_time"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.355835,"supported_languages":null},"macro.dbt.build_snapshot_table":{"name":"build_snapshot_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.build_snapshot_table","macro_sql":"{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__build_snapshot_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.35602,"supported_languages":null},"macro.dbt.default__build_snapshot_table":{"name":"default__build_snapshot_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.default__build_snapshot_table","macro_sql":"{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.356266,"supported_languages":null},"macro.dbt.build_snapshot_staging_table":{"name":"build_snapshot_staging_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","original_file_path":"macros/materializations/snapshots/helpers.sql","unique_id":"macro.dbt.build_snapshot_staging_table","macro_sql":"{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.make_temp_relation","macro.dbt.snapshot_staging_table","macro.dbt.statement","macro.dbt.create_table_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3566809,"supported_languages":null},"macro.dbt.materialization_snapshot_default":{"name":"materialization_snapshot_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/snapshots/snapshot.sql","original_file_path":"macros/materializations/snapshots/snapshot.sql","unique_id":"macro.dbt.materialization_snapshot_default","macro_sql":"{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt.get_or_create_relation","macro.dbt.run_hooks","macro.dbt.strategy_dispatch","macro.dbt.build_snapshot_table","macro.dbt.create_table_as","macro.dbt.build_snapshot_staging_table","macro.dbt.create_columns","macro.dbt.snapshot_merge_sql","macro.dbt.statement","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs","macro.dbt.create_indexes","macro.dbt.post_snapshot"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.362891,"supported_languages":["sql"]},"macro.dbt.materialization_test_default":{"name":"materialization_test_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/test.sql","original_file_path":"macros/materializations/tests/test.sql","unique_id":"macro.dbt.materialization_test_default","macro_sql":"{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}","depends_on":{"macros":["macro.dbt.should_store_failures","macro.dbt.statement","macro.dbt.get_create_sql","macro.dbt.get_test_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.365483,"supported_languages":["sql"]},"macro.dbt.get_test_sql":{"name":"get_test_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/helpers.sql","original_file_path":"macros/materializations/tests/helpers.sql","unique_id":"macro.dbt.get_test_sql","macro_sql":"{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_test_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.365916,"supported_languages":null},"macro.dbt.default__get_test_sql":{"name":"default__get_test_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/helpers.sql","original_file_path":"macros/materializations/tests/helpers.sql","unique_id":"macro.dbt.default__get_test_sql","macro_sql":"{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.366207,"supported_languages":null},"macro.dbt.get_where_subquery":{"name":"get_where_subquery","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/where_subquery.sql","original_file_path":"macros/materializations/tests/where_subquery.sql","unique_id":"macro.dbt.get_where_subquery","macro_sql":"{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_where_subquery"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3665721,"supported_languages":null},"macro.dbt.default__get_where_subquery":{"name":"default__get_where_subquery","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/where_subquery.sql","original_file_path":"macros/materializations/tests/where_subquery.sql","unique_id":"macro.dbt.default__get_where_subquery","macro_sql":"{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.36693,"supported_languages":null},"macro.dbt.materialization_unit_default":{"name":"materialization_unit_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/tests/unit.sql","original_file_path":"macros/materializations/tests/unit.sql","unique_id":"macro.dbt.materialization_unit_default","macro_sql":"{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}","depends_on":{"macros":["macro.dbt.get_columns_in_query","macro.dbt.make_temp_relation","macro.dbt.run_query","macro.dbt.get_create_table_as_sql","macro.dbt.get_empty_subquery_sql","macro.dbt.get_expected_sql","macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3691032,"supported_languages":["sql"]},"macro.dbt.materialization_materialized_view_default":{"name":"materialization_materialized_view_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialization_materialized_view_default","macro_sql":"{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.materialized_view_setup","macro.dbt.materialized_view_get_build_sql","macro.dbt.materialized_view_execute_no_op","macro.dbt.materialized_view_execute_build_sql","macro.dbt.materialized_view_teardown"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.373944,"supported_languages":["sql"]},"macro.dbt.materialized_view_setup":{"name":"materialized_view_setup","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialized_view_setup","macro_sql":"{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3743181,"supported_languages":null},"macro.dbt.materialized_view_teardown":{"name":"materialized_view_teardown","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialized_view_teardown","macro_sql":"{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.374562,"supported_languages":null},"macro.dbt.materialized_view_get_build_sql":{"name":"materialized_view_get_build_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialized_view_get_build_sql","macro_sql":"{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.should_full_refresh","macro.dbt.get_create_materialized_view_as_sql","macro.dbt.get_replace_sql","macro.dbt.get_materialized_view_configuration_changes","macro.dbt.refresh_materialized_view","macro.dbt.get_alter_materialized_view_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.375812,"supported_languages":null},"macro.dbt.materialized_view_execute_no_op":{"name":"materialized_view_execute_no_op","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialized_view_execute_no_op","macro_sql":"{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.376262,"supported_languages":null},"macro.dbt.materialized_view_execute_build_sql":{"name":"materialized_view_execute_build_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","original_file_path":"macros/materializations/models/materialized_view.sql","unique_id":"macro.dbt.materialized_view_execute_build_sql","macro_sql":"{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_hooks","macro.dbt.statement","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3768902,"supported_languages":null},"macro.dbt.materialization_view_default":{"name":"materialization_view_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/view.sql","original_file_path":"macros/materializations/models/view.sql","unique_id":"macro.dbt.materialization_view_default","macro_sql":"{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.run_hooks","macro.dbt.drop_relation_if_exists","macro.dbt.statement","macro.dbt.get_create_view_as_sql","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3796082,"supported_languages":["sql"]},"macro.dbt.materialization_table_default":{"name":"materialization_table_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/table.sql","original_file_path":"macros/materializations/models/table.sql","unique_id":"macro.dbt.materialization_table_default","macro_sql":"{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks","macro.dbt.statement","macro.dbt.get_create_table_as_sql","macro.dbt.create_indexes","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.382321,"supported_languages":["sql"]},"macro.dbt.get_quoted_csv":{"name":"get_quoted_csv","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","original_file_path":"macros/materializations/models/incremental/column_helpers.sql","unique_id":"macro.dbt.get_quoted_csv","macro_sql":"{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.383845,"supported_languages":null},"macro.dbt.diff_columns":{"name":"diff_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","original_file_path":"macros/materializations/models/incremental/column_helpers.sql","unique_id":"macro.dbt.diff_columns","macro_sql":"{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.384371,"supported_languages":null},"macro.dbt.diff_column_data_types":{"name":"diff_column_data_types","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","original_file_path":"macros/materializations/models/incremental/column_helpers.sql","unique_id":"macro.dbt.diff_column_data_types","macro_sql":"{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.385002,"supported_languages":null},"macro.dbt.get_merge_update_columns":{"name":"get_merge_update_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","original_file_path":"macros/materializations/models/incremental/column_helpers.sql","unique_id":"macro.dbt.get_merge_update_columns","macro_sql":"{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_merge_update_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.38523,"supported_languages":null},"macro.dbt.default__get_merge_update_columns":{"name":"default__get_merge_update_columns","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","original_file_path":"macros/materializations/models/incremental/column_helpers.sql","unique_id":"macro.dbt.default__get_merge_update_columns","macro_sql":"{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.385927,"supported_languages":null},"macro.dbt.get_merge_sql":{"name":"get_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.get_merge_sql","macro_sql":"{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3923368,"supported_languages":null},"macro.dbt.default__get_merge_sql":{"name":"default__get_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.default__get_merge_sql","macro_sql":"{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_quoted_csv","macro.dbt.get_merge_update_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.393954,"supported_languages":null},"macro.dbt.get_delete_insert_merge_sql":{"name":"get_delete_insert_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.get_delete_insert_merge_sql","macro_sql":"{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.394209,"supported_languages":null},"macro.dbt.default__get_delete_insert_merge_sql":{"name":"default__get_delete_insert_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.default__get_delete_insert_merge_sql","macro_sql":"{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.get_quoted_csv"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.395166,"supported_languages":null},"macro.dbt.get_insert_overwrite_merge_sql":{"name":"get_insert_overwrite_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.get_insert_overwrite_merge_sql","macro_sql":"{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_insert_overwrite_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.395426,"supported_languages":null},"macro.dbt.default__get_insert_overwrite_merge_sql":{"name":"default__get_insert_overwrite_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","original_file_path":"macros/materializations/models/incremental/merge.sql","unique_id":"macro.dbt.default__get_insert_overwrite_merge_sql","macro_sql":"{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_quoted_csv"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.39604,"supported_languages":null},"macro.dbt.is_incremental":{"name":"is_incremental","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/is_incremental.sql","original_file_path":"macros/materializations/models/incremental/is_incremental.sql","unique_id":"macro.dbt.is_incremental","macro_sql":"{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.should_full_refresh"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.396642,"supported_languages":null},"macro.dbt.get_incremental_append_sql":{"name":"get_incremental_append_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_incremental_append_sql","macro_sql":"{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_incremental_append_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.397483,"supported_languages":null},"macro.dbt.default__get_incremental_append_sql":{"name":"default__get_incremental_append_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.default__get_incremental_append_sql","macro_sql":"{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_insert_into_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3977118,"supported_languages":null},"macro.dbt.get_incremental_delete_insert_sql":{"name":"get_incremental_delete_insert_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_incremental_delete_insert_sql","macro_sql":"{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_incremental_delete_insert_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.39789,"supported_languages":null},"macro.dbt.default__get_incremental_delete_insert_sql":{"name":"default__get_incremental_delete_insert_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.default__get_incremental_delete_insert_sql","macro_sql":"{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_delete_insert_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.3981729,"supported_languages":null},"macro.dbt.get_incremental_merge_sql":{"name":"get_incremental_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_incremental_merge_sql","macro_sql":"{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_incremental_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.398347,"supported_languages":null},"macro.dbt.default__get_incremental_merge_sql":{"name":"default__get_incremental_merge_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.default__get_incremental_merge_sql","macro_sql":"{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.39863,"supported_languages":null},"macro.dbt.get_incremental_insert_overwrite_sql":{"name":"get_incremental_insert_overwrite_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_incremental_insert_overwrite_sql","macro_sql":"{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_incremental_insert_overwrite_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.398806,"supported_languages":null},"macro.dbt.default__get_incremental_insert_overwrite_sql":{"name":"default__get_incremental_insert_overwrite_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.default__get_incremental_insert_overwrite_sql","macro_sql":"{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_insert_overwrite_merge_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.399061,"supported_languages":null},"macro.dbt.get_incremental_default_sql":{"name":"get_incremental_default_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_incremental_default_sql","macro_sql":"{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.39924,"supported_languages":null},"macro.dbt.default__get_incremental_default_sql":{"name":"default__get_incremental_default_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.default__get_incremental_default_sql","macro_sql":"{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_incremental_append_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.399383,"supported_languages":null},"macro.dbt.get_insert_into_sql":{"name":"get_insert_into_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","original_file_path":"macros/materializations/models/incremental/strategies.sql","unique_id":"macro.dbt.get_insert_into_sql","macro_sql":"{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_quoted_csv"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.399647,"supported_languages":null},"macro.dbt.materialization_incremental_default":{"name":"materialization_incremental_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/incremental.sql","original_file_path":"macros/materializations/models/incremental/incremental.sql","unique_id":"macro.dbt.materialization_incremental_default","macro_sql":"{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.make_temp_relation","macro.dbt.make_intermediate_relation","macro.dbt.make_backup_relation","macro.dbt.should_full_refresh","macro.dbt.incremental_validate_on_schema_change","macro.dbt.drop_relation_if_exists","macro.dbt.run_hooks","macro.dbt.get_create_table_as_sql","macro.dbt.run_query","macro.dbt.process_schema_changes","macro.dbt.statement","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs","macro.dbt.create_indexes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4044318,"supported_languages":["sql"]},"macro.dbt.incremental_validate_on_schema_change":{"name":"incremental_validate_on_schema_change","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","original_file_path":"macros/materializations/models/incremental/on_schema_change.sql","unique_id":"macro.dbt.incremental_validate_on_schema_change","macro_sql":"{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4099462,"supported_languages":null},"macro.dbt.check_for_schema_changes":{"name":"check_for_schema_changes","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","original_file_path":"macros/materializations/models/incremental/on_schema_change.sql","unique_id":"macro.dbt.check_for_schema_changes","macro_sql":"{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.diff_columns","macro.dbt.diff_column_data_types"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.411103,"supported_languages":null},"macro.dbt.sync_column_schemas":{"name":"sync_column_schemas","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","original_file_path":"macros/materializations/models/incremental/on_schema_change.sql","unique_id":"macro.dbt.sync_column_schemas","macro_sql":"{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.alter_relation_add_remove_columns","macro.dbt.alter_column_type"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4122329,"supported_languages":null},"macro.dbt.process_schema_changes":{"name":"process_schema_changes","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","original_file_path":"macros/materializations/models/incremental/on_schema_change.sql","unique_id":"macro.dbt.process_schema_changes","macro_sql":"{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.check_for_schema_changes","macro.dbt.sync_column_schemas"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4130402,"supported_languages":null},"macro.dbt.can_clone_table":{"name":"can_clone_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/clone/can_clone_table.sql","original_file_path":"macros/materializations/models/clone/can_clone_table.sql","unique_id":"macro.dbt.can_clone_table","macro_sql":"{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__can_clone_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.413271,"supported_languages":null},"macro.dbt.default__can_clone_table":{"name":"default__can_clone_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/clone/can_clone_table.sql","original_file_path":"macros/materializations/models/clone/can_clone_table.sql","unique_id":"macro.dbt.default__can_clone_table","macro_sql":"{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.413383,"supported_languages":null},"macro.dbt.create_or_replace_clone":{"name":"create_or_replace_clone","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/clone/create_or_replace_clone.sql","original_file_path":"macros/materializations/models/clone/create_or_replace_clone.sql","unique_id":"macro.dbt.create_or_replace_clone","macro_sql":"{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__create_or_replace_clone"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4136589,"supported_languages":null},"macro.dbt.default__create_or_replace_clone":{"name":"default__create_or_replace_clone","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/clone/create_or_replace_clone.sql","original_file_path":"macros/materializations/models/clone/create_or_replace_clone.sql","unique_id":"macro.dbt.default__create_or_replace_clone","macro_sql":"{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.413785,"supported_languages":null},"macro.dbt.materialization_clone_default":{"name":"materialization_clone_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/models/clone/clone.sql","original_file_path":"macros/materializations/models/clone/clone.sql","unique_id":"macro.dbt.materialization_clone_default","macro_sql":"{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}","depends_on":{"macros":["macro.dbt.load_cached_relation","macro.dbt.can_clone_table","macro.dbt.drop_relation_if_exists","macro.dbt.statement","macro.dbt.create_or_replace_clone","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.417257,"supported_languages":["sql"]},"macro.dbt.materialization_seed_default":{"name":"materialization_seed_default","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/seed.sql","original_file_path":"macros/materializations/seeds/seed.sql","unique_id":"macro.dbt.materialization_seed_default","macro_sql":"{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","depends_on":{"macros":["macro.dbt.should_full_refresh","macro.dbt.run_hooks","macro.dbt.reset_csv_table","macro.dbt.create_csv_table","macro.dbt.load_csv_rows","macro.dbt.noop_statement","macro.dbt.get_csv_sql","macro.dbt.should_revoke","macro.dbt.apply_grants","macro.dbt.persist_docs","macro.dbt.create_indexes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.420279,"supported_languages":["sql"]},"macro.dbt.create_csv_table":{"name":"create_csv_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.create_csv_table","macro_sql":"{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__create_csv_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.425188,"supported_languages":null},"macro.dbt.default__create_csv_table":{"name":"default__create_csv_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__create_csv_table","macro_sql":"{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.426032,"supported_languages":null},"macro.dbt.reset_csv_table":{"name":"reset_csv_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.reset_csv_table","macro_sql":"{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__reset_csv_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.426254,"supported_languages":null},"macro.dbt.default__reset_csv_table":{"name":"default__reset_csv_table","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__reset_csv_table","macro_sql":"{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.create_csv_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.426707,"supported_languages":null},"macro.dbt.get_csv_sql":{"name":"get_csv_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.get_csv_sql","macro_sql":"{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_csv_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.426889,"supported_languages":null},"macro.dbt.default__get_csv_sql":{"name":"default__get_csv_sql","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__get_csv_sql","macro_sql":"{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4270132,"supported_languages":null},"macro.dbt.get_binding_char":{"name":"get_binding_char","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.get_binding_char","macro_sql":"{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_binding_char"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4271512,"supported_languages":null},"macro.dbt.default__get_binding_char":{"name":"default__get_binding_char","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__get_binding_char","macro_sql":"{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.427258,"supported_languages":null},"macro.dbt.get_batch_size":{"name":"get_batch_size","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.get_batch_size","macro_sql":"{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_batch_size"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.42741,"supported_languages":null},"macro.dbt.default__get_batch_size":{"name":"default__get_batch_size","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__get_batch_size","macro_sql":"{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.427526,"supported_languages":null},"macro.dbt.get_seed_column_quoted_csv":{"name":"get_seed_column_quoted_csv","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.get_seed_column_quoted_csv","macro_sql":"{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4279768,"supported_languages":null},"macro.dbt.load_csv_rows":{"name":"load_csv_rows","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.load_csv_rows","macro_sql":"{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__load_csv_rows"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4281511,"supported_languages":null},"macro.dbt.default__load_csv_rows":{"name":"default__load_csv_rows","resource_type":"macro","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","original_file_path":"macros/materializations/seeds/helpers.sql","unique_id":"macro.dbt.default__load_csv_rows","macro_sql":"{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_batch_size","macro.dbt.get_seed_column_quoted_csv","macro.dbt.get_binding_char"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.429346,"supported_languages":null},"macro.dbt.generate_alias_name":{"name":"generate_alias_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_alias.sql","original_file_path":"macros/get_custom_name/get_custom_alias.sql","unique_id":"macro.dbt.generate_alias_name","macro_sql":"{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__generate_alias_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4297512,"supported_languages":null},"macro.dbt.default__generate_alias_name":{"name":"default__generate_alias_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_alias.sql","original_file_path":"macros/get_custom_name/get_custom_alias.sql","unique_id":"macro.dbt.default__generate_alias_name","macro_sql":"{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4301162,"supported_languages":null},"macro.dbt.generate_schema_name":{"name":"generate_schema_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_schema.sql","original_file_path":"macros/get_custom_name/get_custom_schema.sql","unique_id":"macro.dbt.generate_schema_name","macro_sql":"{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__generate_schema_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.430609,"supported_languages":null},"macro.dbt.default__generate_schema_name":{"name":"default__generate_schema_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_schema.sql","original_file_path":"macros/get_custom_name/get_custom_schema.sql","unique_id":"macro.dbt.default__generate_schema_name","macro_sql":"{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.43086,"supported_languages":null},"macro.dbt.generate_schema_name_for_env":{"name":"generate_schema_name_for_env","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_schema.sql","original_file_path":"macros/get_custom_name/get_custom_schema.sql","unique_id":"macro.dbt.generate_schema_name_for_env","macro_sql":"{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.431135,"supported_languages":null},"macro.dbt.generate_database_name":{"name":"generate_database_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_database.sql","original_file_path":"macros/get_custom_name/get_custom_database.sql","unique_id":"macro.dbt.generate_database_name","macro_sql":"{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__generate_database_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.43151,"supported_languages":null},"macro.dbt.default__generate_database_name":{"name":"default__generate_database_name","resource_type":"macro","package_name":"dbt","path":"macros/get_custom_name/get_custom_database.sql","original_file_path":"macros/get_custom_name/get_custom_database.sql","unique_id":"macro.dbt.default__generate_database_name","macro_sql":"{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.431745,"supported_languages":null},"macro.dbt.get_drop_sql":{"name":"get_drop_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop.sql","original_file_path":"macros/relations/drop.sql","unique_id":"macro.dbt.get_drop_sql","macro_sql":"{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_drop_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.432419,"supported_languages":null},"macro.dbt.default__get_drop_sql":{"name":"default__get_drop_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop.sql","original_file_path":"macros/relations/drop.sql","unique_id":"macro.dbt.default__get_drop_sql","macro_sql":"{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.drop_view","macro.dbt.drop_table","macro.dbt.drop_materialized_view"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.432768,"supported_languages":null},"macro.dbt.drop_relation":{"name":"drop_relation","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop.sql","original_file_path":"macros/relations/drop.sql","unique_id":"macro.dbt.drop_relation","macro_sql":"{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__drop_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.432941,"supported_languages":null},"macro.dbt.default__drop_relation":{"name":"default__drop_relation","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop.sql","original_file_path":"macros/relations/drop.sql","unique_id":"macro.dbt.default__drop_relation","macro_sql":"{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.get_drop_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.433131,"supported_languages":null},"macro.dbt.drop_relation_if_exists":{"name":"drop_relation_if_exists","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop.sql","original_file_path":"macros/relations/drop.sql","unique_id":"macro.dbt.drop_relation_if_exists","macro_sql":"{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.433312,"supported_languages":null},"macro.dbt.get_replace_sql":{"name":"get_replace_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/replace.sql","original_file_path":"macros/relations/replace.sql","unique_id":"macro.dbt.get_replace_sql","macro_sql":"{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_replace_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.434043,"supported_languages":null},"macro.dbt.default__get_replace_sql":{"name":"default__get_replace_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/replace.sql","original_file_path":"macros/relations/replace.sql","unique_id":"macro.dbt.default__get_replace_sql","macro_sql":"{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_replace_view_sql","macro.dbt.get_replace_table_sql","macro.dbt.get_replace_materialized_view_sql","macro.dbt.get_create_intermediate_sql","macro.dbt.get_create_backup_sql","macro.dbt.get_rename_intermediate_sql","macro.dbt.get_drop_backup_sql","macro.dbt.get_drop_sql","macro.dbt.get_create_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.435244,"supported_languages":null},"macro.dbt.get_create_intermediate_sql":{"name":"get_create_intermediate_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create_intermediate.sql","original_file_path":"macros/relations/create_intermediate.sql","unique_id":"macro.dbt.get_create_intermediate_sql","macro_sql":"{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_create_intermediate_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4356039,"supported_languages":null},"macro.dbt.default__get_create_intermediate_sql":{"name":"default__get_create_intermediate_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create_intermediate.sql","original_file_path":"macros/relations/create_intermediate.sql","unique_id":"macro.dbt.default__get_create_intermediate_sql","macro_sql":"{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.make_intermediate_relation","macro.dbt.get_drop_sql","macro.dbt.get_create_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4358442,"supported_languages":null},"macro.dbt.drop_schema_named":{"name":"drop_schema_named","resource_type":"macro","package_name":"dbt","path":"macros/relations/schema.sql","original_file_path":"macros/relations/schema.sql","unique_id":"macro.dbt.drop_schema_named","macro_sql":"{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__drop_schema_named"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4361,"supported_languages":null},"macro.dbt.default__drop_schema_named":{"name":"default__drop_schema_named","resource_type":"macro","package_name":"dbt","path":"macros/relations/schema.sql","original_file_path":"macros/relations/schema.sql","unique_id":"macro.dbt.default__drop_schema_named","macro_sql":"{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.436308,"supported_languages":null},"macro.dbt.get_drop_backup_sql":{"name":"get_drop_backup_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop_backup.sql","original_file_path":"macros/relations/drop_backup.sql","unique_id":"macro.dbt.get_drop_backup_sql","macro_sql":"{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_drop_backup_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.436609,"supported_languages":null},"macro.dbt.default__get_drop_backup_sql":{"name":"default__get_drop_backup_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/drop_backup.sql","original_file_path":"macros/relations/drop_backup.sql","unique_id":"macro.dbt.default__get_drop_backup_sql","macro_sql":"{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.make_backup_relation","macro.dbt.get_drop_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.436803,"supported_languages":null},"macro.dbt.get_rename_sql":{"name":"get_rename_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename.sql","original_file_path":"macros/relations/rename.sql","unique_id":"macro.dbt.get_rename_sql","macro_sql":"{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_rename_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.437469,"supported_languages":null},"macro.dbt.default__get_rename_sql":{"name":"default__get_rename_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename.sql","original_file_path":"macros/relations/rename.sql","unique_id":"macro.dbt.default__get_rename_sql","macro_sql":"{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.get_rename_view_sql","macro.dbt.get_rename_table_sql","macro.dbt.get_rename_materialized_view_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.437879,"supported_languages":null},"macro.dbt.rename_relation":{"name":"rename_relation","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename.sql","original_file_path":"macros/relations/rename.sql","unique_id":"macro.dbt.rename_relation","macro_sql":"{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__rename_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4380941,"supported_languages":null},"macro.dbt.default__rename_relation":{"name":"default__rename_relation","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename.sql","original_file_path":"macros/relations/rename.sql","unique_id":"macro.dbt.default__rename_relation","macro_sql":"{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.438367,"supported_languages":null},"macro.dbt.get_create_backup_sql":{"name":"get_create_backup_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create_backup.sql","original_file_path":"macros/relations/create_backup.sql","unique_id":"macro.dbt.get_create_backup_sql","macro_sql":"{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_create_backup_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.438692,"supported_languages":null},"macro.dbt.default__get_create_backup_sql":{"name":"default__get_create_backup_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create_backup.sql","original_file_path":"macros/relations/create_backup.sql","unique_id":"macro.dbt.default__get_create_backup_sql","macro_sql":"{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.make_backup_relation","macro.dbt.get_drop_sql","macro.dbt.get_rename_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.438947,"supported_languages":null},"macro.dbt.get_create_sql":{"name":"get_create_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create.sql","original_file_path":"macros/relations/create.sql","unique_id":"macro.dbt.get_create_sql","macro_sql":"{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_create_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.439392,"supported_languages":null},"macro.dbt.default__get_create_sql":{"name":"default__get_create_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/create.sql","original_file_path":"macros/relations/create.sql","unique_id":"macro.dbt.default__get_create_sql","macro_sql":"{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.get_create_view_as_sql","macro.dbt.get_create_table_as_sql","macro.dbt.get_create_materialized_view_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4398131,"supported_languages":null},"macro.dbt.get_rename_intermediate_sql":{"name":"get_rename_intermediate_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename_intermediate.sql","original_file_path":"macros/relations/rename_intermediate.sql","unique_id":"macro.dbt.get_rename_intermediate_sql","macro_sql":"{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.default__get_rename_intermediate_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.440119,"supported_languages":null},"macro.dbt.default__get_rename_intermediate_sql":{"name":"default__get_rename_intermediate_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/rename_intermediate.sql","original_file_path":"macros/relations/rename_intermediate.sql","unique_id":"macro.dbt.default__get_rename_intermediate_sql","macro_sql":"{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.make_intermediate_relation","macro.dbt.get_rename_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.440314,"supported_languages":null},"macro.dbt.drop_materialized_view":{"name":"drop_materialized_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/drop.sql","original_file_path":"macros/relations/materialized_view/drop.sql","unique_id":"macro.dbt.drop_materialized_view","macro_sql":"{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__drop_materialized_view"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.440565,"supported_languages":null},"macro.dbt.default__drop_materialized_view":{"name":"default__drop_materialized_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/drop.sql","original_file_path":"macros/relations/materialized_view/drop.sql","unique_id":"macro.dbt.default__drop_materialized_view","macro_sql":"{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4406688,"supported_languages":null},"macro.dbt.get_replace_materialized_view_sql":{"name":"get_replace_materialized_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/replace.sql","original_file_path":"macros/relations/materialized_view/replace.sql","unique_id":"macro.dbt.get_replace_materialized_view_sql","macro_sql":"{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_replace_materialized_view_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4409258,"supported_languages":null},"macro.dbt.default__get_replace_materialized_view_sql":{"name":"default__get_replace_materialized_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/replace.sql","original_file_path":"macros/relations/materialized_view/replace.sql","unique_id":"macro.dbt.default__get_replace_materialized_view_sql","macro_sql":"{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.441122,"supported_languages":null},"macro.dbt.refresh_materialized_view":{"name":"refresh_materialized_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/refresh.sql","original_file_path":"macros/relations/materialized_view/refresh.sql","unique_id":"macro.dbt.refresh_materialized_view","macro_sql":"{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__refresh_materialized_view"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4414139,"supported_languages":null},"macro.dbt.default__refresh_materialized_view":{"name":"default__refresh_materialized_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/refresh.sql","original_file_path":"macros/relations/materialized_view/refresh.sql","unique_id":"macro.dbt.default__refresh_materialized_view","macro_sql":"{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4415412,"supported_languages":null},"macro.dbt.get_rename_materialized_view_sql":{"name":"get_rename_materialized_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/rename.sql","original_file_path":"macros/relations/materialized_view/rename.sql","unique_id":"macro.dbt.get_rename_materialized_view_sql","macro_sql":"{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_rename_materialized_view_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.441798,"supported_languages":null},"macro.dbt.default__get_rename_materialized_view_sql":{"name":"default__get_rename_materialized_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/rename.sql","original_file_path":"macros/relations/materialized_view/rename.sql","unique_id":"macro.dbt.default__get_rename_materialized_view_sql","macro_sql":"{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.441935,"supported_languages":null},"macro.dbt.get_alter_materialized_view_as_sql":{"name":"get_alter_materialized_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","original_file_path":"macros/relations/materialized_view/alter.sql","unique_id":"macro.dbt.get_alter_materialized_view_as_sql","macro_sql":"{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_alter_materialized_view_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4425092,"supported_languages":null},"macro.dbt.default__get_alter_materialized_view_as_sql":{"name":"default__get_alter_materialized_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","original_file_path":"macros/relations/materialized_view/alter.sql","unique_id":"macro.dbt.default__get_alter_materialized_view_as_sql","macro_sql":"{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4426858,"supported_languages":null},"macro.dbt.get_materialized_view_configuration_changes":{"name":"get_materialized_view_configuration_changes","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","original_file_path":"macros/relations/materialized_view/alter.sql","unique_id":"macro.dbt.get_materialized_view_configuration_changes","macro_sql":"{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_materialized_view_configuration_changes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.442956,"supported_languages":null},"macro.dbt.default__get_materialized_view_configuration_changes":{"name":"default__get_materialized_view_configuration_changes","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","original_file_path":"macros/relations/materialized_view/alter.sql","unique_id":"macro.dbt.default__get_materialized_view_configuration_changes","macro_sql":"{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4430919,"supported_languages":null},"macro.dbt.get_create_materialized_view_as_sql":{"name":"get_create_materialized_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/create.sql","original_file_path":"macros/relations/materialized_view/create.sql","unique_id":"macro.dbt.get_create_materialized_view_as_sql","macro_sql":"{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_create_materialized_view_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.44335,"supported_languages":null},"macro.dbt.default__get_create_materialized_view_as_sql":{"name":"default__get_create_materialized_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/materialized_view/create.sql","original_file_path":"macros/relations/materialized_view/create.sql","unique_id":"macro.dbt.default__get_create_materialized_view_as_sql","macro_sql":"{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.443488,"supported_languages":null},"macro.dbt.get_table_columns_and_constraints":{"name":"get_table_columns_and_constraints","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.get_table_columns_and_constraints","macro_sql":"{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__get_table_columns_and_constraints"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.444437,"supported_languages":null},"macro.dbt.default__get_table_columns_and_constraints":{"name":"default__get_table_columns_and_constraints","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.default__get_table_columns_and_constraints","macro_sql":"{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.table_columns_and_constraints"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.444551,"supported_languages":null},"macro.dbt.table_columns_and_constraints":{"name":"table_columns_and_constraints","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.table_columns_and_constraints","macro_sql":"{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.445051,"supported_languages":null},"macro.dbt.get_assert_columns_equivalent":{"name":"get_assert_columns_equivalent","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.get_assert_columns_equivalent","macro_sql":"\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__get_assert_columns_equivalent"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.445206,"supported_languages":null},"macro.dbt.default__get_assert_columns_equivalent":{"name":"default__get_assert_columns_equivalent","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.default__get_assert_columns_equivalent","macro_sql":"{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.assert_columns_equivalent"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.445332,"supported_languages":null},"macro.dbt.assert_columns_equivalent":{"name":"assert_columns_equivalent","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.assert_columns_equivalent","macro_sql":"{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_column_schema_from_query","macro.dbt.get_empty_schema_sql","macro.dbt.format_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4465978,"supported_languages":null},"macro.dbt.format_columns":{"name":"format_columns","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.format_columns","macro_sql":"{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__format_column"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4469602,"supported_languages":null},"macro.dbt.default__format_column":{"name":"default__format_column","resource_type":"macro","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","original_file_path":"macros/relations/column/columns_spec_ddl.sql","unique_id":"macro.dbt.default__format_column","macro_sql":"{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.447287,"supported_languages":null},"macro.dbt.drop_table":{"name":"drop_table","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/drop.sql","original_file_path":"macros/relations/table/drop.sql","unique_id":"macro.dbt.drop_table","macro_sql":"{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__drop_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4475431,"supported_languages":null},"macro.dbt.default__drop_table":{"name":"default__drop_table","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/drop.sql","original_file_path":"macros/relations/table/drop.sql","unique_id":"macro.dbt.default__drop_table","macro_sql":"{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4476411,"supported_languages":null},"macro.dbt.get_replace_table_sql":{"name":"get_replace_table_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/replace.sql","original_file_path":"macros/relations/table/replace.sql","unique_id":"macro.dbt.get_replace_table_sql","macro_sql":"{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_replace_table_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4478981,"supported_languages":null},"macro.dbt.default__get_replace_table_sql":{"name":"default__get_replace_table_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/replace.sql","original_file_path":"macros/relations/table/replace.sql","unique_id":"macro.dbt.default__get_replace_table_sql","macro_sql":"{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.448044,"supported_languages":null},"macro.dbt.get_rename_table_sql":{"name":"get_rename_table_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/rename.sql","original_file_path":"macros/relations/table/rename.sql","unique_id":"macro.dbt.get_rename_table_sql","macro_sql":"{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_rename_table_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.44831,"supported_languages":null},"macro.dbt.default__get_rename_table_sql":{"name":"default__get_rename_table_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/rename.sql","original_file_path":"macros/relations/table/rename.sql","unique_id":"macro.dbt.default__get_rename_table_sql","macro_sql":"{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.448447,"supported_languages":null},"macro.dbt.get_create_table_as_sql":{"name":"get_create_table_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.get_create_table_as_sql","macro_sql":"{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_create_table_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4492621,"supported_languages":null},"macro.dbt.default__get_create_table_as_sql":{"name":"default__get_create_table_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.default__get_create_table_as_sql","macro_sql":"{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.create_table_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.449436,"supported_languages":null},"macro.dbt.create_table_as":{"name":"create_table_as","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.create_table_as","macro_sql":"{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__create_table_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4498482,"supported_languages":null},"macro.dbt.default__create_table_as":{"name":"default__create_table_as","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.default__create_table_as","macro_sql":"{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.get_assert_columns_equivalent","macro.dbt.get_table_columns_and_constraints","macro.dbt.get_select_subquery"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.450498,"supported_languages":null},"macro.dbt.default__get_column_names":{"name":"default__get_column_names","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.default__get_column_names","macro_sql":"{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.450932,"supported_languages":null},"macro.dbt.get_select_subquery":{"name":"get_select_subquery","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.get_select_subquery","macro_sql":"{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_select_subquery"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.45111,"supported_languages":null},"macro.dbt.default__get_select_subquery":{"name":"default__get_select_subquery","resource_type":"macro","package_name":"dbt","path":"macros/relations/table/create.sql","original_file_path":"macros/relations/table/create.sql","unique_id":"macro.dbt.default__get_select_subquery","macro_sql":"{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.get_column_names","macro.dbt.default__get_column_names"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.451276,"supported_languages":null},"macro.dbt.drop_view":{"name":"drop_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/drop.sql","original_file_path":"macros/relations/view/drop.sql","unique_id":"macro.dbt.drop_view","macro_sql":"{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__drop_view"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.451523,"supported_languages":null},"macro.dbt.default__drop_view":{"name":"default__drop_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/drop.sql","original_file_path":"macros/relations/view/drop.sql","unique_id":"macro.dbt.default__drop_view","macro_sql":"{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4516249,"supported_languages":null},"macro.dbt.get_replace_view_sql":{"name":"get_replace_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/replace.sql","original_file_path":"macros/relations/view/replace.sql","unique_id":"macro.dbt.get_replace_view_sql","macro_sql":"{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_replace_view_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4524329,"supported_languages":null},"macro.dbt.default__get_replace_view_sql":{"name":"default__get_replace_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/replace.sql","original_file_path":"macros/relations/view/replace.sql","unique_id":"macro.dbt.default__get_replace_view_sql","macro_sql":"{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4525728,"supported_languages":null},"macro.dbt.create_or_replace_view":{"name":"create_or_replace_view","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/replace.sql","original_file_path":"macros/relations/view/replace.sql","unique_id":"macro.dbt.create_or_replace_view","macro_sql":"{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_hooks","macro.dbt.handle_existing_table","macro.dbt.should_full_refresh","macro.dbt.statement","macro.dbt.get_create_view_as_sql","macro.dbt.should_revoke","macro.dbt.apply_grants"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.453707,"supported_languages":null},"macro.dbt.handle_existing_table":{"name":"handle_existing_table","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/replace.sql","original_file_path":"macros/relations/view/replace.sql","unique_id":"macro.dbt.handle_existing_table","macro_sql":"{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__handle_existing_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.453894,"supported_languages":null},"macro.dbt.default__handle_existing_table":{"name":"default__handle_existing_table","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/replace.sql","original_file_path":"macros/relations/view/replace.sql","unique_id":"macro.dbt.default__handle_existing_table","macro_sql":"{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.454108,"supported_languages":null},"macro.dbt.get_rename_view_sql":{"name":"get_rename_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/rename.sql","original_file_path":"macros/relations/view/rename.sql","unique_id":"macro.dbt.get_rename_view_sql","macro_sql":"{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_rename_view_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.454366,"supported_languages":null},"macro.dbt.default__get_rename_view_sql":{"name":"default__get_rename_view_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/rename.sql","original_file_path":"macros/relations/view/rename.sql","unique_id":"macro.dbt.default__get_rename_view_sql","macro_sql":"{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.454505,"supported_languages":null},"macro.dbt.get_create_view_as_sql":{"name":"get_create_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/create.sql","original_file_path":"macros/relations/view/create.sql","unique_id":"macro.dbt.get_create_view_as_sql","macro_sql":"{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_create_view_as_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4549298,"supported_languages":null},"macro.dbt.default__get_create_view_as_sql":{"name":"default__get_create_view_as_sql","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/create.sql","original_file_path":"macros/relations/view/create.sql","unique_id":"macro.dbt.default__get_create_view_as_sql","macro_sql":"{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.create_view_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.455085,"supported_languages":null},"macro.dbt.create_view_as":{"name":"create_view_as","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/create.sql","original_file_path":"macros/relations/view/create.sql","unique_id":"macro.dbt.create_view_as","macro_sql":"{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__create_view_as"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4552572,"supported_languages":null},"macro.dbt.default__create_view_as":{"name":"default__create_view_as","resource_type":"macro","package_name":"dbt","path":"macros/relations/view/create.sql","original_file_path":"macros/relations/view/create.sql","unique_id":"macro.dbt.default__create_view_as","macro_sql":"{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.get_assert_columns_equivalent"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4556632,"supported_languages":null},"macro.dbt.default__test_relationships":{"name":"default__test_relationships","resource_type":"macro","package_name":"dbt","path":"macros/generic_test_sql/relationships.sql","original_file_path":"macros/generic_test_sql/relationships.sql","unique_id":"macro.dbt.default__test_relationships","macro_sql":"{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.456001,"supported_languages":null},"macro.dbt.default__test_not_null":{"name":"default__test_not_null","resource_type":"macro","package_name":"dbt","path":"macros/generic_test_sql/not_null.sql","original_file_path":"macros/generic_test_sql/not_null.sql","unique_id":"macro.dbt.default__test_not_null","macro_sql":"{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.should_store_failures"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.456278,"supported_languages":null},"macro.dbt.default__test_unique":{"name":"default__test_unique","resource_type":"macro","package_name":"dbt","path":"macros/generic_test_sql/unique.sql","original_file_path":"macros/generic_test_sql/unique.sql","unique_id":"macro.dbt.default__test_unique","macro_sql":"{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.45651,"supported_languages":null},"macro.dbt.default__test_accepted_values":{"name":"default__test_accepted_values","resource_type":"macro","package_name":"dbt","path":"macros/generic_test_sql/accepted_values.sql","original_file_path":"macros/generic_test_sql/accepted_values.sql","unique_id":"macro.dbt.default__test_accepted_values","macro_sql":"{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4570491,"supported_languages":null},"macro.dbt.statement":{"name":"statement","resource_type":"macro","package_name":"dbt","path":"macros/etc/statement.sql","original_file_path":"macros/etc/statement.sql","unique_id":"macro.dbt.statement","macro_sql":"\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4584372,"supported_languages":null},"macro.dbt.noop_statement":{"name":"noop_statement","resource_type":"macro","package_name":"dbt","path":"macros/etc/statement.sql","original_file_path":"macros/etc/statement.sql","unique_id":"macro.dbt.noop_statement","macro_sql":"{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.45898,"supported_languages":null},"macro.dbt.run_query":{"name":"run_query","resource_type":"macro","package_name":"dbt","path":"macros/etc/statement.sql","original_file_path":"macros/etc/statement.sql","unique_id":"macro.dbt.run_query","macro_sql":"{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4592571,"supported_languages":null},"macro.dbt.convert_datetime":{"name":"convert_datetime","resource_type":"macro","package_name":"dbt","path":"macros/etc/datetime.sql","original_file_path":"macros/etc/datetime.sql","unique_id":"macro.dbt.convert_datetime","macro_sql":"{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.461022,"supported_languages":null},"macro.dbt.dates_in_range":{"name":"dates_in_range","resource_type":"macro","package_name":"dbt","path":"macros/etc/datetime.sql","original_file_path":"macros/etc/datetime.sql","unique_id":"macro.dbt.dates_in_range","macro_sql":"{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.convert_datetime"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.462214,"supported_languages":null},"macro.dbt.partition_range":{"name":"partition_range","resource_type":"macro","package_name":"dbt","path":"macros/etc/datetime.sql","original_file_path":"macros/etc/datetime.sql","unique_id":"macro.dbt.partition_range","macro_sql":"{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.dates_in_range"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.462921,"supported_languages":null},"macro.dbt.py_current_timestring":{"name":"py_current_timestring","resource_type":"macro","package_name":"dbt","path":"macros/etc/datetime.sql","original_file_path":"macros/etc/datetime.sql","unique_id":"macro.dbt.py_current_timestring","macro_sql":"{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4631438,"supported_languages":null},"macro.dbt.except":{"name":"except","resource_type":"macro","package_name":"dbt","path":"macros/utils/except.sql","original_file_path":"macros/utils/except.sql","unique_id":"macro.dbt.except","macro_sql":"{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__except"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4633589,"supported_languages":null},"macro.dbt.default__except":{"name":"default__except","resource_type":"macro","package_name":"dbt","path":"macros/utils/except.sql","original_file_path":"macros/utils/except.sql","unique_id":"macro.dbt.default__except","macro_sql":"{% macro default__except() %}\n\n    except\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.463433,"supported_languages":null},"macro.dbt.get_intervals_between":{"name":"get_intervals_between","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_spine.sql","original_file_path":"macros/utils/date_spine.sql","unique_id":"macro.dbt.get_intervals_between","macro_sql":"{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_intervals_between"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.464148,"supported_languages":null},"macro.dbt.default__get_intervals_between":{"name":"default__get_intervals_between","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_spine.sql","original_file_path":"macros/utils/date_spine.sql","unique_id":"macro.dbt.default__get_intervals_between","macro_sql":"{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.datediff"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.464702,"supported_languages":null},"macro.dbt.date_spine":{"name":"date_spine","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_spine.sql","original_file_path":"macros/utils/date_spine.sql","unique_id":"macro.dbt.date_spine","macro_sql":"{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__date_spine"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.464923,"supported_languages":null},"macro.dbt.default__date_spine":{"name":"default__date_spine","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_spine.sql","original_file_path":"macros/utils/date_spine.sql","unique_id":"macro.dbt.default__date_spine","macro_sql":"{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.generate_series","macro.dbt.get_intervals_between","macro.dbt.dateadd"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.46527,"supported_languages":null},"macro.dbt.date":{"name":"date","resource_type":"macro","package_name":"dbt","path":"macros/utils/date.sql","original_file_path":"macros/utils/date.sql","unique_id":"macro.dbt.date","macro_sql":"{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__date"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.465584,"supported_languages":null},"macro.dbt.default__date":{"name":"default__date","resource_type":"macro","package_name":"dbt","path":"macros/utils/date.sql","original_file_path":"macros/utils/date.sql","unique_id":"macro.dbt.default__date","macro_sql":"{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.465853,"supported_languages":null},"macro.dbt.replace":{"name":"replace","resource_type":"macro","package_name":"dbt","path":"macros/utils/replace.sql","original_file_path":"macros/utils/replace.sql","unique_id":"macro.dbt.replace","macro_sql":"{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__replace"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.466163,"supported_languages":null},"macro.dbt.default__replace":{"name":"default__replace","resource_type":"macro","package_name":"dbt","path":"macros/utils/replace.sql","original_file_path":"macros/utils/replace.sql","unique_id":"macro.dbt.default__replace","macro_sql":"{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.466316,"supported_languages":null},"macro.dbt.concat":{"name":"concat","resource_type":"macro","package_name":"dbt","path":"macros/utils/concat.sql","original_file_path":"macros/utils/concat.sql","unique_id":"macro.dbt.concat","macro_sql":"{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__concat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4665442,"supported_languages":null},"macro.dbt.default__concat":{"name":"default__concat","resource_type":"macro","package_name":"dbt","path":"macros/utils/concat.sql","original_file_path":"macros/utils/concat.sql","unique_id":"macro.dbt.default__concat","macro_sql":"{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.466663,"supported_languages":null},"macro.dbt.get_powers_of_two":{"name":"get_powers_of_two","resource_type":"macro","package_name":"dbt","path":"macros/utils/generate_series.sql","original_file_path":"macros/utils/generate_series.sql","unique_id":"macro.dbt.get_powers_of_two","macro_sql":"{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_powers_of_two"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4674501,"supported_languages":null},"macro.dbt.default__get_powers_of_two":{"name":"default__get_powers_of_two","resource_type":"macro","package_name":"dbt","path":"macros/utils/generate_series.sql","original_file_path":"macros/utils/generate_series.sql","unique_id":"macro.dbt.default__get_powers_of_two","macro_sql":"{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.46784,"supported_languages":null},"macro.dbt.generate_series":{"name":"generate_series","resource_type":"macro","package_name":"dbt","path":"macros/utils/generate_series.sql","original_file_path":"macros/utils/generate_series.sql","unique_id":"macro.dbt.generate_series","macro_sql":"{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__generate_series"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4680169,"supported_languages":null},"macro.dbt.default__generate_series":{"name":"default__generate_series","resource_type":"macro","package_name":"dbt","path":"macros/utils/generate_series.sql","original_file_path":"macros/utils/generate_series.sql","unique_id":"macro.dbt.default__generate_series","macro_sql":"{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_powers_of_two"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.468501,"supported_languages":null},"macro.dbt.length":{"name":"length","resource_type":"macro","package_name":"dbt","path":"macros/utils/length.sql","original_file_path":"macros/utils/length.sql","unique_id":"macro.dbt.length","macro_sql":"{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__length"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.468742,"supported_languages":null},"macro.dbt.default__length":{"name":"default__length","resource_type":"macro","package_name":"dbt","path":"macros/utils/length.sql","original_file_path":"macros/utils/length.sql","unique_id":"macro.dbt.default__length","macro_sql":"{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4688451,"supported_languages":null},"macro.dbt.dateadd":{"name":"dateadd","resource_type":"macro","package_name":"dbt","path":"macros/utils/dateadd.sql","original_file_path":"macros/utils/dateadd.sql","unique_id":"macro.dbt.dateadd","macro_sql":"{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__dateadd"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.469229,"supported_languages":null},"macro.dbt.default__dateadd":{"name":"default__dateadd","resource_type":"macro","package_name":"dbt","path":"macros/utils/dateadd.sql","original_file_path":"macros/utils/dateadd.sql","unique_id":"macro.dbt.default__dateadd","macro_sql":"{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.469385,"supported_languages":null},"macro.dbt.intersect":{"name":"intersect","resource_type":"macro","package_name":"dbt","path":"macros/utils/intersect.sql","original_file_path":"macros/utils/intersect.sql","unique_id":"macro.dbt.intersect","macro_sql":"{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__intersect"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.469599,"supported_languages":null},"macro.dbt.default__intersect":{"name":"default__intersect","resource_type":"macro","package_name":"dbt","path":"macros/utils/intersect.sql","original_file_path":"macros/utils/intersect.sql","unique_id":"macro.dbt.default__intersect","macro_sql":"{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.469672,"supported_languages":null},"macro.dbt.escape_single_quotes":{"name":"escape_single_quotes","resource_type":"macro","package_name":"dbt","path":"macros/utils/escape_single_quotes.sql","original_file_path":"macros/utils/escape_single_quotes.sql","unique_id":"macro.dbt.escape_single_quotes","macro_sql":"{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__escape_single_quotes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4699168,"supported_languages":null},"macro.dbt.default__escape_single_quotes":{"name":"default__escape_single_quotes","resource_type":"macro","package_name":"dbt","path":"macros/utils/escape_single_quotes.sql","original_file_path":"macros/utils/escape_single_quotes.sql","unique_id":"macro.dbt.default__escape_single_quotes","macro_sql":"{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4700491,"supported_languages":null},"macro.dbt.right":{"name":"right","resource_type":"macro","package_name":"dbt","path":"macros/utils/right.sql","original_file_path":"macros/utils/right.sql","unique_id":"macro.dbt.right","macro_sql":"{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__right"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.470325,"supported_languages":null},"macro.dbt.default__right":{"name":"default__right","resource_type":"macro","package_name":"dbt","path":"macros/utils/right.sql","original_file_path":"macros/utils/right.sql","unique_id":"macro.dbt.default__right","macro_sql":"{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.470457,"supported_languages":null},"macro.dbt.listagg":{"name":"listagg","resource_type":"macro","package_name":"dbt","path":"macros/utils/listagg.sql","original_file_path":"macros/utils/listagg.sql","unique_id":"macro.dbt.listagg","macro_sql":"{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__listagg"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.471071,"supported_languages":null},"macro.dbt.default__listagg":{"name":"default__listagg","resource_type":"macro","package_name":"dbt","path":"macros/utils/listagg.sql","original_file_path":"macros/utils/listagg.sql","unique_id":"macro.dbt.default__listagg","macro_sql":"{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.471467,"supported_languages":null},"macro.dbt.datediff":{"name":"datediff","resource_type":"macro","package_name":"dbt","path":"macros/utils/datediff.sql","original_file_path":"macros/utils/datediff.sql","unique_id":"macro.dbt.datediff","macro_sql":"{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__datediff"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4717839,"supported_languages":null},"macro.dbt.default__datediff":{"name":"default__datediff","resource_type":"macro","package_name":"dbt","path":"macros/utils/datediff.sql","original_file_path":"macros/utils/datediff.sql","unique_id":"macro.dbt.default__datediff","macro_sql":"{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.471937,"supported_languages":null},"macro.dbt.safe_cast":{"name":"safe_cast","resource_type":"macro","package_name":"dbt","path":"macros/utils/safe_cast.sql","original_file_path":"macros/utils/safe_cast.sql","unique_id":"macro.dbt.safe_cast","macro_sql":"{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__safe_cast"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.472211,"supported_languages":null},"macro.dbt.default__safe_cast":{"name":"default__safe_cast","resource_type":"macro","package_name":"dbt","path":"macros/utils/safe_cast.sql","original_file_path":"macros/utils/safe_cast.sql","unique_id":"macro.dbt.default__safe_cast","macro_sql":"{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4723399,"supported_languages":null},"macro.dbt.hash":{"name":"hash","resource_type":"macro","package_name":"dbt","path":"macros/utils/hash.sql","original_file_path":"macros/utils/hash.sql","unique_id":"macro.dbt.hash","macro_sql":"{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__hash"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4725919,"supported_languages":null},"macro.dbt.default__hash":{"name":"default__hash","resource_type":"macro","package_name":"dbt","path":"macros/utils/hash.sql","original_file_path":"macros/utils/hash.sql","unique_id":"macro.dbt.default__hash","macro_sql":"{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.472747,"supported_languages":null},"macro.dbt.cast_bool_to_text":{"name":"cast_bool_to_text","resource_type":"macro","package_name":"dbt","path":"macros/utils/cast_bool_to_text.sql","original_file_path":"macros/utils/cast_bool_to_text.sql","unique_id":"macro.dbt.cast_bool_to_text","macro_sql":"{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__cast_bool_to_text"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4729788,"supported_languages":null},"macro.dbt.default__cast_bool_to_text":{"name":"default__cast_bool_to_text","resource_type":"macro","package_name":"dbt","path":"macros/utils/cast_bool_to_text.sql","original_file_path":"macros/utils/cast_bool_to_text.sql","unique_id":"macro.dbt.default__cast_bool_to_text","macro_sql":"{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.473142,"supported_languages":null},"macro.dbt.cast":{"name":"cast","resource_type":"macro","package_name":"dbt","path":"macros/utils/cast.sql","original_file_path":"macros/utils/cast.sql","unique_id":"macro.dbt.cast","macro_sql":"{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__cast"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4734,"supported_languages":null},"macro.dbt.default__cast":{"name":"default__cast","resource_type":"macro","package_name":"dbt","path":"macros/utils/cast.sql","original_file_path":"macros/utils/cast.sql","unique_id":"macro.dbt.default__cast","macro_sql":"{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.473532,"supported_languages":null},"macro.dbt.any_value":{"name":"any_value","resource_type":"macro","package_name":"dbt","path":"macros/utils/any_value.sql","original_file_path":"macros/utils/any_value.sql","unique_id":"macro.dbt.any_value","macro_sql":"{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__any_value"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.47376,"supported_languages":null},"macro.dbt.default__any_value":{"name":"default__any_value","resource_type":"macro","package_name":"dbt","path":"macros/utils/any_value.sql","original_file_path":"macros/utils/any_value.sql","unique_id":"macro.dbt.default__any_value","macro_sql":"{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.47392,"supported_languages":null},"macro.dbt.position":{"name":"position","resource_type":"macro","package_name":"dbt","path":"macros/utils/position.sql","original_file_path":"macros/utils/position.sql","unique_id":"macro.dbt.position","macro_sql":"{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__position"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4742012,"supported_languages":null},"macro.dbt.default__position":{"name":"default__position","resource_type":"macro","package_name":"dbt","path":"macros/utils/position.sql","original_file_path":"macros/utils/position.sql","unique_id":"macro.dbt.default__position","macro_sql":"{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4743521,"supported_languages":null},"macro.dbt.string_literal":{"name":"string_literal","resource_type":"macro","package_name":"dbt","path":"macros/utils/literal.sql","original_file_path":"macros/utils/literal.sql","unique_id":"macro.dbt.string_literal","macro_sql":"{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__string_literal"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.474592,"supported_languages":null},"macro.dbt.default__string_literal":{"name":"default__string_literal","resource_type":"macro","package_name":"dbt","path":"macros/utils/literal.sql","original_file_path":"macros/utils/literal.sql","unique_id":"macro.dbt.default__string_literal","macro_sql":"{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.47469,"supported_languages":null},"macro.dbt.type_string":{"name":"type_string","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_string","macro_sql":"\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.475559,"supported_languages":null},"macro.dbt.default__type_string":{"name":"default__type_string","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_string","macro_sql":"{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.475701,"supported_languages":null},"macro.dbt.type_timestamp":{"name":"type_timestamp","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_timestamp","macro_sql":"\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4758568,"supported_languages":null},"macro.dbt.default__type_timestamp":{"name":"default__type_timestamp","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_timestamp","macro_sql":"{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.476015,"supported_languages":null},"macro.dbt.type_float":{"name":"type_float","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_float","macro_sql":"\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_float"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.476168,"supported_languages":null},"macro.dbt.default__type_float":{"name":"default__type_float","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_float","macro_sql":"{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4763079,"supported_languages":null},"macro.dbt.type_numeric":{"name":"type_numeric","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_numeric","macro_sql":"\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.476463,"supported_languages":null},"macro.dbt.default__type_numeric":{"name":"default__type_numeric","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_numeric","macro_sql":"{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.476628,"supported_languages":null},"macro.dbt.type_bigint":{"name":"type_bigint","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_bigint","macro_sql":"\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_bigint"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.476779,"supported_languages":null},"macro.dbt.default__type_bigint":{"name":"default__type_bigint","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_bigint","macro_sql":"{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.476922,"supported_languages":null},"macro.dbt.type_int":{"name":"type_int","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_int","macro_sql":"\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_int"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.477076,"supported_languages":null},"macro.dbt.default__type_int":{"name":"default__type_int","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_int","macro_sql":"{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4772139,"supported_languages":null},"macro.dbt.type_boolean":{"name":"type_boolean","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.type_boolean","macro_sql":"\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__type_boolean"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.477386,"supported_languages":null},"macro.dbt.default__type_boolean":{"name":"default__type_boolean","resource_type":"macro","package_name":"dbt","path":"macros/utils/data_types.sql","original_file_path":"macros/utils/data_types.sql","unique_id":"macro.dbt.default__type_boolean","macro_sql":"{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.477692,"supported_languages":null},"macro.dbt.array_concat":{"name":"array_concat","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_concat.sql","original_file_path":"macros/utils/array_concat.sql","unique_id":"macro.dbt.array_concat","macro_sql":"{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__array_concat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.477957,"supported_languages":null},"macro.dbt.default__array_concat":{"name":"default__array_concat","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_concat.sql","original_file_path":"macros/utils/array_concat.sql","unique_id":"macro.dbt.default__array_concat","macro_sql":"{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.478081,"supported_languages":null},"macro.dbt.bool_or":{"name":"bool_or","resource_type":"macro","package_name":"dbt","path":"macros/utils/bool_or.sql","original_file_path":"macros/utils/bool_or.sql","unique_id":"macro.dbt.bool_or","macro_sql":"{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__bool_or"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4783108,"supported_languages":null},"macro.dbt.default__bool_or":{"name":"default__bool_or","resource_type":"macro","package_name":"dbt","path":"macros/utils/bool_or.sql","original_file_path":"macros/utils/bool_or.sql","unique_id":"macro.dbt.default__bool_or","macro_sql":"{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.478413,"supported_languages":null},"macro.dbt.last_day":{"name":"last_day","resource_type":"macro","package_name":"dbt","path":"macros/utils/last_day.sql","original_file_path":"macros/utils/last_day.sql","unique_id":"macro.dbt.last_day","macro_sql":"{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__last_day"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4787421,"supported_languages":null},"macro.dbt.default_last_day":{"name":"default_last_day","resource_type":"macro","package_name":"dbt","path":"macros/utils/last_day.sql","original_file_path":"macros/utils/last_day.sql","unique_id":"macro.dbt.default_last_day","macro_sql":"\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.dateadd","macro.dbt.date_trunc"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.478991,"supported_languages":null},"macro.dbt.default__last_day":{"name":"default__last_day","resource_type":"macro","package_name":"dbt","path":"macros/utils/last_day.sql","original_file_path":"macros/utils/last_day.sql","unique_id":"macro.dbt.default__last_day","macro_sql":"{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default_last_day"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.479132,"supported_languages":null},"macro.dbt.split_part":{"name":"split_part","resource_type":"macro","package_name":"dbt","path":"macros/utils/split_part.sql","original_file_path":"macros/utils/split_part.sql","unique_id":"macro.dbt.split_part","macro_sql":"{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__split_part"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.479639,"supported_languages":null},"macro.dbt.default__split_part":{"name":"default__split_part","resource_type":"macro","package_name":"dbt","path":"macros/utils/split_part.sql","original_file_path":"macros/utils/split_part.sql","unique_id":"macro.dbt.default__split_part","macro_sql":"{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4797928,"supported_languages":null},"macro.dbt._split_part_negative":{"name":"_split_part_negative","resource_type":"macro","package_name":"dbt","path":"macros/utils/split_part.sql","original_file_path":"macros/utils/split_part.sql","unique_id":"macro.dbt._split_part_negative","macro_sql":"{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.480005,"supported_languages":null},"macro.dbt.date_trunc":{"name":"date_trunc","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_trunc.sql","original_file_path":"macros/utils/date_trunc.sql","unique_id":"macro.dbt.date_trunc","macro_sql":"{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__date_trunc"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4802802,"supported_languages":null},"macro.dbt.default__date_trunc":{"name":"default__date_trunc","resource_type":"macro","package_name":"dbt","path":"macros/utils/date_trunc.sql","original_file_path":"macros/utils/date_trunc.sql","unique_id":"macro.dbt.default__date_trunc","macro_sql":"{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4804091,"supported_languages":null},"macro.dbt.array_construct":{"name":"array_construct","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_construct.sql","original_file_path":"macros/utils/array_construct.sql","unique_id":"macro.dbt.array_construct","macro_sql":"{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__array_construct"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.480769,"supported_languages":null},"macro.dbt.default__array_construct":{"name":"default__array_construct","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_construct.sql","original_file_path":"macros/utils/array_construct.sql","unique_id":"macro.dbt.default__array_construct","macro_sql":"{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.480994,"supported_languages":null},"macro.dbt.array_append":{"name":"array_append","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_append.sql","original_file_path":"macros/utils/array_append.sql","unique_id":"macro.dbt.array_append","macro_sql":"{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__array_append"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.481256,"supported_languages":null},"macro.dbt.default__array_append":{"name":"default__array_append","resource_type":"macro","package_name":"dbt","path":"macros/utils/array_append.sql","original_file_path":"macros/utils/array_append.sql","unique_id":"macro.dbt.default__array_append","macro_sql":"{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.481399,"supported_languages":null},"macro.dbt.create_schema":{"name":"create_schema","resource_type":"macro","package_name":"dbt","path":"macros/adapters/schema.sql","original_file_path":"macros/adapters/schema.sql","unique_id":"macro.dbt.create_schema","macro_sql":"{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__create_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.48175,"supported_languages":null},"macro.dbt.default__create_schema":{"name":"default__create_schema","resource_type":"macro","package_name":"dbt","path":"macros/adapters/schema.sql","original_file_path":"macros/adapters/schema.sql","unique_id":"macro.dbt.default__create_schema","macro_sql":"{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.481935,"supported_languages":null},"macro.dbt.drop_schema":{"name":"drop_schema","resource_type":"macro","package_name":"dbt","path":"macros/adapters/schema.sql","original_file_path":"macros/adapters/schema.sql","unique_id":"macro.dbt.drop_schema","macro_sql":"{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__drop_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.482146,"supported_languages":null},"macro.dbt.default__drop_schema":{"name":"default__drop_schema","resource_type":"macro","package_name":"dbt","path":"macros/adapters/schema.sql","original_file_path":"macros/adapters/schema.sql","unique_id":"macro.dbt.default__drop_schema","macro_sql":"{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4823208,"supported_languages":null},"macro.dbt.current_timestamp":{"name":"current_timestamp","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.current_timestamp","macro_sql":"{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_duckdb.duckdb__current_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.48279,"supported_languages":null},"macro.dbt.default__current_timestamp":{"name":"default__current_timestamp","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.default__current_timestamp","macro_sql":"{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.48293,"supported_languages":null},"macro.dbt.snapshot_get_time":{"name":"snapshot_get_time","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.snapshot_get_time","macro_sql":"\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_duckdb.duckdb__snapshot_get_time"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4830642,"supported_languages":null},"macro.dbt.default__snapshot_get_time":{"name":"default__snapshot_get_time","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.default__snapshot_get_time","macro_sql":"{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.current_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4831622,"supported_languages":null},"macro.dbt.current_timestamp_backcompat":{"name":"current_timestamp_backcompat","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.current_timestamp_backcompat","macro_sql":"{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__current_timestamp_backcompat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.483317,"supported_languages":null},"macro.dbt.default__current_timestamp_backcompat":{"name":"default__current_timestamp_backcompat","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.default__current_timestamp_backcompat","macro_sql":"{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.483389,"supported_languages":null},"macro.dbt.current_timestamp_in_utc_backcompat":{"name":"current_timestamp_in_utc_backcompat","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.current_timestamp_in_utc_backcompat","macro_sql":"{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__current_timestamp_in_utc_backcompat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4835572,"supported_languages":null},"macro.dbt.default__current_timestamp_in_utc_backcompat":{"name":"default__current_timestamp_in_utc_backcompat","resource_type":"macro","package_name":"dbt","path":"macros/adapters/timestamps.sql","original_file_path":"macros/adapters/timestamps.sql","unique_id":"macro.dbt.default__current_timestamp_in_utc_backcompat","macro_sql":"{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.current_timestamp_backcompat","macro.dbt.default__current_timestamp_backcompat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.483744,"supported_languages":null},"macro.dbt.get_create_index_sql":{"name":"get_create_index_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.get_create_index_sql","macro_sql":"{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_create_index_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.484633,"supported_languages":null},"macro.dbt.default__get_create_index_sql":{"name":"default__get_create_index_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.default__get_create_index_sql","macro_sql":"{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.484763,"supported_languages":null},"macro.dbt.create_indexes":{"name":"create_indexes","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.create_indexes","macro_sql":"{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__create_indexes"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.484927,"supported_languages":null},"macro.dbt.default__create_indexes":{"name":"default__create_indexes","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.default__create_indexes","macro_sql":"{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_create_index_sql","macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.485308,"supported_languages":null},"macro.dbt.get_drop_index_sql":{"name":"get_drop_index_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.get_drop_index_sql","macro_sql":"{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_drop_index_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.485486,"supported_languages":null},"macro.dbt.default__get_drop_index_sql":{"name":"default__get_drop_index_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.default__get_drop_index_sql","macro_sql":"{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.485615,"supported_languages":null},"macro.dbt.get_show_indexes_sql":{"name":"get_show_indexes_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.get_show_indexes_sql","macro_sql":"{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_show_indexes_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4857678,"supported_languages":null},"macro.dbt.default__get_show_indexes_sql":{"name":"default__get_show_indexes_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/indexes.sql","original_file_path":"macros/adapters/indexes.sql","unique_id":"macro.dbt.default__get_show_indexes_sql","macro_sql":"{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4858902,"supported_languages":null},"macro.dbt.make_intermediate_relation":{"name":"make_intermediate_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.make_intermediate_relation","macro_sql":"{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__make_intermediate_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4878201,"supported_languages":null},"macro.dbt.default__make_intermediate_relation":{"name":"default__make_intermediate_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.default__make_intermediate_relation","macro_sql":"{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__make_temp_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4880562,"supported_languages":null},"macro.dbt.make_temp_relation":{"name":"make_temp_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.make_temp_relation","macro_sql":"{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__make_temp_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.488278,"supported_languages":null},"macro.dbt.default__make_temp_relation":{"name":"default__make_temp_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.default__make_temp_relation","macro_sql":"{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.488553,"supported_languages":null},"macro.dbt.make_backup_relation":{"name":"make_backup_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.make_backup_relation","macro_sql":"{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__make_backup_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.488786,"supported_languages":null},"macro.dbt.default__make_backup_relation":{"name":"default__make_backup_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.default__make_backup_relation","macro_sql":"{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.48909,"supported_languages":null},"macro.dbt.truncate_relation":{"name":"truncate_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.truncate_relation","macro_sql":"{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__truncate_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.489265,"supported_languages":null},"macro.dbt.default__truncate_relation":{"name":"default__truncate_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.default__truncate_relation","macro_sql":"{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.489416,"supported_languages":null},"macro.dbt.get_or_create_relation":{"name":"get_or_create_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.get_or_create_relation","macro_sql":"{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_or_create_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.489654,"supported_languages":null},"macro.dbt.default__get_or_create_relation":{"name":"default__get_or_create_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.default__get_or_create_relation","macro_sql":"{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.490174,"supported_languages":null},"macro.dbt.load_cached_relation":{"name":"load_cached_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.load_cached_relation","macro_sql":"{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.490391,"supported_languages":null},"macro.dbt.load_relation":{"name":"load_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/relation.sql","original_file_path":"macros/adapters/relation.sql","unique_id":"macro.dbt.load_relation","macro_sql":"{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.load_cached_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.490527,"supported_languages":null},"macro.dbt.collect_freshness":{"name":"collect_freshness","resource_type":"macro","package_name":"dbt","path":"macros/adapters/freshness.sql","original_file_path":"macros/adapters/freshness.sql","unique_id":"macro.dbt.collect_freshness","macro_sql":"{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__collect_freshness"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.490935,"supported_languages":null},"macro.dbt.default__collect_freshness":{"name":"default__collect_freshness","resource_type":"macro","package_name":"dbt","path":"macros/adapters/freshness.sql","original_file_path":"macros/adapters/freshness.sql","unique_id":"macro.dbt.default__collect_freshness","macro_sql":"{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.current_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.491315,"supported_languages":null},"macro.dbt.validate_sql":{"name":"validate_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/validate_sql.sql","original_file_path":"macros/adapters/validate_sql.sql","unique_id":"macro.dbt.validate_sql","macro_sql":"{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__validate_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.491581,"supported_languages":null},"macro.dbt.default__validate_sql":{"name":"default__validate_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/validate_sql.sql","original_file_path":"macros/adapters/validate_sql.sql","unique_id":"macro.dbt.default__validate_sql","macro_sql":"{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.49179,"supported_languages":null},"macro.dbt.copy_grants":{"name":"copy_grants","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.copy_grants","macro_sql":"{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__copy_grants"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.493524,"supported_languages":null},"macro.dbt.default__copy_grants":{"name":"default__copy_grants","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__copy_grants","macro_sql":"{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.493653,"supported_languages":null},"macro.dbt.support_multiple_grantees_per_dcl_statement":{"name":"support_multiple_grantees_per_dcl_statement","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.support_multiple_grantees_per_dcl_statement","macro_sql":"{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.493841,"supported_languages":null},"macro.dbt.default__support_multiple_grantees_per_dcl_statement":{"name":"default__support_multiple_grantees_per_dcl_statement","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__support_multiple_grantees_per_dcl_statement","macro_sql":"\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.493973,"supported_languages":null},"macro.dbt.should_revoke":{"name":"should_revoke","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.should_revoke","macro_sql":"{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.copy_grants"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4944158,"supported_languages":null},"macro.dbt.get_show_grant_sql":{"name":"get_show_grant_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.get_show_grant_sql","macro_sql":"{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_show_grant_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4946408,"supported_languages":null},"macro.dbt.default__get_show_grant_sql":{"name":"default__get_show_grant_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__get_show_grant_sql","macro_sql":"{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.494754,"supported_languages":null},"macro.dbt.get_grant_sql":{"name":"get_grant_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.get_grant_sql","macro_sql":"{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_grant_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.494994,"supported_languages":null},"macro.dbt.default__get_grant_sql":{"name":"default__get_grant_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__get_grant_sql","macro_sql":"\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.495174,"supported_languages":null},"macro.dbt.get_revoke_sql":{"name":"get_revoke_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.get_revoke_sql","macro_sql":"{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_revoke_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4953952,"supported_languages":null},"macro.dbt.default__get_revoke_sql":{"name":"default__get_revoke_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__get_revoke_sql","macro_sql":"\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.495593,"supported_languages":null},"macro.dbt.get_dcl_statement_list":{"name":"get_dcl_statement_list","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.get_dcl_statement_list","macro_sql":"{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_dcl_statement_list"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.495816,"supported_languages":null},"macro.dbt.default__get_dcl_statement_list":{"name":"default__get_dcl_statement_list","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__get_dcl_statement_list","macro_sql":"\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.support_multiple_grantees_per_dcl_statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.496453,"supported_languages":null},"macro.dbt.call_dcl_statements":{"name":"call_dcl_statements","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.call_dcl_statements","macro_sql":"{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__call_dcl_statements"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4966369,"supported_languages":null},"macro.dbt.default__call_dcl_statements":{"name":"default__call_dcl_statements","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__call_dcl_statements","macro_sql":"{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4968698,"supported_languages":null},"macro.dbt.apply_grants":{"name":"apply_grants","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.apply_grants","macro_sql":"{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__apply_grants"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.497094,"supported_languages":null},"macro.dbt.default__apply_grants":{"name":"default__apply_grants","resource_type":"macro","package_name":"dbt","path":"macros/adapters/apply_grants.sql","original_file_path":"macros/adapters/apply_grants.sql","unique_id":"macro.dbt.default__apply_grants","macro_sql":"{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query","macro.dbt.get_show_grant_sql","macro.dbt.get_dcl_statement_list","macro.dbt.call_dcl_statements"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.498195,"supported_languages":null},"macro.dbt.get_show_sql":{"name":"get_show_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/show.sql","original_file_path":"macros/adapters/show.sql","unique_id":"macro.dbt.get_show_sql","macro_sql":"{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_limit_subquery_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.498704,"supported_languages":null},"macro.dbt.get_limit_subquery_sql":{"name":"get_limit_subquery_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/show.sql","original_file_path":"macros/adapters/show.sql","unique_id":"macro.dbt.get_limit_subquery_sql","macro_sql":"{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_limit_subquery_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.4988868,"supported_languages":null},"macro.dbt.default__get_limit_subquery_sql":{"name":"default__get_limit_subquery_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/show.sql","original_file_path":"macros/adapters/show.sql","unique_id":"macro.dbt.default__get_limit_subquery_sql","macro_sql":"{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.499022,"supported_languages":null},"macro.dbt.alter_column_comment":{"name":"alter_column_comment","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.alter_column_comment","macro_sql":"{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__alter_column_comment"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.49966,"supported_languages":null},"macro.dbt.default__alter_column_comment":{"name":"default__alter_column_comment","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.default__alter_column_comment","macro_sql":"{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.49982,"supported_languages":null},"macro.dbt.alter_relation_comment":{"name":"alter_relation_comment","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.alter_relation_comment","macro_sql":"{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__alter_relation_comment"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.50001,"supported_languages":null},"macro.dbt.default__alter_relation_comment":{"name":"default__alter_relation_comment","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.default__alter_relation_comment","macro_sql":"{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5001721,"supported_languages":null},"macro.dbt.persist_docs":{"name":"persist_docs","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.persist_docs","macro_sql":"{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__persist_docs"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.500431,"supported_languages":null},"macro.dbt.default__persist_docs":{"name":"default__persist_docs","resource_type":"macro","package_name":"dbt","path":"macros/adapters/persist_docs.sql","original_file_path":"macros/adapters/persist_docs.sql","unique_id":"macro.dbt.default__persist_docs","macro_sql":"{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query","macro.dbt.alter_relation_comment","macro.dbt.alter_column_comment"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.500962,"supported_languages":null},"macro.dbt.get_catalog_relations":{"name":"get_catalog_relations","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.get_catalog_relations","macro_sql":"{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.default__get_catalog_relations"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.503679,"supported_languages":null},"macro.dbt.default__get_catalog_relations":{"name":"default__get_catalog_relations","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__get_catalog_relations","macro_sql":"{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.503923,"supported_languages":null},"macro.dbt.get_catalog":{"name":"get_catalog","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.get_catalog","macro_sql":"{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_catalog"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.504113,"supported_languages":null},"macro.dbt.default__get_catalog":{"name":"default__get_catalog","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__get_catalog","macro_sql":"{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.504354,"supported_languages":null},"macro.dbt.information_schema_name":{"name":"information_schema_name","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.information_schema_name","macro_sql":"{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__information_schema_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.50453,"supported_languages":null},"macro.dbt.default__information_schema_name":{"name":"default__information_schema_name","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__information_schema_name","macro_sql":"{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5046751,"supported_languages":null},"macro.dbt.list_schemas":{"name":"list_schemas","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.list_schemas","macro_sql":"{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__list_schemas"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.504867,"supported_languages":null},"macro.dbt.default__list_schemas":{"name":"default__list_schemas","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__list_schemas","macro_sql":"{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.information_schema_name","macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5051,"supported_languages":null},"macro.dbt.check_schema_exists":{"name":"check_schema_exists","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.check_schema_exists","macro_sql":"{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__check_schema_exists"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.505294,"supported_languages":null},"macro.dbt.default__check_schema_exists":{"name":"default__check_schema_exists","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__check_schema_exists","macro_sql":"{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.replace","macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.505579,"supported_languages":null},"macro.dbt.list_relations_without_caching":{"name":"list_relations_without_caching","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.list_relations_without_caching","macro_sql":"{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__list_relations_without_caching"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.505755,"supported_languages":null},"macro.dbt.default__list_relations_without_caching":{"name":"default__list_relations_without_caching","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__list_relations_without_caching","macro_sql":"{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.505907,"supported_languages":null},"macro.dbt.get_relations":{"name":"get_relations","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.get_relations","macro_sql":"{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_relations"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5060632,"supported_languages":null},"macro.dbt.default__get_relations":{"name":"default__get_relations","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__get_relations","macro_sql":"{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.50621,"supported_languages":null},"macro.dbt.get_relation_last_modified":{"name":"get_relation_last_modified","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.get_relation_last_modified","macro_sql":"{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_relation_last_modified"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5064042,"supported_languages":null},"macro.dbt.default__get_relation_last_modified":{"name":"default__get_relation_last_modified","resource_type":"macro","package_name":"dbt","path":"macros/adapters/metadata.sql","original_file_path":"macros/adapters/metadata.sql","unique_id":"macro.dbt.default__get_relation_last_modified","macro_sql":"{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.506586,"supported_languages":null},"macro.dbt.get_columns_in_relation":{"name":"get_columns_in_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.get_columns_in_relation","macro_sql":"{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__get_columns_in_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5087419,"supported_languages":null},"macro.dbt.default__get_columns_in_relation":{"name":"default__get_columns_in_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__get_columns_in_relation","macro_sql":"{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5089548,"supported_languages":null},"macro.dbt.sql_convert_columns_in_relation":{"name":"sql_convert_columns_in_relation","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.sql_convert_columns_in_relation","macro_sql":"{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.509249,"supported_languages":null},"macro.dbt.get_empty_subquery_sql":{"name":"get_empty_subquery_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.get_empty_subquery_sql","macro_sql":"{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_empty_subquery_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5094569,"supported_languages":null},"macro.dbt.default__get_empty_subquery_sql":{"name":"default__get_empty_subquery_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__get_empty_subquery_sql","macro_sql":"{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.50965,"supported_languages":null},"macro.dbt.get_empty_schema_sql":{"name":"get_empty_schema_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.get_empty_schema_sql","macro_sql":"{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_empty_schema_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.509824,"supported_languages":null},"macro.dbt.default__get_empty_schema_sql":{"name":"default__get_empty_schema_sql","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__get_empty_schema_sql","macro_sql":"{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5109272,"supported_languages":null},"macro.dbt.get_column_schema_from_query":{"name":"get_column_schema_from_query","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.get_column_schema_from_query","macro_sql":"{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.get_empty_subquery_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5112588,"supported_languages":null},"macro.dbt.get_columns_in_query":{"name":"get_columns_in_query","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.get_columns_in_query","macro_sql":"{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__get_columns_in_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.511435,"supported_languages":null},"macro.dbt.default__get_columns_in_query":{"name":"default__get_columns_in_query","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__get_columns_in_query","macro_sql":"{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.get_empty_subquery_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.511774,"supported_languages":null},"macro.dbt.alter_column_type":{"name":"alter_column_type","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.alter_column_type","macro_sql":"{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__alter_column_type"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.512002,"supported_languages":null},"macro.dbt.default__alter_column_type":{"name":"default__alter_column_type","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__alter_column_type","macro_sql":"{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.512566,"supported_languages":null},"macro.dbt.alter_relation_add_remove_columns":{"name":"alter_relation_add_remove_columns","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.alter_relation_add_remove_columns","macro_sql":"{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.51281,"supported_languages":null},"macro.dbt.default__alter_relation_add_remove_columns":{"name":"default__alter_relation_add_remove_columns","resource_type":"macro","package_name":"dbt","path":"macros/adapters/columns.sql","original_file_path":"macros/adapters/columns.sql","unique_id":"macro.dbt.default__alter_relation_add_remove_columns","macro_sql":"{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.51354,"supported_languages":null},"macro.dbt.get_fixture_sql":{"name":"get_fixture_sql","resource_type":"macro","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","original_file_path":"macros/unit_test_sql/get_fixture_sql.sql","unique_id":"macro.dbt.get_fixture_sql","macro_sql":"{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.load_relation","macro.dbt.safe_cast","macro.dbt.validate_fixture_rows","macro.dbt.format_row"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5168262,"supported_languages":null},"macro.dbt.get_expected_sql":{"name":"get_expected_sql","resource_type":"macro","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","original_file_path":"macros/unit_test_sql/get_fixture_sql.sql","unique_id":"macro.dbt.get_expected_sql","macro_sql":"{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.format_row"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.517499,"supported_languages":null},"macro.dbt.format_row":{"name":"format_row","resource_type":"macro","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","original_file_path":"macros/unit_test_sql/get_fixture_sql.sql","unique_id":"macro.dbt.format_row","macro_sql":"\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.string_literal","macro.dbt.escape_single_quotes","macro.dbt.safe_cast"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.519,"supported_languages":null},"macro.dbt.validate_fixture_rows":{"name":"validate_fixture_rows","resource_type":"macro","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","original_file_path":"macros/unit_test_sql/get_fixture_sql.sql","unique_id":"macro.dbt.validate_fixture_rows","macro_sql":"{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt.default__validate_fixture_rows"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.519228,"supported_languages":null},"macro.dbt.default__validate_fixture_rows":{"name":"default__validate_fixture_rows","resource_type":"macro","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","original_file_path":"macros/unit_test_sql/get_fixture_sql.sql","unique_id":"macro.dbt.default__validate_fixture_rows","macro_sql":"{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5193212,"supported_languages":null},"macro.dbt.resolve_model_name":{"name":"resolve_model_name","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.resolve_model_name","macro_sql":"{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.default__resolve_model_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.520906,"supported_languages":null},"macro.dbt.default__resolve_model_name":{"name":"default__resolve_model_name","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.default__resolve_model_name","macro_sql":"\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.521056,"supported_languages":null},"macro.dbt.build_ref_function":{"name":"build_ref_function","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.build_ref_function","macro_sql":"{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.resolve_model_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5218601,"supported_languages":null},"macro.dbt.build_source_function":{"name":"build_source_function","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.build_source_function","macro_sql":"{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.resolve_model_name"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.522248,"supported_languages":null},"macro.dbt.build_config_dict":{"name":"build_config_dict","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.build_config_dict","macro_sql":"{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.522811,"supported_languages":null},"macro.dbt.py_script_postfix":{"name":"py_script_postfix","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.py_script_postfix","macro_sql":"{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.build_ref_function","macro.dbt.build_source_function","macro.dbt.build_config_dict","macro.dbt.resolve_model_name","macro.dbt.is_incremental","macro.dbt.py_script_comment"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.523267,"supported_languages":null},"macro.dbt.py_script_comment":{"name":"py_script_comment","resource_type":"macro","package_name":"dbt","path":"macros/python_model/python.sql","original_file_path":"macros/python_model/python.sql","unique_id":"macro.dbt.py_script_comment","macro_sql":"{%macro py_script_comment()%}\n{%endmacro%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.523338,"supported_languages":null},"macro.dbt.test_unique":{"name":"test_unique","resource_type":"macro","package_name":"dbt","path":"tests/generic/builtin.sql","original_file_path":"tests/generic/builtin.sql","unique_id":"macro.dbt.test_unique","macro_sql":"{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt.default__test_unique"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.523819,"supported_languages":null},"macro.dbt.test_not_null":{"name":"test_not_null","resource_type":"macro","package_name":"dbt","path":"tests/generic/builtin.sql","original_file_path":"tests/generic/builtin.sql","unique_id":"macro.dbt.test_not_null","macro_sql":"{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt.default__test_not_null"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5240378,"supported_languages":null},"macro.dbt.test_accepted_values":{"name":"test_accepted_values","resource_type":"macro","package_name":"dbt","path":"tests/generic/builtin.sql","original_file_path":"tests/generic/builtin.sql","unique_id":"macro.dbt.test_accepted_values","macro_sql":"{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt.default__test_accepted_values"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5243149,"supported_languages":null},"macro.dbt.test_relationships":{"name":"test_relationships","resource_type":"macro","package_name":"dbt","path":"tests/generic/builtin.sql","original_file_path":"tests/generic/builtin.sql","unique_id":"macro.dbt.test_relationships","macro_sql":"{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt.default__test_relationships"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5245922,"supported_languages":null},"macro.dbt_utils.get_url_host":{"name":"get_url_host","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_host.sql","original_file_path":"macros/web/get_url_host.sql","unique_id":"macro.dbt_utils.get_url_host","macro_sql":"{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_url_host"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5249338,"supported_languages":null},"macro.dbt_utils.default__get_url_host":{"name":"default__get_url_host","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_host.sql","original_file_path":"macros/web/get_url_host.sql","unique_id":"macro.dbt_utils.default__get_url_host","macro_sql":"{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.split_part","macro.dbt.replace","macro.dbt.safe_cast","macro.dbt.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.525389,"supported_languages":null},"macro.dbt_utils.get_url_path":{"name":"get_url_path","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_path.sql","original_file_path":"macros/web/get_url_path.sql","unique_id":"macro.dbt_utils.get_url_path","macro_sql":"{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_url_path"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5258932,"supported_languages":null},"macro.dbt_utils.default__get_url_path":{"name":"default__get_url_path","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_path.sql","original_file_path":"macros/web/get_url_path.sql","unique_id":"macro.dbt_utils.default__get_url_path","macro_sql":"{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.replace","macro.dbt.position","macro.dbt.split_part","macro.dbt.right","macro.dbt.length","macro.dbt.safe_cast","macro.dbt.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.526518,"supported_languages":null},"macro.dbt_utils.get_url_parameter":{"name":"get_url_parameter","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_parameter.sql","original_file_path":"macros/web/get_url_parameter.sql","unique_id":"macro.dbt_utils.get_url_parameter","macro_sql":"{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_url_parameter"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.526818,"supported_languages":null},"macro.dbt_utils.default__get_url_parameter":{"name":"default__get_url_parameter","resource_type":"macro","package_name":"dbt_utils","path":"macros/web/get_url_parameter.sql","original_file_path":"macros/web/get_url_parameter.sql","unique_id":"macro.dbt_utils.default__get_url_parameter","macro_sql":"{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.split_part"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.527123,"supported_languages":null},"macro.dbt_utils.test_fewer_rows_than":{"name":"test_fewer_rows_than","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/fewer_rows_than.sql","original_file_path":"macros/generic_tests/fewer_rows_than.sql","unique_id":"macro.dbt_utils.test_fewer_rows_than","macro_sql":"{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_fewer_rows_than"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.528178,"supported_languages":null},"macro.dbt_utils.default__test_fewer_rows_than":{"name":"default__test_fewer_rows_than","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/fewer_rows_than.sql","original_file_path":"macros/generic_tests/fewer_rows_than.sql","unique_id":"macro.dbt_utils.default__test_fewer_rows_than","macro_sql":"{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.529234,"supported_languages":null},"macro.dbt_utils.test_equal_rowcount":{"name":"test_equal_rowcount","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/equal_rowcount.sql","original_file_path":"macros/generic_tests/equal_rowcount.sql","unique_id":"macro.dbt_utils.test_equal_rowcount","macro_sql":"{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_equal_rowcount"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.530066,"supported_languages":null},"macro.dbt_utils.default__test_equal_rowcount":{"name":"default__test_equal_rowcount","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/equal_rowcount.sql","original_file_path":"macros/generic_tests/equal_rowcount.sql","unique_id":"macro.dbt_utils.default__test_equal_rowcount","macro_sql":"{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.531094,"supported_languages":null},"macro.dbt_utils.test_relationships_where":{"name":"test_relationships_where","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/relationships_where.sql","original_file_path":"macros/generic_tests/relationships_where.sql","unique_id":"macro.dbt_utils.test_relationships_where","macro_sql":"{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_relationships_where"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5317252,"supported_languages":null},"macro.dbt_utils.default__test_relationships_where":{"name":"default__test_relationships_where","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/relationships_where.sql","original_file_path":"macros/generic_tests/relationships_where.sql","unique_id":"macro.dbt_utils.default__test_relationships_where","macro_sql":"{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.532053,"supported_languages":null},"macro.dbt_utils.test_recency":{"name":"test_recency","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/recency.sql","original_file_path":"macros/generic_tests/recency.sql","unique_id":"macro.dbt_utils.test_recency","macro_sql":"{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_recency"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.532743,"supported_languages":null},"macro.dbt_utils.default__test_recency":{"name":"default__test_recency","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/recency.sql","original_file_path":"macros/generic_tests/recency.sql","unique_id":"macro.dbt_utils.default__test_recency","macro_sql":"{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.dateadd","macro.dbt.current_timestamp","macro.dbt.type_timestamp"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.533555,"supported_languages":null},"macro.dbt_utils.test_not_constant":{"name":"test_not_constant","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_constant.sql","original_file_path":"macros/generic_tests/not_constant.sql","unique_id":"macro.dbt_utils.test_not_constant","macro_sql":"{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_not_constant"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.533979,"supported_languages":null},"macro.dbt_utils.default__test_not_constant":{"name":"default__test_not_constant","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_constant.sql","original_file_path":"macros/generic_tests/not_constant.sql","unique_id":"macro.dbt_utils.default__test_not_constant","macro_sql":"{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.534419,"supported_languages":null},"macro.dbt_utils.test_accepted_range":{"name":"test_accepted_range","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/accepted_range.sql","original_file_path":"macros/generic_tests/accepted_range.sql","unique_id":"macro.dbt_utils.test_accepted_range","macro_sql":"{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_accepted_range"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.53499,"supported_languages":null},"macro.dbt_utils.default__test_accepted_range":{"name":"default__test_accepted_range","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/accepted_range.sql","original_file_path":"macros/generic_tests/accepted_range.sql","unique_id":"macro.dbt_utils.default__test_accepted_range","macro_sql":"{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5354502,"supported_languages":null},"macro.dbt_utils.test_not_accepted_values":{"name":"test_not_accepted_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_accepted_values.sql","original_file_path":"macros/generic_tests/not_accepted_values.sql","unique_id":"macro.dbt_utils.test_not_accepted_values","macro_sql":"{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_not_accepted_values"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.535979,"supported_languages":null},"macro.dbt_utils.default__test_not_accepted_values":{"name":"default__test_not_accepted_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_accepted_values.sql","original_file_path":"macros/generic_tests/not_accepted_values.sql","unique_id":"macro.dbt_utils.default__test_not_accepted_values","macro_sql":"{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.536337,"supported_languages":null},"macro.dbt_utils.test_at_least_one":{"name":"test_at_least_one","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/at_least_one.sql","original_file_path":"macros/generic_tests/at_least_one.sql","unique_id":"macro.dbt_utils.test_at_least_one","macro_sql":"{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_at_least_one"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.536958,"supported_languages":null},"macro.dbt_utils.default__test_at_least_one":{"name":"default__test_at_least_one","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/at_least_one.sql","original_file_path":"macros/generic_tests/at_least_one.sql","unique_id":"macro.dbt_utils.default__test_at_least_one","macro_sql":"{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.537698,"supported_languages":null},"macro.dbt_utils.test_unique_combination_of_columns":{"name":"test_unique_combination_of_columns","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/unique_combination_of_columns.sql","original_file_path":"macros/generic_tests/unique_combination_of_columns.sql","unique_id":"macro.dbt_utils.test_unique_combination_of_columns","macro_sql":"{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_unique_combination_of_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.538342,"supported_languages":null},"macro.dbt_utils.default__test_unique_combination_of_columns":{"name":"default__test_unique_combination_of_columns","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/unique_combination_of_columns.sql","original_file_path":"macros/generic_tests/unique_combination_of_columns.sql","unique_id":"macro.dbt_utils.default__test_unique_combination_of_columns","macro_sql":"{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.539042,"supported_languages":null},"macro.dbt_utils.test_cardinality_equality":{"name":"test_cardinality_equality","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/cardinality_equality.sql","original_file_path":"macros/generic_tests/cardinality_equality.sql","unique_id":"macro.dbt_utils.test_cardinality_equality","macro_sql":"{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_cardinality_equality"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.539563,"supported_languages":null},"macro.dbt_utils.default__test_cardinality_equality":{"name":"default__test_cardinality_equality","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/cardinality_equality.sql","original_file_path":"macros/generic_tests/cardinality_equality.sql","unique_id":"macro.dbt_utils.default__test_cardinality_equality","macro_sql":"{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.except"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5398889,"supported_languages":null},"macro.dbt_utils.test_expression_is_true":{"name":"test_expression_is_true","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/expression_is_true.sql","original_file_path":"macros/generic_tests/expression_is_true.sql","unique_id":"macro.dbt_utils.test_expression_is_true","macro_sql":"{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_expression_is_true"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.540266,"supported_languages":null},"macro.dbt_utils.default__test_expression_is_true":{"name":"default__test_expression_is_true","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/expression_is_true.sql","original_file_path":"macros/generic_tests/expression_is_true.sql","unique_id":"macro.dbt_utils.default__test_expression_is_true","macro_sql":"{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.should_store_failures"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5406091,"supported_languages":null},"macro.dbt_utils.test_not_null_proportion":{"name":"test_not_null_proportion","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_null_proportion.sql","original_file_path":"macros/generic_tests/not_null_proportion.sql","unique_id":"macro.dbt_utils.test_not_null_proportion","macro_sql":"{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__test_not_null_proportion"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.541218,"supported_languages":null},"macro.dbt_utils.default__test_not_null_proportion":{"name":"default__test_not_null_proportion","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_null_proportion.sql","original_file_path":"macros/generic_tests/not_null_proportion.sql","unique_id":"macro.dbt_utils.default__test_not_null_proportion","macro_sql":"{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.541995,"supported_languages":null},"macro.dbt_utils.test_sequential_values":{"name":"test_sequential_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/sequential_values.sql","original_file_path":"macros/generic_tests/sequential_values.sql","unique_id":"macro.dbt_utils.test_sequential_values","macro_sql":"{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_sequential_values"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.542861,"supported_languages":null},"macro.dbt_utils.default__test_sequential_values":{"name":"default__test_sequential_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/sequential_values.sql","original_file_path":"macros/generic_tests/sequential_values.sql","unique_id":"macro.dbt_utils.default__test_sequential_values","macro_sql":"{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.slugify","macro.dbt.type_timestamp","macro.dbt.dateadd"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5437398,"supported_languages":null},"macro.dbt_utils.test_equality":{"name":"test_equality","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/equality.sql","original_file_path":"macros/generic_tests/equality.sql","unique_id":"macro.dbt_utils.test_equality","macro_sql":"{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_equality"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.544428,"supported_languages":null},"macro.dbt_utils.default__test_equality":{"name":"default__test_equality","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/equality.sql","original_file_path":"macros/generic_tests/equality.sql","unique_id":"macro.dbt_utils.default__test_equality","macro_sql":"{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema — this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral","macro.dbt.except"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.545255,"supported_languages":null},"macro.dbt_utils.test_not_empty_string":{"name":"test_not_empty_string","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_empty_string.sql","original_file_path":"macros/generic_tests/not_empty_string.sql","unique_id":"macro.dbt_utils.test_not_empty_string","macro_sql":"{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_not_empty_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.545753,"supported_languages":null},"macro.dbt_utils.default__test_not_empty_string":{"name":"default__test_not_empty_string","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/not_empty_string.sql","original_file_path":"macros/generic_tests/not_empty_string.sql","unique_id":"macro.dbt_utils.default__test_not_empty_string","macro_sql":"{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.546035,"supported_languages":null},"macro.dbt_utils.test_mutually_exclusive_ranges":{"name":"test_mutually_exclusive_ranges","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/mutually_exclusive_ranges.sql","original_file_path":"macros/generic_tests/mutually_exclusive_ranges.sql","unique_id":"macro.dbt_utils.test_mutually_exclusive_ranges","macro_sql":"{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}","depends_on":{"macros":["macro.dbt_utils.default__test_mutually_exclusive_ranges"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.549453,"supported_languages":null},"macro.dbt_utils.default__test_mutually_exclusive_ranges":{"name":"default__test_mutually_exclusive_ranges","resource_type":"macro","package_name":"dbt_utils","path":"macros/generic_tests/mutually_exclusive_ranges.sql","original_file_path":"macros/generic_tests/mutually_exclusive_ranges.sql","unique_id":"macro.dbt_utils.default__test_mutually_exclusive_ranges","macro_sql":"{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.550976,"supported_languages":null},"macro.dbt_utils.pretty_log_format":{"name":"pretty_log_format","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/pretty_log_format.sql","original_file_path":"macros/jinja_helpers/pretty_log_format.sql","unique_id":"macro.dbt_utils.pretty_log_format","macro_sql":"{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__pretty_log_format"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5512378,"supported_languages":null},"macro.dbt_utils.default__pretty_log_format":{"name":"default__pretty_log_format","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/pretty_log_format.sql","original_file_path":"macros/jinja_helpers/pretty_log_format.sql","unique_id":"macro.dbt_utils.default__pretty_log_format","macro_sql":"{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.pretty_time"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5513978,"supported_languages":null},"macro.dbt_utils._is_relation":{"name":"_is_relation","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/_is_relation.sql","original_file_path":"macros/jinja_helpers/_is_relation.sql","unique_id":"macro.dbt_utils._is_relation","macro_sql":"{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5518131,"supported_languages":null},"macro.dbt_utils.pretty_time":{"name":"pretty_time","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/pretty_time.sql","original_file_path":"macros/jinja_helpers/pretty_time.sql","unique_id":"macro.dbt_utils.pretty_time","macro_sql":"{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__pretty_time"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.552072,"supported_languages":null},"macro.dbt_utils.default__pretty_time":{"name":"default__pretty_time","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/pretty_time.sql","original_file_path":"macros/jinja_helpers/pretty_time.sql","unique_id":"macro.dbt_utils.default__pretty_time","macro_sql":"{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5522618,"supported_languages":null},"macro.dbt_utils.log_info":{"name":"log_info","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/log_info.sql","original_file_path":"macros/jinja_helpers/log_info.sql","unique_id":"macro.dbt_utils.log_info","macro_sql":"{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__log_info"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.552502,"supported_languages":null},"macro.dbt_utils.default__log_info":{"name":"default__log_info","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/log_info.sql","original_file_path":"macros/jinja_helpers/log_info.sql","unique_id":"macro.dbt_utils.default__log_info","macro_sql":"{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.pretty_log_format"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5526679,"supported_languages":null},"macro.dbt_utils.slugify":{"name":"slugify","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/slugify.sql","original_file_path":"macros/jinja_helpers/slugify.sql","unique_id":"macro.dbt_utils.slugify","macro_sql":"{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5532439,"supported_languages":null},"macro.dbt_utils._is_ephemeral":{"name":"_is_ephemeral","resource_type":"macro","package_name":"dbt_utils","path":"macros/jinja_helpers/_is_ephemeral.sql","original_file_path":"macros/jinja_helpers/_is_ephemeral.sql","unique_id":"macro.dbt_utils._is_ephemeral","macro_sql":"{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.554044,"supported_languages":null},"macro.dbt_utils.get_intervals_between":{"name":"get_intervals_between","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/date_spine.sql","original_file_path":"macros/sql/date_spine.sql","unique_id":"macro.dbt_utils.get_intervals_between","macro_sql":"{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_intervals_between"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.554721,"supported_languages":null},"macro.dbt_utils.default__get_intervals_between":{"name":"default__get_intervals_between","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/date_spine.sql","original_file_path":"macros/sql/date_spine.sql","unique_id":"macro.dbt_utils.default__get_intervals_between","macro_sql":"{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt.datediff"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.555295,"supported_languages":null},"macro.dbt_utils.date_spine":{"name":"date_spine","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/date_spine.sql","original_file_path":"macros/sql/date_spine.sql","unique_id":"macro.dbt_utils.date_spine","macro_sql":"{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__date_spine"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5555148,"supported_languages":null},"macro.dbt_utils.default__date_spine":{"name":"default__date_spine","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/date_spine.sql","original_file_path":"macros/sql/date_spine.sql","unique_id":"macro.dbt_utils.default__date_spine","macro_sql":"{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.generate_series","macro.dbt_utils.get_intervals_between","macro.dbt.dateadd"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.555855,"supported_languages":null},"macro.dbt_utils.safe_subtract":{"name":"safe_subtract","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_subtract.sql","original_file_path":"macros/sql/safe_subtract.sql","unique_id":"macro.dbt_utils.safe_subtract","macro_sql":"{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__safe_subtract"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5562172,"supported_languages":null},"macro.dbt_utils.default__safe_subtract":{"name":"default__safe_subtract","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_subtract.sql","original_file_path":"macros/sql/safe_subtract.sql","unique_id":"macro.dbt_utils.default__safe_subtract","macro_sql":"\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.556731,"supported_languages":null},"macro.dbt_utils.nullcheck_table":{"name":"nullcheck_table","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/nullcheck_table.sql","original_file_path":"macros/sql/nullcheck_table.sql","unique_id":"macro.dbt_utils.nullcheck_table","macro_sql":"{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__nullcheck_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5570261,"supported_languages":null},"macro.dbt_utils.default__nullcheck_table":{"name":"default__nullcheck_table","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/nullcheck_table.sql","original_file_path":"macros/sql/nullcheck_table.sql","unique_id":"macro.dbt_utils.default__nullcheck_table","macro_sql":"{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral","macro.dbt_utils.nullcheck"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5573492,"supported_languages":null},"macro.dbt_utils.get_relations_by_pattern":{"name":"get_relations_by_pattern","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_relations_by_pattern.sql","original_file_path":"macros/sql/get_relations_by_pattern.sql","unique_id":"macro.dbt_utils.get_relations_by_pattern","macro_sql":"{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_relations_by_pattern"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.558012,"supported_languages":null},"macro.dbt_utils.default__get_relations_by_pattern":{"name":"default__get_relations_by_pattern","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_relations_by_pattern.sql","original_file_path":"macros/sql/get_relations_by_pattern.sql","unique_id":"macro.dbt_utils.default__get_relations_by_pattern","macro_sql":"{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt_utils.get_tables_by_pattern_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.558887,"supported_languages":null},"macro.dbt_utils.get_powers_of_two":{"name":"get_powers_of_two","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_series.sql","original_file_path":"macros/sql/generate_series.sql","unique_id":"macro.dbt_utils.get_powers_of_two","macro_sql":"{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_powers_of_two"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.559691,"supported_languages":null},"macro.dbt_utils.default__get_powers_of_two":{"name":"default__get_powers_of_two","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_series.sql","original_file_path":"macros/sql/generate_series.sql","unique_id":"macro.dbt_utils.default__get_powers_of_two","macro_sql":"{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.56009,"supported_languages":null},"macro.dbt_utils.generate_series":{"name":"generate_series","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_series.sql","original_file_path":"macros/sql/generate_series.sql","unique_id":"macro.dbt_utils.generate_series","macro_sql":"{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__generate_series"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.560269,"supported_languages":null},"macro.dbt_utils.default__generate_series":{"name":"default__generate_series","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_series.sql","original_file_path":"macros/sql/generate_series.sql","unique_id":"macro.dbt_utils.default__generate_series","macro_sql":"{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.get_powers_of_two"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.560763,"supported_languages":null},"macro.dbt_utils.get_relations_by_prefix":{"name":"get_relations_by_prefix","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_relations_by_prefix.sql","original_file_path":"macros/sql/get_relations_by_prefix.sql","unique_id":"macro.dbt_utils.get_relations_by_prefix","macro_sql":"{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_relations_by_prefix"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.561431,"supported_languages":null},"macro.dbt_utils.default__get_relations_by_prefix":{"name":"default__get_relations_by_prefix","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_relations_by_prefix.sql","original_file_path":"macros/sql/get_relations_by_prefix.sql","unique_id":"macro.dbt_utils.default__get_relations_by_prefix","macro_sql":"{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement","macro.dbt_utils.get_tables_by_prefix_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.562233,"supported_languages":null},"macro.dbt_utils.get_tables_by_prefix_sql":{"name":"get_tables_by_prefix_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_prefix_sql.sql","original_file_path":"macros/sql/get_tables_by_prefix_sql.sql","unique_id":"macro.dbt_utils.get_tables_by_prefix_sql","macro_sql":"{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_tables_by_prefix_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.562619,"supported_languages":null},"macro.dbt_utils.default__get_tables_by_prefix_sql":{"name":"default__get_tables_by_prefix_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_prefix_sql.sql","original_file_path":"macros/sql/get_tables_by_prefix_sql.sql","unique_id":"macro.dbt_utils.default__get_tables_by_prefix_sql","macro_sql":"{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.get_tables_by_pattern_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5628889,"supported_languages":null},"macro.dbt_utils.star":{"name":"star","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/star.sql","original_file_path":"macros/sql/star.sql","unique_id":"macro.dbt_utils.star","macro_sql":"{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__star"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.564115,"supported_languages":null},"macro.dbt_utils.default__star":{"name":"default__star","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/star.sql","original_file_path":"macros/sql/star.sql","unique_id":"macro.dbt_utils.default__star","macro_sql":"{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral","macro.dbt_utils.get_filtered_columns_in_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5654988,"supported_languages":null},"macro.dbt_utils.unpivot":{"name":"unpivot","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/unpivot.sql","original_file_path":"macros/sql/unpivot.sql","unique_id":"macro.dbt_utils.unpivot","macro_sql":"{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__unpivot"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.566798,"supported_languages":null},"macro.dbt_utils.default__unpivot":{"name":"default__unpivot","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/unpivot.sql","original_file_path":"macros/sql/unpivot.sql","unique_id":"macro.dbt_utils.default__unpivot","macro_sql":"{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral","macro.dbt.type_string","macro.dbt.cast_bool_to_text"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.568309,"supported_languages":null},"macro.dbt_utils.safe_divide":{"name":"safe_divide","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_divide.sql","original_file_path":"macros/sql/safe_divide.sql","unique_id":"macro.dbt_utils.safe_divide","macro_sql":"{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__safe_divide"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5685902,"supported_languages":null},"macro.dbt_utils.default__safe_divide":{"name":"default__safe_divide","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_divide.sql","original_file_path":"macros/sql/safe_divide.sql","unique_id":"macro.dbt_utils.default__safe_divide","macro_sql":"{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5687191,"supported_languages":null},"macro.dbt_utils.union_relations":{"name":"union_relations","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/union.sql","original_file_path":"macros/sql/union.sql","unique_id":"macro.dbt_utils.union_relations","macro_sql":"{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__union_relations"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.571949,"supported_languages":null},"macro.dbt_utils.default__union_relations":{"name":"default__union_relations","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/union.sql","original_file_path":"macros/sql/union.sql","unique_id":"macro.dbt_utils.default__union_relations","macro_sql":"\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral","macro.dbt.string_literal","macro.dbt.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.575352,"supported_languages":null},"macro.dbt_utils.group_by":{"name":"group_by","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/groupby.sql","original_file_path":"macros/sql/groupby.sql","unique_id":"macro.dbt_utils.group_by","macro_sql":"{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__group_by"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5756428,"supported_languages":null},"macro.dbt_utils.default__group_by":{"name":"default__group_by","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/groupby.sql","original_file_path":"macros/sql/groupby.sql","unique_id":"macro.dbt_utils.default__group_by","macro_sql":"\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.57588,"supported_languages":null},"macro.dbt_utils.deduplicate":{"name":"deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.deduplicate","macro_sql":"{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__deduplicate"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.576596,"supported_languages":null},"macro.dbt_utils.default__deduplicate":{"name":"default__deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.default__deduplicate","macro_sql":"\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.576802,"supported_languages":null},"macro.dbt_utils.redshift__deduplicate":{"name":"redshift__deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.redshift__deduplicate","macro_sql":"{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__deduplicate"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.576994,"supported_languages":null},"macro.dbt_utils.postgres__deduplicate":{"name":"postgres__deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.postgres__deduplicate","macro_sql":"\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.577172,"supported_languages":null},"macro.dbt_utils.snowflake__deduplicate":{"name":"snowflake__deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.snowflake__deduplicate","macro_sql":"\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.577327,"supported_languages":null},"macro.dbt_utils.bigquery__deduplicate":{"name":"bigquery__deduplicate","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/deduplicate.sql","original_file_path":"macros/sql/deduplicate.sql","unique_id":"macro.dbt_utils.bigquery__deduplicate","macro_sql":"\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5774899,"supported_languages":null},"macro.dbt_utils.surrogate_key":{"name":"surrogate_key","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/surrogate_key.sql","original_file_path":"macros/sql/surrogate_key.sql","unique_id":"macro.dbt_utils.surrogate_key","macro_sql":"{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__surrogate_key"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5778508,"supported_languages":null},"macro.dbt_utils.default__surrogate_key":{"name":"default__surrogate_key","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/surrogate_key.sql","original_file_path":"macros/sql/surrogate_key.sql","unique_id":"macro.dbt_utils.default__surrogate_key","macro_sql":"\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.578069,"supported_languages":null},"macro.dbt_utils.safe_add":{"name":"safe_add","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_add.sql","original_file_path":"macros/sql/safe_add.sql","unique_id":"macro.dbt_utils.safe_add","macro_sql":"{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__safe_add"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.578424,"supported_languages":null},"macro.dbt_utils.default__safe_add":{"name":"default__safe_add","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/safe_add.sql","original_file_path":"macros/sql/safe_add.sql","unique_id":"macro.dbt_utils.default__safe_add","macro_sql":"\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.578926,"supported_languages":null},"macro.dbt_utils.nullcheck":{"name":"nullcheck","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/nullcheck.sql","original_file_path":"macros/sql/nullcheck.sql","unique_id":"macro.dbt_utils.nullcheck","macro_sql":"{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__nullcheck"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5792482,"supported_languages":null},"macro.dbt_utils.default__nullcheck":{"name":"default__nullcheck","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/nullcheck.sql","original_file_path":"macros/sql/nullcheck.sql","unique_id":"macro.dbt_utils.default__nullcheck","macro_sql":"{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.57956,"supported_languages":null},"macro.dbt_utils.get_tables_by_pattern_sql":{"name":"get_tables_by_pattern_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_pattern_sql.sql","original_file_path":"macros/sql/get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils.get_tables_by_pattern_sql","macro_sql":"{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_tables_by_pattern_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.581255,"supported_languages":null},"macro.dbt_utils.default__get_tables_by_pattern_sql":{"name":"default__get_tables_by_pattern_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_pattern_sql.sql","original_file_path":"macros/sql/get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils.default__get_tables_by_pattern_sql","macro_sql":"{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.get_table_types_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5816011,"supported_languages":null},"macro.dbt_utils.bigquery__get_tables_by_pattern_sql":{"name":"bigquery__get_tables_by_pattern_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_pattern_sql.sql","original_file_path":"macros/sql/get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils.bigquery__get_tables_by_pattern_sql","macro_sql":"{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils._bigquery__get_matching_schemata","macro.dbt_utils.get_table_types_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.582342,"supported_languages":null},"macro.dbt_utils._bigquery__get_matching_schemata":{"name":"_bigquery__get_matching_schemata","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_tables_by_pattern_sql.sql","original_file_path":"macros/sql/get_tables_by_pattern_sql.sql","unique_id":"macro.dbt_utils._bigquery__get_matching_schemata","macro_sql":"{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.582826,"supported_languages":null},"macro.dbt_utils.get_column_values":{"name":"get_column_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_column_values.sql","original_file_path":"macros/sql/get_column_values.sql","unique_id":"macro.dbt_utils.get_column_values","macro_sql":"{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_column_values"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.583929,"supported_languages":null},"macro.dbt_utils.default__get_column_values":{"name":"default__get_column_values","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_column_values.sql","original_file_path":"macros/sql/get_column_values.sql","unique_id":"macro.dbt_utils.default__get_column_values","macro_sql":"{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_ephemeral","macro.dbt.load_relation","macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.585352,"supported_languages":null},"macro.dbt_utils.pivot":{"name":"pivot","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/pivot.sql","original_file_path":"macros/sql/pivot.sql","unique_id":"macro.dbt_utils.pivot","macro_sql":"{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__pivot"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.586378,"supported_languages":null},"macro.dbt_utils.default__pivot":{"name":"default__pivot","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/pivot.sql","original_file_path":"macros/sql/pivot.sql","unique_id":"macro.dbt_utils.default__pivot","macro_sql":"{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}","depends_on":{"macros":["macro.dbt.escape_single_quotes","macro.dbt_utils.slugify"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5871758,"supported_languages":null},"macro.dbt_utils.get_filtered_columns_in_relation":{"name":"get_filtered_columns_in_relation","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_filtered_columns_in_relation.sql","original_file_path":"macros/sql/get_filtered_columns_in_relation.sql","unique_id":"macro.dbt_utils.get_filtered_columns_in_relation","macro_sql":"{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_filtered_columns_in_relation"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.587626,"supported_languages":null},"macro.dbt_utils.default__get_filtered_columns_in_relation":{"name":"default__get_filtered_columns_in_relation","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_filtered_columns_in_relation.sql","original_file_path":"macros/sql/get_filtered_columns_in_relation.sql","unique_id":"macro.dbt_utils.default__get_filtered_columns_in_relation","macro_sql":"{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils._is_relation","macro.dbt_utils._is_ephemeral"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.588326,"supported_languages":null},"macro.dbt_utils.width_bucket":{"name":"width_bucket","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/width_bucket.sql","original_file_path":"macros/sql/width_bucket.sql","unique_id":"macro.dbt_utils.width_bucket","macro_sql":"{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__width_bucket"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.589082,"supported_languages":null},"macro.dbt_utils.default__width_bucket":{"name":"default__width_bucket","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/width_bucket.sql","original_file_path":"macros/sql/width_bucket.sql","unique_id":"macro.dbt_utils.default__width_bucket","macro_sql":"{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}","depends_on":{"macros":["macro.dbt.safe_cast","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.589522,"supported_languages":null},"macro.dbt_utils.snowflake__width_bucket":{"name":"snowflake__width_bucket","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/width_bucket.sql","original_file_path":"macros/sql/width_bucket.sql","unique_id":"macro.dbt_utils.snowflake__width_bucket","macro_sql":"{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.589704,"supported_languages":null},"macro.dbt_utils.get_query_results_as_dict":{"name":"get_query_results_as_dict","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_query_results_as_dict.sql","original_file_path":"macros/sql/get_query_results_as_dict.sql","unique_id":"macro.dbt_utils.get_query_results_as_dict","macro_sql":"{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_query_results_as_dict"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.590073,"supported_languages":null},"macro.dbt_utils.default__get_query_results_as_dict":{"name":"default__get_query_results_as_dict","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_query_results_as_dict.sql","original_file_path":"macros/sql/get_query_results_as_dict.sql","unique_id":"macro.dbt_utils.default__get_query_results_as_dict","macro_sql":"{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.590635,"supported_languages":null},"macro.dbt_utils.generate_surrogate_key":{"name":"generate_surrogate_key","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_surrogate_key.sql","original_file_path":"macros/sql/generate_surrogate_key.sql","unique_id":"macro.dbt_utils.generate_surrogate_key","macro_sql":"{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__generate_surrogate_key"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.591072,"supported_languages":null},"macro.dbt_utils.default__generate_surrogate_key":{"name":"default__generate_surrogate_key","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/generate_surrogate_key.sql","original_file_path":"macros/sql/generate_surrogate_key.sql","unique_id":"macro.dbt_utils.default__generate_surrogate_key","macro_sql":"\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt.type_string","macro.dbt.hash","macro.dbt.concat"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.591677,"supported_languages":null},"macro.dbt_utils.get_table_types_sql":{"name":"get_table_types_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_table_types_sql.sql","original_file_path":"macros/sql/get_table_types_sql.sql","unique_id":"macro.dbt_utils.get_table_types_sql","macro_sql":"{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_utils.default__get_table_types_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.592214,"supported_languages":null},"macro.dbt_utils.default__get_table_types_sql":{"name":"default__get_table_types_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_table_types_sql.sql","original_file_path":"macros/sql/get_table_types_sql.sql","unique_id":"macro.dbt_utils.default__get_table_types_sql","macro_sql":"{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.592362,"supported_languages":null},"macro.dbt_utils.postgres__get_table_types_sql":{"name":"postgres__get_table_types_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_table_types_sql.sql","original_file_path":"macros/sql/get_table_types_sql.sql","unique_id":"macro.dbt_utils.postgres__get_table_types_sql","macro_sql":"{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.592499,"supported_languages":null},"macro.dbt_utils.databricks__get_table_types_sql":{"name":"databricks__get_table_types_sql","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_table_types_sql.sql","original_file_path":"macros/sql/get_table_types_sql.sql","unique_id":"macro.dbt_utils.databricks__get_table_types_sql","macro_sql":"{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.592632,"supported_languages":null},"macro.dbt_utils.get_single_value":{"name":"get_single_value","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_single_value.sql","original_file_path":"macros/sql/get_single_value.sql","unique_id":"macro.dbt_utils.get_single_value","macro_sql":"{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__get_single_value"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.593183,"supported_languages":null},"macro.dbt_utils.default__get_single_value":{"name":"default__get_single_value","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/get_single_value.sql","original_file_path":"macros/sql/get_single_value.sql","unique_id":"macro.dbt_utils.default__get_single_value","macro_sql":"{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.statement"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.593961,"supported_languages":null},"macro.dbt_utils.degrees_to_radians":{"name":"degrees_to_radians","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/haversine_distance.sql","original_file_path":"macros/sql/haversine_distance.sql","unique_id":"macro.dbt_utils.degrees_to_radians","macro_sql":"{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.594989,"supported_languages":null},"macro.dbt_utils.haversine_distance":{"name":"haversine_distance","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/haversine_distance.sql","original_file_path":"macros/sql/haversine_distance.sql","unique_id":"macro.dbt_utils.haversine_distance","macro_sql":"{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.default__haversine_distance"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.595264,"supported_languages":null},"macro.dbt_utils.default__haversine_distance":{"name":"default__haversine_distance","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/haversine_distance.sql","original_file_path":"macros/sql/haversine_distance.sql","unique_id":"macro.dbt_utils.default__haversine_distance","macro_sql":"{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5958269,"supported_languages":null},"macro.dbt_utils.bigquery__haversine_distance":{"name":"bigquery__haversine_distance","resource_type":"macro","package_name":"dbt_utils","path":"macros/sql/haversine_distance.sql","original_file_path":"macros/sql/haversine_distance.sql","unique_id":"macro.dbt_utils.bigquery__haversine_distance","macro_sql":"{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}","depends_on":{"macros":["macro.dbt_utils.degrees_to_radians"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.59659,"supported_languages":null},"macro.audit_helper.compare_row_counts":{"name":"compare_row_counts","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_row_counts.sql","original_file_path":"macros/compare_row_counts.sql","unique_id":"macro.audit_helper.compare_row_counts","macro_sql":"{% macro compare_row_counts(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_row_counts', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.audit_helper.default__compare_row_counts"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5969632,"supported_languages":null},"macro.audit_helper.default__compare_row_counts":{"name":"default__compare_row_counts","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_row_counts.sql","original_file_path":"macros/compare_row_counts.sql","unique_id":"macro.audit_helper.default__compare_row_counts","macro_sql":"{% macro default__compare_row_counts(a_relation, b_relation) %}\n\n        select\n            '{{ a_relation }}' as relation_name,\n            count(*) as total_records\n        from {{ a_relation }}\n\n        union all\n\n        select\n            '{{ b_relation }}' as relation_name,\n            count(*) as total_records\n        from {{ b_relation }}\n  \n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.597137,"supported_languages":null},"macro.audit_helper.compare_relations":{"name":"compare_relations","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relations.sql","original_file_path":"macros/compare_relations.sql","unique_id":"macro.audit_helper.compare_relations","macro_sql":"{% macro compare_relations(a_relation, b_relation, exclude_columns=[], primary_key=None, summarize=true, limit=None) %}\n\n{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n{% set column_selection %}\n\n  {% for column_name in column_names %} \n    {{ adapter.quote(column_name) }} \n    {% if not loop.last %}\n      , \n    {% endif %} \n  {% endfor %}\n\n{% endset %}\n\n{% set a_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ a_relation }}\n{% endset %}\n\n{% set b_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ b_relation }}\n{% endset %}\n\n{{ audit_helper.compare_queries(a_query, b_query, primary_key, summarize, limit) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.get_filtered_columns_in_relation","macro.audit_helper.compare_queries"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.5980852,"supported_languages":null},"macro.audit_helper.compare_all_columns":{"name":"compare_all_columns","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_all_columns.sql","original_file_path":"macros/compare_all_columns.sql","unique_id":"macro.audit_helper.compare_all_columns","macro_sql":"{% macro compare_all_columns( a_relation, b_relation, primary_key,  exclude_columns=[],summarize=true ) -%}\n  {{ return(adapter.dispatch('compare_all_columns', 'audit_helper')( a_relation, b_relation, primary_key, exclude_columns, summarize )) }}\n{%- endmacro %}","depends_on":{"macros":["macro.audit_helper.default__compare_all_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.599499,"supported_languages":null},"macro.audit_helper.default__compare_all_columns":{"name":"default__compare_all_columns","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_all_columns.sql","original_file_path":"macros/compare_all_columns.sql","unique_id":"macro.audit_helper.default__compare_all_columns","macro_sql":"{% macro default__compare_all_columns( a_relation, b_relation, primary_key, exclude_columns=[], summarize=true ) -%}\n\n  {% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n  {# We explictly select the primary_key and rename to support any sql as the primary_key -\n  a column or concatenated columns. this assumes that a_relation and b_relation do not already \n  have a field named dbt_audit_helper_pk #}\n\n  {% set a_query %}      \n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ a_relation }}\n  {% endset %}\n\n  {% set b_query %}\n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ b_relation }}\n  {% endset %}\n\n  {% for column_name in column_names %}\n\n    {% set audit_query = audit_helper.compare_column_values_verbose(\n      a_query=a_query,\n      b_query=b_query,\n      primary_key=\"dbt_audit_helper_pk\",\n      column_to_compare=column_name\n    ) %}\n\n    /*  Create a query combining results from all columns so that the user, or the \n    test suite, can examine all at once.\n    */\n    \n    {% if loop.first %}\n\n    /*  Create a CTE that wraps all the unioned subqueries that are created\n        in this for loop\n    */\n      with main as ( \n\n    {% endif %}\n\n    /*  There will be one audit_query subquery for each column\n    */\n    ( {{ audit_query }} )\n\n    {% if not loop.last %}\n\n      union all\n\n    {% else %}\n\n    ), \n    \n      {%- if summarize %}\n\n        final as (\n          select\n            upper(column_name) as column_name,\n            sum(case when perfect_match then 1 else 0 end) as perfect_match,\n            sum(case when null_in_a then 1 else 0 end) as null_in_a,\n            sum(case when null_in_b then 1 else 0 end) as null_in_b,\n            sum(case when missing_from_a then 1 else 0 end) as missing_from_a,\n            sum(case when missing_from_b then 1 else 0 end) as missing_from_b,\n            sum(case when conflicting_values then 1 else 0 end) as conflicting_values\n          from main\n          group by 1\n          order by column_name\n        )\n\n      {%- else %}\n\n        final as (\n          select\n            primary_key,           \n            upper(column_name) as column_name,\n            perfect_match,\n            null_in_a,\n            null_in_b,\n            missing_from_a,\n            missing_from_b,\n            conflicting_values\n          from main    \n          order by primary_key\n        )\n\n      {%- endif %}\n\n      select * from final\n    \n    {% endif %}\n\n  {% endfor %}\n    \n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.get_filtered_columns_in_relation","macro.audit_helper.compare_column_values_verbose"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.600379,"supported_languages":null},"macro.audit_helper.compare_which_columns_differ":{"name":"compare_which_columns_differ","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_which_columns_differ.sql","original_file_path":"macros/compare_which_columns_differ.sql","unique_id":"macro.audit_helper.compare_which_columns_differ","macro_sql":"{% macro compare_which_columns_differ(a_relation, b_relation, primary_key, exclude_columns=[]) %}\n    {{ return(adapter.dispatch('compare_which_columns_differ', 'audit_helper')(a_relation, b_relation, primary_key, exclude_columns)) }}\n{% endmacro %}","depends_on":{"macros":["macro.audit_helper.default__compare_which_columns_differ"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6013591,"supported_languages":null},"macro.audit_helper.default__compare_which_columns_differ":{"name":"default__compare_which_columns_differ","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_which_columns_differ.sql","original_file_path":"macros/compare_which_columns_differ.sql","unique_id":"macro.audit_helper.default__compare_which_columns_differ","macro_sql":"{% macro default__compare_which_columns_differ(a_relation, b_relation, primary_key, exclude_columns=[]) %}  \n\n{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\nwith bool_or as (\n\n    select \n        true as anchor\n        {% for column in column_names %}\n            {% set column_name = adapter.quote(column) %}\n            {% set compare_statement %}\n                ((a.{{ column_name }} != b.{{ column_name }})\n                or (a.{{ column_name }} is null and b.{{ column_name }} is not null)\n                or (a.{{ column_name }} is not null and b.{{ column_name }} is null))\n            {% endset %}\n        \n        , {{ dbt.bool_or(compare_statement) }} as {{ column | lower }}_has_difference\n    \n        {% endfor %}\n    from {{ a_relation }} as a\n    inner join {{ b_relation }} as b\n        on a.{{ primary_key }} = b.{{ primary_key }}\n\n)\n\n{% for column in column_names %}\n    \n    select \n        '{{ column }}' as column_name, \n        {{ column | lower }}_has_difference as has_difference\n    \n    from bool_or\n\n    {% if not loop.last %}\n        \n    union all \n\n    {% endif %}\n\n{% endfor %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_utils.get_filtered_columns_in_relation","macro.dbt.bool_or"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6021702,"supported_languages":null},"macro.audit_helper.compare_column_values_verbose":{"name":"compare_column_values_verbose","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_column_values_verbose.sql","original_file_path":"macros/compare_column_values_verbose.sql","unique_id":"macro.audit_helper.compare_column_values_verbose","macro_sql":"{% macro compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values_verbose', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.audit_helper.default__compare_column_values_verbose"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.604537,"supported_languages":null},"macro.audit_helper.default__compare_column_values_verbose":{"name":"default__compare_column_values_verbose","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_column_values_verbose.sql","original_file_path":"macros/compare_column_values_verbose.sql","unique_id":"macro.audit_helper.default__compare_column_values_verbose","macro_sql":"{% macro default__compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n)\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as primary_key,\n\n        {% if target.name == 'postgres' or target.name == 'redshift' %}\n            '{{ column_to_compare }}'::text as column_name,\n        {% else %}\n            '{{ column_to_compare }}' as column_name,\n        {% endif %}\n\n        coalesce(\n            a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} and \n                a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null,\n            (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null),\n            false\n        ) as perfect_match,\n        a_query.{{ column_to_compare }} is null and a_query.{{ primary_key }} is not null as null_in_a,\n        b_query.{{ column_to_compare }} is null and b_query.{{ primary_key }} is not null as null_in_b,\n        a_query.{{ primary_key }} is null as missing_from_a,\n        b_query.{{ primary_key }} is null as missing_from_b,\n        coalesce(\n            a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null and \n            -- ensure that neither value is missing before considering it a conflict\n            (\n                a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} or -- two not-null values that do not match\n                (a_query.{{ column_to_compare }} is not null and b_query.{{ column_to_compare }} is null) or -- null in b and not null in a\n                (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is not null) -- null in a and not null in b\n            ), \n            false\n        ) as conflicting_values\n        -- considered a conflict if the values do not match AND at least one of the values is not null.\n\n    from a_query\n\n    full outer join b_query on (a_query.{{ primary_key }} = b_query.{{ primary_key }})\n\n\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.605345,"supported_languages":null},"macro.audit_helper.compare_column_values":{"name":"compare_column_values","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_column_values.sql","original_file_path":"macros/compare_column_values.sql","unique_id":"macro.audit_helper.compare_column_values","macro_sql":"{% macro compare_column_values(a_query, b_query, primary_key, column_to_compare, emojis=True, a_relation_name='a', b_relation_name='b') -%}\n  {{ return(adapter.dispatch('compare_column_values', 'audit_helper')(a_query, b_query, primary_key, column_to_compare, emojis, a_relation_name, b_relation_name)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.audit_helper.default__compare_column_values"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.608381,"supported_languages":null},"macro.audit_helper.default__compare_column_values":{"name":"default__compare_column_values","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_column_values.sql","original_file_path":"macros/compare_column_values.sql","unique_id":"macro.audit_helper.default__compare_column_values","macro_sql":"{% macro default__compare_column_values(a_query, b_query, primary_key, column_to_compare, emojis, a_relation_name, b_relation_name) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n),\n\njoined as (\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as {{ primary_key }},\n        a_query.{{ column_to_compare }} as a_query_value,\n        b_query.{{ column_to_compare }} as b_query_value,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then '{% if emojis %}✅: {% endif %}perfect match'\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then '{% if emojis %}✅: {% endif %}both are null'\n            when a_query.{{ primary_key }} is null then '{% if emojis %}🤷: {% endif %}missing from {{ a_relation_name }}'\n            when b_query.{{ primary_key }} is null then '{% if emojis %}🤷: {% endif %}missing from {{ b_relation_name }}'\n            when a_query.{{ column_to_compare }} is null then '{% if emojis %}🤷: {% endif %}value is null in {{ a_relation_name }} only'\n            when b_query.{{ column_to_compare }} is null then '{% if emojis %}🤷: {% endif %}value is null in {{ b_relation_name }} only'\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then '{% if emojis %}❌: {% endif %}‍values do not match'\n            else 'unknown' -- this should never happen\n        end as match_status,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then 0\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then 1\n            when a_query.{{ primary_key }} is null then 2\n            when b_query.{{ primary_key }} is null then 3\n            when a_query.{{ column_to_compare }} is null then 4\n            when b_query.{{ column_to_compare }} is null then 5\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then 6\n            else 7 -- this should never happen\n        end as match_order\n\n    from a_query\n\n    full outer join b_query on a_query.{{ primary_key }} = b_query.{{ primary_key }}\n),\n\naggregated as (\n    select\n        '{{ column_to_compare }}' as column_name,\n        match_status,\n        match_order,\n        count(*) as count_records\n    from joined\n\n    group by column_name, match_status, match_order\n)\n\nselect\n    column_name,\n    match_status,\n    count_records,\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\n\nfrom aggregated\n\norder by match_order\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6096902,"supported_languages":null},"macro.audit_helper.compare_queries":{"name":"compare_queries","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_queries.sql","original_file_path":"macros/compare_queries.sql","unique_id":"macro.audit_helper.compare_queries","macro_sql":"{% macro compare_queries(a_query, b_query, primary_key=None, summarize=true, limit=None) -%}\n  {{ return(adapter.dispatch('compare_queries', 'audit_helper')(a_query, b_query, primary_key, summarize, limit)) }}\n{%- endmacro %}","depends_on":{"macros":["macro.audit_helper.default__compare_queries"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.610713,"supported_languages":null},"macro.audit_helper.default__compare_queries":{"name":"default__compare_queries","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_queries.sql","original_file_path":"macros/compare_queries.sql","unique_id":"macro.audit_helper.default__compare_queries","macro_sql":"{% macro default__compare_queries(a_query, b_query, primary_key=None, summarize=true, limit=None) %}\n\nwith a as (\n\n    {{ a_query }}\n\n),\n\nb as (\n\n    {{ b_query }}\n\n),\n\na_intersect_b as (\n\n    select * from a\n    {{ dbt.intersect() }}\n    select * from b\n\n),\n\na_except_b as (\n\n    select * from a\n    {{ dbt.except() }}\n    select * from b\n\n),\n\nb_except_a as (\n\n    select * from b\n    {{ dbt.except() }}\n    select * from a\n\n),\n\nall_records as (\n\n    select\n        *,\n        true as in_a,\n        true as in_b\n    from a_intersect_b\n\n    union all\n\n    select\n        *,\n        true as in_a,\n        false as in_b\n    from a_except_b\n\n    union all\n\n    select\n        *,\n        false as in_a,\n        true as in_b\n    from b_except_a\n\n),\n\n{%- if summarize %}\n\nsummary_stats as (\n\n    select\n\n        in_a,\n        in_b,\n        count(*) as count\n\n    from all_records\n    group by 1, 2\n\n),\n\nfinal as (\n\n    select\n\n        *,\n        round(100.0 * count / sum(count) over (), 2) as percent_of_total\n\n    from summary_stats\n    order by in_a desc, in_b desc\n\n)\n\n{%- else %}\n\nfinal as (\n    \n    select * from all_records\n    where not (in_a and in_b)\n    order by {{ primary_key ~ \", \" if primary_key is not none }} in_a desc, in_b desc\n\n)\n\n{%- endif %}\n\nselect * from final\n{%- if limit and not summarize %}\nlimit {{ limit }}\n{%- endif %}\n\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.intersect","macro.dbt.except"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.611305,"supported_languages":null},"macro.audit_helper.compare_relation_columns":{"name":"compare_relation_columns","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.compare_relation_columns","macro_sql":"{% macro compare_relation_columns(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_relation_columns', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.audit_helper.default__compare_relation_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6123562,"supported_languages":null},"macro.audit_helper.default__compare_relation_columns":{"name":"default__compare_relation_columns","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.default__compare_relation_columns","macro_sql":"{% macro default__compare_relation_columns(a_relation, b_relation) %}\n\nwith a_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(a_relation) }}\n),\n\nb_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(b_relation) }}\n)\n\nselect\n    column_name,\n    a_cols.ordinal_position as a_ordinal_position,\n    b_cols.ordinal_position as b_ordinal_position,\n    a_cols.data_type as a_data_type,\n    b_cols.data_type as b_data_type,\n    coalesce(a_cols.ordinal_position = b_cols.ordinal_position, false) as has_ordinal_position_match,\n    coalesce(a_cols.data_type = b_cols.data_type, false) as has_data_type_match,\n    a_cols.data_type is not null and b_cols.data_type is null as in_a_only,\n    b_cols.data_type is not null and a_cols.data_type is null as in_b_only,\n    b_cols.data_type is not null and a_cols.data_type is not null as in_both\nfrom a_cols\nfull outer join b_cols using (column_name)\norder by coalesce(a_cols.ordinal_position, b_cols.ordinal_position)\n\n{% endmacro %}","depends_on":{"macros":["macro.audit_helper.get_columns_in_relation_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.612582,"supported_languages":null},"macro.audit_helper.get_columns_in_relation_sql":{"name":"get_columns_in_relation_sql","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.get_columns_in_relation_sql","macro_sql":"{% macro get_columns_in_relation_sql(relation) %}\n\n{{ adapter.dispatch('get_columns_in_relation_sql', 'audit_helper')(relation) }}\n\n{% endmacro %}","depends_on":{"macros":["macro.audit_helper.default__get_columns_in_relation_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.612742,"supported_languages":null},"macro.audit_helper.default__get_columns_in_relation_sql":{"name":"default__get_columns_in_relation_sql","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.default__get_columns_in_relation_sql","macro_sql":"{% macro default__get_columns_in_relation_sql(relation) %}\n    \n  {% set columns = adapter.get_columns_in_relation(relation) %}\n  {% for column in columns %}\n    select \n      {{ dbt.string_literal(column.name) }} as column_name, \n      {{ loop.index }} as ordinal_position,\n      {{ dbt.string_literal(column.data_type) }} as data_type\n\n  {% if not loop.last -%}\n    union all \n  {%- endif %}\n  {% endfor %}\n\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.string_literal"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.613132,"supported_languages":null},"macro.audit_helper.redshift__get_columns_in_relation_sql":{"name":"redshift__get_columns_in_relation_sql","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.redshift__get_columns_in_relation_sql","macro_sql":"{% macro redshift__get_columns_in_relation_sql(relation) %}\n  {# You can't store the results of an info schema query to a table/view in Redshift, because the data only lives on the leader node #}\n  {{ return (audit_helper.default__get_columns_in_relation_sql(relation)) }}\n{% endmacro %}","depends_on":{"macros":["macro.audit_helper.default__get_columns_in_relation_sql"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.613287,"supported_languages":null},"macro.audit_helper.snowflake__get_columns_in_relation_sql":{"name":"snowflake__get_columns_in_relation_sql","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.snowflake__get_columns_in_relation_sql","macro_sql":"{% macro snowflake__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/dev/louisa-may-alcott/plugins/snowflake/dbt/include/snowflake/macros/adapters.sql#L48\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from\n  {{ relation.information_schema('columns') }}\n\n  where table_name ilike '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema ilike '{{ relation.schema }}'\n    {% endif %}\n    {% if relation.database %}\n    and table_catalog ilike '{{ relation.database }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.information_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.613646,"supported_languages":null},"macro.audit_helper.postgres__get_columns_in_relation_sql":{"name":"postgres__get_columns_in_relation_sql","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.postgres__get_columns_in_relation_sql","macro_sql":"{% macro postgres__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/postgres/dbt/include/postgres/macros/adapters.sql#L32\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from {{ relation.information_schema('columns') }}\n  where table_name = '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema = '{{ relation.schema }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.information_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6139,"supported_languages":null},"macro.audit_helper.bigquery__get_columns_in_relation_sql":{"name":"bigquery__get_columns_in_relation_sql","resource_type":"macro","package_name":"audit_helper","path":"macros/compare_relation_columns.sql","original_file_path":"macros/compare_relation_columns.sql","unique_id":"macro.audit_helper.bigquery__get_columns_in_relation_sql","macro_sql":"{% macro bigquery__get_columns_in_relation_sql(relation) %}\n\n  select\n      ordinal_position,\n      column_name,\n      data_type\n\n  from `{{ relation.database }}`.`{{ relation.schema }}`.INFORMATION_SCHEMA.COLUMNS\n  where table_name = '{{ relation.identifier }}'\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.614065,"supported_languages":null},"macro.dbt_profiler.type_string":{"name":"type_string","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.type_string","macro_sql":"\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch(\"type_string\", macro_namespace=\"dbt_profiler\")()) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.615117,"supported_languages":null},"macro.dbt_profiler.default__type_string":{"name":"default__type_string","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.default__type_string","macro_sql":"{%- macro default__type_string() -%}\n  varchar\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.615202,"supported_languages":null},"macro.dbt_profiler.bigquery__type_string":{"name":"bigquery__type_string","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.bigquery__type_string","macro_sql":"{%- macro bigquery__type_string() -%}\n  string\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.615275,"supported_languages":null},"macro.dbt_profiler.databricks__type_string":{"name":"databricks__type_string","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.databricks__type_string","macro_sql":"{%- macro databricks__type_string() -%}\n  string\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.615345,"supported_languages":null},"macro.dbt_profiler.is_numeric_dtype":{"name":"is_numeric_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.is_numeric_dtype","macro_sql":"\n\n{%- macro is_numeric_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_numeric_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__is_numeric_dtype"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.615523,"supported_languages":null},"macro.dbt_profiler.default__is_numeric_dtype":{"name":"default__is_numeric_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.default__is_numeric_dtype","macro_sql":"{%- macro default__is_numeric_dtype(dtype) -%}\n  {% set is_numeric = dtype.startswith(\"int\") or dtype.startswith(\"float\") or \"numeric\" in dtype or \"number\" in dtype or \"double\" in dtype or \"bigint\" in dtype %}\n  {% do return(is_numeric) %}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.615917,"supported_languages":null},"macro.dbt_profiler.sqlserver__is_numeric_dtype":{"name":"sqlserver__is_numeric_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.sqlserver__is_numeric_dtype","macro_sql":"{%- macro sqlserver__is_numeric_dtype(dtype) -%}\n  {% set is_numeric = dtype in [\"decimal\", \"numeric\", \"bigint\" \"numeric\", \"smallint\", \"decimal\", \"int\", \"tinyint\", \"money\", \"float\", \"real\"]  %}\n  {% do return(is_numeric) %}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6162229,"supported_languages":null},"macro.dbt_profiler.is_logical_dtype":{"name":"is_logical_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.is_logical_dtype","macro_sql":"\n\n{%- macro is_logical_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_logical_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__is_logical_dtype"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.616409,"supported_languages":null},"macro.dbt_profiler.default__is_logical_dtype":{"name":"default__is_logical_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.default__is_logical_dtype","macro_sql":"{%- macro default__is_logical_dtype(dtype) -%}\n  {% set is_bool = dtype.startswith(\"bool\") %}\n  {% do return(is_bool) %}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6165912,"supported_languages":null},"macro.dbt_profiler.is_date_or_time_dtype":{"name":"is_date_or_time_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.is_date_or_time_dtype","macro_sql":"\n\n{%- macro is_date_or_time_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_date_or_time_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__is_date_or_time_dtype"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.616769,"supported_languages":null},"macro.dbt_profiler.default__is_date_or_time_dtype":{"name":"default__is_date_or_time_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.default__is_date_or_time_dtype","macro_sql":"{%- macro default__is_date_or_time_dtype(dtype) -%}\n  {% set is_date_or_time = dtype.startswith(\"timestamp\") or dtype.startswith(\"date\") %}\n  {% do return(is_date_or_time) %}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.616991,"supported_languages":null},"macro.dbt_profiler.is_struct_dtype":{"name":"is_struct_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.is_struct_dtype","macro_sql":"\n\n{%- macro is_struct_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_struct_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__is_struct_dtype"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.617172,"supported_languages":null},"macro.dbt_profiler.default__is_struct_dtype":{"name":"default__is_struct_dtype","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.default__is_struct_dtype","macro_sql":"{%- macro default__is_struct_dtype(dtype) -%}\n  {% do return((dtype | lower).startswith('struct')) %}\n{%- endmacro -%}\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.617344,"supported_languages":null},"macro.dbt_profiler.information_schema":{"name":"information_schema","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.information_schema","macro_sql":"\n\n{%- macro information_schema(relation) -%}\n  {{ return(adapter.dispatch(\"information_schema\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__information_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.617522,"supported_languages":null},"macro.dbt_profiler.default__information_schema":{"name":"default__information_schema","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.default__information_schema","macro_sql":"{%- macro default__information_schema(relation) -%}\n  {{ relation.information_schema() }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.information_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6176279,"supported_languages":null},"macro.dbt_profiler.bigquery__information_schema":{"name":"bigquery__information_schema","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.bigquery__information_schema","macro_sql":"{%- macro bigquery__information_schema(relation) -%}\n  {{ adapter.quote(relation.database) }}.{{ adapter.quote(relation.schema) }}.INFORMATION_SCHEMA\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.617804,"supported_languages":null},"macro.dbt_profiler.select_from_information_schema_columns":{"name":"select_from_information_schema_columns","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.select_from_information_schema_columns","macro_sql":"\n\n{%- macro select_from_information_schema_columns(relation) -%}\n  {{ return(adapter.dispatch(\"select_from_information_schema_columns\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__select_from_information_schema_columns"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.617984,"supported_languages":null},"macro.dbt_profiler.default__select_from_information_schema_columns":{"name":"default__select_from_information_schema_columns","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.default__select_from_information_schema_columns","macro_sql":"{%- macro default__select_from_information_schema_columns(relation) -%}\n  select\n    *\n  from {{ dbt_profiler.information_schema(relation) }}.COLUMNS\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n  order by ordinal_position asc\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.information_schema"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.618168,"supported_languages":null},"macro.dbt_profiler.redshift__select_from_information_schema_columns":{"name":"redshift__select_from_information_schema_columns","resource_type":"macro","package_name":"dbt_profiler","path":"macros/cross_db_utils.sql","original_file_path":"macros/cross_db_utils.sql","unique_id":"macro.dbt_profiler.redshift__select_from_information_schema_columns","macro_sql":"{%- macro redshift__select_from_information_schema_columns(relation) -%}\n  select\n    attr.attname::varchar as column_name,\n    type.typname::varchar as data_type,\n    class.relname::varchar as table_name,\n    namespace.nspname::varchar as table_schema\n  from pg_catalog.pg_attribute as attr\n  join pg_catalog.pg_type as type on (attr.atttypid = type.oid)\n  join pg_catalog.pg_class as class on (attr.attrelid = class.oid)\n  join pg_catalog.pg_namespace as namespace on (class.relnamespace = namespace.oid)\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n    and attr.attnum > 0\n{%- endmacro -%}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6183271,"supported_languages":null},"macro.dbt_profiler.get_relation":{"name":"get_relation","resource_type":"macro","package_name":"dbt_profiler","path":"macros/relation.sql","original_file_path":"macros/relation.sql","unique_id":"macro.dbt_profiler.get_relation","macro_sql":"{% macro get_relation(relation=none, relation_name=none, schema=none, database=none) %}\n\n{% if relation is none and relation_name is none %}\n  {{ exceptions.raise_compiler_error(\"Either relation or relation_name must be specified.\") }}\n{% endif %}\n\n{% if relation is none %}\n  {% if schema is none %}\n    {% set schema = target.schema %}\n  {% endif %}\n\n  {% if database is none %}\n    {% set database = target.database %}\n  {% endif %}\n\n  {{ log(\"Get relation %s (database=%s, schema=%s)\" | format(adapter.quote(relation_name), adapter.quote(database), adapter.quote(schema)), info=False) }}\n\n  {%- \n  set relation = adapter.get_relation(\n    database=database,\n    schema=schema,\n    identifier=relation_name\n  ) \n  -%}\n  {% if relation is none %}\n    {{ exceptions.raise_compiler_error(\"Relation \" ~ adapter.quote(relation_name) ~ \" does not exist or not authorized.\") }}\n  {% endif %}\n{% endif %}\n\n{% do return(relation) %}\n\n{% endmacro %}","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.619883,"supported_languages":null},"macro.dbt_profiler.assert_relation_exists":{"name":"assert_relation_exists","resource_type":"macro","package_name":"dbt_profiler","path":"macros/relation.sql","original_file_path":"macros/relation.sql","unique_id":"macro.dbt_profiler.assert_relation_exists","macro_sql":"\n\n{%- macro assert_relation_exists(relation) -%}\n  {{ return(adapter.dispatch(\"assert_relation_exists\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__assert_relation_exists"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.620071,"supported_languages":null},"macro.dbt_profiler.default__assert_relation_exists":{"name":"default__assert_relation_exists","resource_type":"macro","package_name":"dbt_profiler","path":"macros/relation.sql","original_file_path":"macros/relation.sql","unique_id":"macro.dbt_profiler.default__assert_relation_exists","macro_sql":"{% macro default__assert_relation_exists(relation) %}\n\n{% do run_query(\"select * from \" ~ relation ~ \" limit 0\") %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.620221,"supported_languages":null},"macro.dbt_profiler.sqlserver__assert_relation_exists":{"name":"sqlserver__assert_relation_exists","resource_type":"macro","package_name":"dbt_profiler","path":"macros/relation.sql","original_file_path":"macros/relation.sql","unique_id":"macro.dbt_profiler.sqlserver__assert_relation_exists","macro_sql":"{% macro sqlserver__assert_relation_exists(relation) %}\n\n{% do run_query(\"select top(0) * from \" ~ relation ~ \"\") %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6203709,"supported_languages":null},"macro.dbt_profiler.print_profile":{"name":"print_profile","resource_type":"macro","package_name":"dbt_profiler","path":"macros/print_profile.sql","original_file_path":"macros/print_profile.sql","unique_id":"macro.dbt_profiler.print_profile","macro_sql":"{% macro print_profile(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none, where_clause=none) %}\n\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n\n{% if execute %}\n  {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n{% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.get_profile_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.621144,"supported_languages":null},"macro.dbt_profiler.print_profile_docs":{"name":"print_profile_docs","resource_type":"macro","package_name":"dbt_profiler","path":"macros/print_profile_docs.sql","original_file_path":"macros/print_profile_docs.sql","unique_id":"macro.dbt_profiler.print_profile_docs","macro_sql":"{% macro print_profile_docs(relation=none, relation_name=none, docs_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none, where_clause=none) %}\n\n{% if execute %}\n\n    {%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n    \n    {% if docs_name is none %}\n        {% set docs_name = 'dbt_profiler__' + relation_name %}\n    {% endif %}\n    \n    {%- set startdocs = '{% docs ' ~ docs_name ~ '  %}' -%}\n    {%- set enddocs = '{% enddocs %}' -%}\n    \n    {# Check if macro is called in dbt Cloud? #}\n    {%- if flags.WHICH == 'rpc' -%}\n        {%- set is_dbt_cloud = true -%}\n    {%- else -%}\n        {%- set is_dbt_cloud = false -%}\n    {%- endif -%}\n    \n    {% if not is_dbt_cloud %}\n    \n        {{ print(startdocs) }}\n        {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n        {{ print(enddocs) }}\n    \n    {% else %}\n    \n        {%- set profile_docs=[] -%}\n        {% do profile_docs.append(startdocs) -%}\n        {% do profile_docs.append('') %}\n    \n        {# Get header from column names #}\n        {%- set headers = results.column_names -%}\n        {%- set header = [] -%}\n        {%- set horizontal_line = [] -%}\n    \n        {% for i in range(0,headers|length) %}\n            {% do header.append(headers[i]) %}\n            {% do horizontal_line.append('---') %}\n        {% endfor %}\n        {% do profile_docs.append('| ' ~ header|join(' | ') ~ ' |') %}\n        {% do profile_docs.append('| ' ~ horizontal_line|join(' | ') ~ ' |') %}\n    \n        {# Get row values #}\n        {% for row in results.rows %}\n            {%- set list_row = [''] -%}\n            {% for val in row.values() %}\n                {% do list_row.append(val) %}\n            {% endfor %}\n            {% do profile_docs.append(list_row|join(' | ') ~ ' |') %}\n        {% endfor %}\n        {% do profile_docs.append('') %}\n        {% do profile_docs.append(enddocs) %}\n    \n        {# Join profile docs #}\n        {%- set joined = profile_docs | join ('\\n') -%}\n        {{ log(joined, info=True) }}\n        {% do return(joined) %}\n    \n    {% endif %}\n    \n{% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.get_profile_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.624274,"supported_languages":null},"macro.dbt_profiler.get_profile":{"name":"get_profile","resource_type":"macro","package_name":"dbt_profiler","path":"macros/get_profile.sql","original_file_path":"macros/get_profile.sql","unique_id":"macro.dbt_profiler.get_profile","macro_sql":"{% macro get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n  {{ return(adapter.dispatch(\"get_profile\", macro_namespace=\"dbt_profiler\")(relation, exclude_measures, include_columns, exclude_columns, where_clause, group_by)) }}\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.default__get_profile"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.645347,"supported_languages":null},"macro.dbt_profiler.default__get_profile":{"name":"default__get_profile","resource_type":"macro","package_name":"dbt_profiler","path":"macros/get_profile.sql","original_file_path":"macros/get_profile.sql","unique_id":"macro.dbt_profiler.default__get_profile","macro_sql":"{% macro default__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {% set information_schema_columns = run_query(dbt_profiler.select_from_information_schema_columns(relation)) %}\n  {% set information_schema_columns = information_schema_columns.rename(information_schema_columns.column_names | map('lower')) %}\n  {% set information_schema_data_types = information_schema_columns.columns['data_type'].values() | map('lower') | list %}\n  {% set information_schema_column_names = information_schema_columns.columns['column_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in information_schema_column_names %}\n    {% do data_type_map.update({column_name: information_schema_data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select\n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.assert_relation_exists","macro.dbt.run_query","macro.dbt_profiler.select_from_information_schema_columns","macro.dbt_profiler.measure_row_count","macro.dbt_profiler.measure_not_null_proportion","macro.dbt_profiler.measure_distinct_proportion","macro.dbt_profiler.measure_distinct_count","macro.dbt_profiler.measure_is_unique","macro.dbt_profiler.measure_min","macro.dbt_profiler.measure_max","macro.dbt_profiler.measure_avg","macro.dbt_profiler.measure_median","macro.dbt_profiler.measure_std_dev_population","macro.dbt_profiler.measure_std_dev_sample","macro.dbt_profiler.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.649636,"supported_languages":null},"macro.dbt_profiler.databricks__get_profile":{"name":"databricks__get_profile","resource_type":"macro","package_name":"dbt_profiler","path":"macros/get_profile.sql","original_file_path":"macros/get_profile.sql","unique_id":"macro.dbt_profiler.databricks__get_profile","macro_sql":"{% macro databricks__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=True) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {# Get column metadata. #}\n  {% call statement('table_metadata', fetch_result=True) -%}\n    describe table extended {{ relation.schema }}.{{ relation.identifier }}\n  {% endcall %}\n  {% set columns_metadata = load_result('table_metadata').table %}\n  {% set columns_metadata = columns_metadata.rename(columns_metadata.column_names | map('lower')) %}\n  \n  {% set data_types = columns_metadata.columns['data_type'].values() | map('lower') | list %}\n  {% set column_names = columns_metadata.columns['col_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in column_names %}\n    {% do data_type_map.update({column_name: data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {# {{ print(profile_sql) }} #}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.assert_relation_exists","macro.dbt.statement","macro.dbt_profiler.measure_row_count","macro.dbt_profiler.measure_not_null_proportion","macro.dbt_profiler.measure_distinct_proportion","macro.dbt_profiler.measure_distinct_count","macro.dbt_profiler.measure_is_unique","macro.dbt_profiler.measure_min","macro.dbt_profiler.measure_max","macro.dbt_profiler.measure_avg","macro.dbt_profiler.measure_median","macro.dbt_profiler.measure_std_dev_population","macro.dbt_profiler.measure_std_dev_sample","macro.dbt_profiler.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.654094,"supported_languages":null},"macro.dbt_profiler.sqlserver__get_profile":{"name":"sqlserver__get_profile","resource_type":"macro","package_name":"dbt_profiler","path":"macros/get_profile.sql","original_file_path":"macros/get_profile.sql","unique_id":"macro.dbt_profiler.sqlserver__get_profile","macro_sql":"{% macro sqlserver__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {% set information_schema_columns = run_query(dbt_profiler.select_from_information_schema_columns(relation)) %}\n  {% set information_schema_columns = information_schema_columns.rename(information_schema_columns.column_names | map('lower')) %}\n  {% set information_schema_data_types = information_schema_columns.columns['data_type'].values() | map('lower') | list %}\n  {% set information_schema_column_names = information_schema_columns.columns['column_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in information_schema_column_names %}\n    {% do data_type_map.update({column_name: information_schema_data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select top 100 percent\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.assert_relation_exists","macro.dbt.run_query","macro.dbt_profiler.select_from_information_schema_columns","macro.dbt_profiler.measure_row_count","macro.dbt_profiler.measure_not_null_proportion","macro.dbt_profiler.measure_distinct_proportion","macro.dbt_profiler.measure_distinct_count","macro.dbt_profiler.measure_is_unique","macro.dbt_profiler.measure_min","macro.dbt_profiler.measure_max","macro.dbt_profiler.measure_avg","macro.dbt_profiler.measure_median","macro.dbt_profiler.measure_std_dev_population","macro.dbt_profiler.measure_std_dev_sample","macro.dbt_profiler.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.658421,"supported_languages":null},"macro.dbt_profiler.get_profile_table":{"name":"get_profile_table","resource_type":"macro","package_name":"dbt_profiler","path":"macros/get_profile_table.sql","original_file_path":"macros/get_profile_table.sql","unique_id":"macro.dbt_profiler.get_profile_table","macro_sql":"{% macro get_profile_table(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none) %}\n\n{%- set relation = dbt_profiler.get_relation(\n  relation=relation,\n  relation_name=relation_name,\n  schema=schema,\n  database=database\n) -%}\n{%- set profile_sql = dbt_profiler.get_profile(relation=relation, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n{{ log(profile_sql, info=False) }}\n{% set results = run_query(profile_sql) %}\n{% set results = results.rename(results.column_names | map('lower')) %}\n{% do return(results) %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.get_relation","macro.dbt_profiler.get_profile","macro.dbt.run_query"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.659316,"supported_languages":null},"macro.dbt_profiler.print_profile_schema":{"name":"print_profile_schema","resource_type":"macro","package_name":"dbt_profiler","path":"macros/print_profile_schema.sql","original_file_path":"macros/print_profile_schema.sql","unique_id":"macro.dbt_profiler.print_profile_schema","macro_sql":"{% macro print_profile_schema(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], model_description=\"\", column_description=\"\", where_clause=none) %}\n\n{%- set column_dicts = [] -%}\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n\n{% if execute %}\n  {% for row in results.rows %}\n\n    {% set row_dict = row.dict() %}\n    {% set column_name = row_dict.pop(\"column_name\") %}\n\n    {% set meta_dict = {} %}\n    {% for key, value in row_dict.items() %}\n      {% set column = results.columns.get(key) %}\n      {% do meta_dict.update({key: column.data_type.jsonify(value)}) %}\n    {% endfor %}\n\n    {% set column_dict = {\"name\": column_name, \"description\": column_description, \"meta\": meta_dict} %}\n    {% do column_dicts.append(column_dict) %}\n  {% endfor %}\n\n  {% set schema_dict = {\n    \"version\": 2,\n    \"models\": [\n      {\n        \"name\": relation_name,\n        \"description\": model_description,\n        \"columns\": column_dicts\n      }\n    ]\n  } %}\n  {% set schema_yaml = toyaml(schema_dict) %}\n\n  {{ log(schema_yaml, info=True) }}\n  {% do return(schema_dict) %}\n{% endif %}\n\n{% endmacro %}","depends_on":{"macros":["macro.dbt_profiler.get_profile_table"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6612842,"supported_languages":null},"macro.dbt_profiler.measure_row_count":{"name":"measure_row_count","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_row_count","macro_sql":"\n\n{%- macro measure_row_count(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_row_count\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_row_count"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.663708,"supported_languages":null},"macro.dbt_profiler.default__measure_row_count":{"name":"default__measure_row_count","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_row_count","macro_sql":"{%- macro default__measure_row_count(column_name, data_type) -%}\ncast(count(*) as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.663836,"supported_languages":null},"macro.dbt_profiler.measure_not_null_proportion":{"name":"measure_not_null_proportion","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_not_null_proportion","macro_sql":"\n\n{%- macro measure_not_null_proportion(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_not_null_proportion\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_not_null_proportion"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6640341,"supported_languages":null},"macro.dbt_profiler.default__measure_not_null_proportion":{"name":"default__measure_not_null_proportion","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_not_null_proportion","macro_sql":"{%- macro default__measure_not_null_proportion(column_name, data_type) -%}\nsum(case when {{ adapter.quote(column_name) }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6642072,"supported_languages":null},"macro.dbt_profiler.measure_distinct_proportion":{"name":"measure_distinct_proportion","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_distinct_proportion","macro_sql":"\n\n{%- macro measure_distinct_proportion(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_distinct_proportion\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_distinct_proportion"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.664405,"supported_languages":null},"macro.dbt_profiler.default__measure_distinct_proportion":{"name":"default__measure_distinct_proportion","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_distinct_proportion","macro_sql":"{%- macro default__measure_distinct_proportion(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }}) / cast(count(*) as {{ dbt.type_numeric() }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.66469,"supported_languages":null},"macro.dbt_profiler.measure_distinct_count":{"name":"measure_distinct_count","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_distinct_count","macro_sql":"\n\n{%- macro measure_distinct_count(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_distinct_count\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_distinct_count"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.66489,"supported_languages":null},"macro.dbt_profiler.default__measure_distinct_count":{"name":"default__measure_distinct_count","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_distinct_count","macro_sql":"{%- macro default__measure_distinct_count(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.665143,"supported_languages":null},"macro.dbt_profiler.measure_is_unique":{"name":"measure_is_unique","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_is_unique","macro_sql":"\n\n{%- macro measure_is_unique(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_is_unique\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_is_unique"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.665345,"supported_languages":null},"macro.dbt_profiler.default__measure_is_unique":{"name":"default__measure_is_unique","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_is_unique","macro_sql":"{%- macro default__measure_is_unique(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }}) = count(*)\n{%- else -%}\n    null\n{%- endif -%}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_struct_dtype"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.66556,"supported_languages":null},"macro.dbt_profiler.sqlserver__measure_is_unique":{"name":"sqlserver__measure_is_unique","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.sqlserver__measure_is_unique","macro_sql":"{%- macro sqlserver__measure_is_unique(column_name, data_type) -%}\ncase when count(distinct {{ adapter.quote(column_name) }}) = count(*) then 1 else 0 end\n{%- endmacro -%}\n\n\n","depends_on":{"macros":[]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.665694,"supported_languages":null},"macro.dbt_profiler.measure_min":{"name":"measure_min","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_min","macro_sql":"\n\n{%- macro measure_min(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_min\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_min"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.665895,"supported_languages":null},"macro.dbt_profiler.default__measure_min":{"name":"default__measure_min","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_min","macro_sql":"{%- macro default__measure_min(column_name, data_type) -%}\n{%- if (dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type)) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    cast(min({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }})\n{%- else -%}\n    cast(null as {{ dbt_profiler.type_string() }})\n{%- endif -%}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_date_or_time_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt_profiler.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6662679,"supported_languages":null},"macro.dbt_profiler.measure_max":{"name":"measure_max","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_max","macro_sql":"\n\n{%- macro measure_max(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_max\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_max"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6665301,"supported_languages":null},"macro.dbt_profiler.default__measure_max":{"name":"default__measure_max","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_max","macro_sql":"{%- macro default__measure_max(column_name, data_type) -%}\n{%- if (dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type)) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    cast(max({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }})\n{%- else -%}\n    cast(null as {{ dbt_profiler.type_string() }})\n{%- endif -%}\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_date_or_time_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt_profiler.type_string"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.666902,"supported_languages":null},"macro.dbt_profiler.measure_avg":{"name":"measure_avg","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_avg","macro_sql":"\n\n{%- macro measure_avg(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_avg\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_avg"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6671062,"supported_languages":null},"macro.dbt_profiler.default__measure_avg":{"name":"default__measure_avg","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_avg","macro_sql":"{%- macro default__measure_avg(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    avg({{ adapter.quote(column_name) }})\n{%- elif dbt_profiler.is_logical_dtype(data_type) -%}\n    avg(case when {{ adapter.quote(column_name) }} then 1 else 0 end)\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt_profiler.is_logical_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6674922,"supported_languages":null},"macro.dbt_profiler.redshift__measure_avg":{"name":"redshift__measure_avg","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.redshift__measure_avg","macro_sql":"{%- macro redshift__measure_avg(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    avg({{ adapter.quote(column_name) }}::float)\n{%- elif dbt_profiler.is_logical_dtype(data_type) -%}\n    avg(case when {{ adapter.quote(column_name) }} then 1.0 else 0.0 end)\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt_profiler.is_logical_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.667884,"supported_languages":null},"macro.dbt_profiler.measure_median":{"name":"measure_median","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_median","macro_sql":"\n\n{%- macro measure_median(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_median\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_median"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.668087,"supported_languages":null},"macro.dbt_profiler.default__measure_median":{"name":"default__measure_median","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_median","macro_sql":"{%- macro default__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    median({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.668374,"supported_languages":null},"macro.dbt_profiler.bigquery__measure_median":{"name":"bigquery__measure_median","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.bigquery__measure_median","macro_sql":"{%- macro bigquery__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    APPROX_QUANTILES({{ adapter.quote(column_name) }}, 100)[OFFSET(50)]\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.668662,"supported_languages":null},"macro.dbt_profiler.postgres__measure_median":{"name":"postgres__measure_median","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.postgres__measure_median","macro_sql":"{%- macro postgres__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    percentile_cont(0.5) within group (order by {{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6689541,"supported_languages":null},"macro.dbt_profiler.sql_server__measure_median":{"name":"sql_server__measure_median","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.sql_server__measure_median","macro_sql":"{%- macro sql_server__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    percentile_cont({{ adapter.quote(column_name) }}, 0.5) over ()\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6692438,"supported_languages":null},"macro.dbt_profiler.measure_std_dev_population":{"name":"measure_std_dev_population","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_std_dev_population","macro_sql":"\n\n{%- macro measure_std_dev_population(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_std_dev_population\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_std_dev_population"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.669444,"supported_languages":null},"macro.dbt_profiler.default__measure_std_dev_population":{"name":"default__measure_std_dev_population","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_std_dev_population","macro_sql":"{%- macro default__measure_std_dev_population(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    stddev_pop({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.669732,"supported_languages":null},"macro.dbt_profiler.sqlserver__measure_std_dev_population":{"name":"sqlserver__measure_std_dev_population","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.sqlserver__measure_std_dev_population","macro_sql":"{%- macro sqlserver__measure_std_dev_population(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) -%}\n    stdevp({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.669973,"supported_languages":null},"macro.dbt_profiler.measure_std_dev_sample":{"name":"measure_std_dev_sample","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.measure_std_dev_sample","macro_sql":"\n\n{%- macro measure_std_dev_sample(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_std_dev_sample\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.default__measure_std_dev_sample"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.670173,"supported_languages":null},"macro.dbt_profiler.default__measure_std_dev_sample":{"name":"default__measure_std_dev_sample","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.default__measure_std_dev_sample","macro_sql":"{%- macro default__measure_std_dev_sample(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    stddev_samp({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt_profiler.is_struct_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6704571,"supported_languages":null},"macro.dbt_profiler.sqlserver__measure_std_dev_sample":{"name":"sqlserver__measure_std_dev_sample","resource_type":"macro","package_name":"dbt_profiler","path":"macros/measures.sql","original_file_path":"macros/measures.sql","unique_id":"macro.dbt_profiler.sqlserver__measure_std_dev_sample","macro_sql":"{%- macro sqlserver__measure_std_dev_sample(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) -%}\n    stdev({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}","depends_on":{"macros":["macro.dbt_profiler.is_numeric_dtype","macro.dbt.type_numeric"]},"description":"","meta":{},"docs":{"show":true,"node_color":null},"patch_path":null,"arguments":[],"created_at":1730854370.6707,"supported_languages":null}},"docs":{"doc.jaffle_shop.__overview__":{"name":"__overview__","resource_type":"doc","package_name":"jaffle_shop","path":"overview.md","original_file_path":"models/overview.md","unique_id":"doc.jaffle_shop.__overview__","block_contents":"## Data Documentation for Jaffle Shop\n\n`jaffle_shop` is a fictional ecommerce store.\n\nThis [dbt](https://www.getdbt.com/) project is for testing out code.\n\nThe source code can be found [here](https://github.com/clrcrl/jaffle_shop)."},"doc.jaffle_shop.orders_status":{"name":"orders_status","resource_type":"doc","package_name":"jaffle_shop","path":"docs.md","original_file_path":"models/docs.md","unique_id":"doc.jaffle_shop.orders_status","block_contents":"Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |"},"doc.dbt.__overview__":{"name":"__overview__","resource_type":"doc","package_name":"dbt","path":"overview.md","original_file_path":"docs/overview.md","unique_id":"doc.dbt.__overview__","block_contents":"### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}},"exposures":{},"metrics":{},"groups":{},"selectors":{},"disabled":{},"parent_map":{"model.jaffle_shop.customers":["model.jaffle_shop.stg_customers","model.jaffle_shop.stg_orders","model.jaffle_shop.stg_payments"],"model.jaffle_shop.orders":["model.jaffle_shop.stg_orders","model.jaffle_shop.stg_payments"],"model.jaffle_shop.customer_segments":["model.jaffle_shop.customers"],"model.jaffle_shop.customer_order_pattern":["model.jaffle_shop.customers"],"model.jaffle_shop.stg_customers":["source.jaffle_shop.jaffle-shop-data.raw_customers"],"model.jaffle_shop.stg_payments":["source.jaffle_shop.jaffle-shop-data.raw_payments"],"model.jaffle_shop.stg_orders":["source.jaffle_shop.jaffle-shop-data.raw_orders"],"test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1":["model.jaffle_shop.customers"],"test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d":["model.jaffle_shop.customers"],"test.jaffle_shop.unique_customer_segments_customer_id.f3a5b61998":["model.jaffle_shop.customer_segments"],"test.jaffle_shop.not_null_customer_segments_customer_id.bcd345d84b":["model.jaffle_shop.customer_segments"],"test.jaffle_shop.accepted_values_customer_segments_value_segment__High_Value__Medium_Value__Low_Value.089ad1c243":["model.jaffle_shop.customer_segments"],"test.jaffle_shop.unique_customer_order_pattern_customer_id.99ad852c54":["model.jaffle_shop.customer_order_pattern"],"test.jaffle_shop.not_null_customer_order_pattern_customer_id.3f8f4d52ea":["model.jaffle_shop.customer_order_pattern"],"test.jaffle_shop.unique_orders_order_id.fed79b3a6e":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_order_id.cf6c17daed":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_customer_id.c5f02694af":["model.jaffle_shop.orders"],"test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2":["model.jaffle_shop.customers","model.jaffle_shop.orders"],"test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_amount.106140f9fd":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49":["model.jaffle_shop.orders"],"test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a":["model.jaffle_shop.orders"],"test.jaffle_shop.unique_stg_customers_customer_id.c7614daada":["model.jaffle_shop.stg_customers"],"test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa":["model.jaffle_shop.stg_customers"],"test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a":["model.jaffle_shop.stg_orders"],"test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64":["model.jaffle_shop.stg_orders"],"test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad":["model.jaffle_shop.stg_orders"],"test.jaffle_shop.unique_stg_payments_payment_id.3744510712":["model.jaffle_shop.stg_payments"],"test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075":["model.jaffle_shop.stg_payments"],"test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278":["model.jaffle_shop.stg_payments"],"source.jaffle_shop.jaffle-shop-data.raw_customers":[],"source.jaffle_shop.jaffle-shop-data.raw_orders":[],"source.jaffle_shop.jaffle-shop-data.raw_payments":[]},"child_map":{"model.jaffle_shop.customers":["model.jaffle_shop.customer_order_pattern","model.jaffle_shop.customer_segments","test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d","test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2","test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1"],"model.jaffle_shop.orders":["test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3","test.jaffle_shop.not_null_orders_amount.106140f9fd","test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49","test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625","test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59","test.jaffle_shop.not_null_orders_customer_id.c5f02694af","test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a","test.jaffle_shop.not_null_orders_order_id.cf6c17daed","test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2","test.jaffle_shop.unique_orders_order_id.fed79b3a6e"],"model.jaffle_shop.customer_segments":["test.jaffle_shop.accepted_values_customer_segments_value_segment__High_Value__Medium_Value__Low_Value.089ad1c243","test.jaffle_shop.not_null_customer_segments_customer_id.bcd345d84b","test.jaffle_shop.unique_customer_segments_customer_id.f3a5b61998"],"model.jaffle_shop.customer_order_pattern":["test.jaffle_shop.not_null_customer_order_pattern_customer_id.3f8f4d52ea","test.jaffle_shop.unique_customer_order_pattern_customer_id.99ad852c54"],"model.jaffle_shop.stg_customers":["model.jaffle_shop.customers","test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa","test.jaffle_shop.unique_stg_customers_customer_id.c7614daada"],"model.jaffle_shop.stg_payments":["model.jaffle_shop.customers","model.jaffle_shop.orders","test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278","test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075","test.jaffle_shop.unique_stg_payments_payment_id.3744510712"],"model.jaffle_shop.stg_orders":["model.jaffle_shop.customers","model.jaffle_shop.orders","test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad","test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64","test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a"],"test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1":[],"test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d":[],"test.jaffle_shop.unique_customer_segments_customer_id.f3a5b61998":[],"test.jaffle_shop.not_null_customer_segments_customer_id.bcd345d84b":[],"test.jaffle_shop.accepted_values_customer_segments_value_segment__High_Value__Medium_Value__Low_Value.089ad1c243":[],"test.jaffle_shop.unique_customer_order_pattern_customer_id.99ad852c54":[],"test.jaffle_shop.not_null_customer_order_pattern_customer_id.3f8f4d52ea":[],"test.jaffle_shop.unique_orders_order_id.fed79b3a6e":[],"test.jaffle_shop.not_null_orders_order_id.cf6c17daed":[],"test.jaffle_shop.not_null_orders_customer_id.c5f02694af":[],"test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2":[],"test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3":[],"test.jaffle_shop.not_null_orders_amount.106140f9fd":[],"test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59":[],"test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625":[],"test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49":[],"test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a":[],"test.jaffle_shop.unique_stg_customers_customer_id.c7614daada":[],"test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa":[],"test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a":[],"test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64":[],"test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad":[],"test.jaffle_shop.unique_stg_payments_payment_id.3744510712":[],"test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075":[],"test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278":[],"source.jaffle_shop.jaffle-shop-data.raw_customers":["model.jaffle_shop.stg_customers"],"source.jaffle_shop.jaffle-shop-data.raw_orders":["model.jaffle_shop.stg_orders"],"source.jaffle_shop.jaffle-shop-data.raw_payments":["model.jaffle_shop.stg_payments"]},"group_map":{},"saved_queries":{},"semantic_models":{},"unit_tests":{}},"catalog":{"metadata":{"dbt_schema_version":"https://schemas.getdbt.com/dbt/catalog/v1.json","dbt_version":"1.7.18","generated_at":"2024-11-06T00:53:03.387961Z","invocation_id":"7c9072ea-c83a-48e7-9cbd-37ea100ed37f","env":{}},"nodes":{"model.jaffle_shop.customer_order_pattern":{"metadata":{"type":"BASE TABLE","schema":"dev","name":"customer_order_pattern","database":"jaffle_shop","comment":null,"owner":null},"columns":{"customer_id":{"type":"BIGINT","index":1,"name":"customer_id","comment":null},"first_order":{"type":"DATE","index":2,"name":"first_order","comment":null},"most_recent_order":{"type":"DATE","index":3,"name":"most_recent_order","comment":null},"number_of_orders":{"type":"BIGINT","index":4,"name":"number_of_orders","comment":null},"days_active":{"type":"BIGINT","index":5,"name":"days_active","comment":null},"avg_days_between_orders":{"type":"DOUBLE","index":6,"name":"avg_days_between_orders","comment":null}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.jaffle_shop.customer_order_pattern"},"model.jaffle_shop.customer_segments":{"metadata":{"type":"BASE TABLE","schema":"dev","name":"customer_segments","database":"jaffle_shop","comment":null,"owner":null},"columns":{"customer_id":{"type":"BIGINT","index":1,"name":"customer_id","comment":null},"number_of_orders":{"type":"BIGINT","index":2,"name":"number_of_orders","comment":null},"customer_lifetime_value":{"type":"BIGINT","index":3,"name":"customer_lifetime_value","comment":null},"order_frequency_segment":{"type":"VARCHAR","index":4,"name":"order_frequency_segment","comment":null},"value_segment":{"type":"VARCHAR","index":5,"name":"value_segment","comment":null}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.jaffle_shop.customer_segments"},"model.jaffle_shop.customers":{"metadata":{"type":"BASE TABLE","schema":"dev","name":"customers","database":"jaffle_shop","comment":null,"owner":null},"columns":{"customer_id":{"type":"BIGINT","index":1,"name":"customer_id","comment":null},"first_name":{"type":"VARCHAR","index":2,"name":"first_name","comment":null},"last_name":{"type":"VARCHAR","index":3,"name":"last_name","comment":null},"first_order":{"type":"DATE","index":4,"name":"first_order","comment":null},"most_recent_order":{"type":"DATE","index":5,"name":"most_recent_order","comment":null},"number_of_orders":{"type":"BIGINT","index":6,"name":"number_of_orders","comment":null},"customer_lifetime_value":{"type":"BIGINT","index":7,"name":"customer_lifetime_value","comment":null}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.jaffle_shop.customers"},"model.jaffle_shop.orders":{"metadata":{"type":"BASE TABLE","schema":"dev","name":"orders","database":"jaffle_shop","comment":null,"owner":null},"columns":{"order_id":{"type":"BIGINT","index":1,"name":"order_id","comment":null},"customer_id":{"type":"BIGINT","index":2,"name":"customer_id","comment":null},"order_date":{"type":"DATE","index":3,"name":"order_date","comment":null},"status":{"type":"VARCHAR","index":4,"name":"status","comment":null},"credit_card_amount":{"type":"DOUBLE","index":5,"name":"credit_card_amount","comment":null},"coupon_amount":{"type":"DOUBLE","index":6,"name":"coupon_amount","comment":null},"bank_transfer_amount":{"type":"DOUBLE","index":7,"name":"bank_transfer_amount","comment":null},"gift_card_amount":{"type":"DOUBLE","index":8,"name":"gift_card_amount","comment":null},"amount":{"type":"DOUBLE","index":9,"name":"amount","comment":null}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.jaffle_shop.orders"},"model.jaffle_shop.stg_customers":{"metadata":{"type":"VIEW","schema":"dev","name":"stg_customers","database":"jaffle_shop","comment":null,"owner":null},"columns":{"customer_id":{"type":"BIGINT","index":1,"name":"customer_id","comment":null},"first_name":{"type":"VARCHAR","index":2,"name":"first_name","comment":null},"last_name":{"type":"VARCHAR","index":3,"name":"last_name","comment":null}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.jaffle_shop.stg_customers"},"model.jaffle_shop.stg_orders":{"metadata":{"type":"VIEW","schema":"dev","name":"stg_orders","database":"jaffle_shop","comment":null,"owner":null},"columns":{"order_id":{"type":"BIGINT","index":1,"name":"order_id","comment":null},"customer_id":{"type":"BIGINT","index":2,"name":"customer_id","comment":null},"order_date":{"type":"DATE","index":3,"name":"order_date","comment":null},"status":{"type":"VARCHAR","index":4,"name":"status","comment":null}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.jaffle_shop.stg_orders"},"model.jaffle_shop.stg_payments":{"metadata":{"type":"VIEW","schema":"dev","name":"stg_payments","database":"jaffle_shop","comment":null,"owner":null},"columns":{"payment_id":{"type":"BIGINT","index":1,"name":"payment_id","comment":null},"order_id":{"type":"BIGINT","index":2,"name":"order_id","comment":null},"payment_method":{"type":"VARCHAR","index":3,"name":"payment_method","comment":null},"amount":{"type":"DOUBLE","index":4,"name":"amount","comment":null}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.jaffle_shop.stg_payments"}},"sources":{},"errors":null}}},"git":{"branch":"fix/customer-lifetime-value"},"pull_request":{"id":1,"title":"(Demo) Fix: customer lifetime value calculation in customers","url":"https://github.com/DataRecce/jaffle_shop_duckdb/pull/1","branch":"fix/customer-lifetime-value","base_branch":"main","repository":"DataRecce/jaffle_shop_duckdb"}}