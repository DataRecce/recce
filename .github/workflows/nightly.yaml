name: Recce Nightly Build
on:
  schedule:
    - cron: '0 18 * * 0,1,2,3,4' # run at 2 AM (UTC + 8) every working day
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Select the type of night build'
        type: choice
        required: true
        options:
          - Alpha Release
          - Release
      alpha_version:
        description: 'Alpha version serial number'
        required: true
        type: number
        default: 0

jobs:
  build-nightly-release:
    name: Build Recce Nightly Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        run: |
          # Install Python dependencies
          python -m pip install --upgrade pip
          pip install -e .

          # Install Node dependencies
          pushd js
          pnpm install --frozen-lockfile
          popd

      - name: Patch Recce Version
        id: patch_version
        run: |
          # Patch version
          if [[ "$RELEASE_TYPE" == "Alpha Release" && "$ALPHA_VERSION" != "" ]]; then
            echo "Manually alpha version serial number: $ALPHA_VERSION"
            sed -i.bak "s/\.dev.*\$/\.$(date '+%Y%m%d')a$ALPHA_VERSION/" recce/VERSION
          else
            latest_version=$(curl -s https://pypi.org/pypi/recce-nightly/json  | jq -r .info.version)
            new_version=$(cat recce/VERSION | sed "s/\.dev.*\$/\.$(date '+%Y%m%d')/")

            # Extract date-only portion of both
            latest_date=$(echo "$latest_version" | sed -E 's/^.*\.([0-9]{8}).*/\1/')
            new_date=$(date '+%Y%m%d')

            if [[ "$latest_date" < "$new_date" ]]; then
              # New date is newer, no post needed
              final_version="$new_version"
            else
              # Same date, check if latest already has postN
              if [[ "$latest_version" =~ -post([0-9]+)$ ]]; then
                post_num=$(( ${BASH_REMATCH[1]} + 1 ))
              else
                post_num=1
              fi
              final_version="${new_version}-post${post_num}"
            fi
            echo "$final_version" > recce/VERSION
          fi
          echo "Nightly version: $(cat recce/VERSION)"
          echo "nightly_version=$(cat recce/VERSION)" >> $GITHUB_OUTPUT
        env:
          ALPHA_VERSION: ${{ inputs.alpha_version || '' }}
          RELEASE_TYPE: ${{ inputs.release_type || 'Release' }}

      - name: Patch Event API Key
        run: |
          # Patch Event API Key
          sed -i.bak "s/<API_KEY>/${EVENT_API_KEY}/" recce/event/CONFIG
        env:
          EVENT_API_KEY: ${{ secrets.AMPLITUDE_NIGHTLY_API_KEY }}

      - name: Build Front-end Static Files
        run: |
          # Build static files
          pushd js
          pnpm build
          popd
        env:
          AMPLITUDE_API_KEY: ${{ secrets.AMPLITUDE_NIGHTLY_API_KEY }}

      - name: Release to Pypi
        run: |
          # generate pypirc
          echo "$PYPIRC" > $HOME/.pypirc

          # change package name to recce-nightly
          sed -i.bak 's/name="recce"/name="recce-nightly"/' setup.py

          # build and upload to pypi
          pip install build twine
          python -m build
          python -m twine upload dist/*
        env:
          PYPIRC: ${{ secrets.PYPI }}

      - name: Mark Sentry Release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: infuseai
          SENTRY_PROJECT: recce
        with:
          environment: nightly
          ignore_empty: true
          ignore_missing: true
          version: ${{ steps.patch_version.outputs.nightly_version }}
